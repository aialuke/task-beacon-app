[{"filePath":"/Users/lukemckenzie/task-beacon-app/task-beacon-app-cursor/task-beacon-app/eslint.config.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app/task-beacon-app-cursor/task-beacon-app/postcss.config.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app/task-beacon-app-cursor/task-beacon-app/src/App.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app/task-beacon-app-cursor/task-beacon-app/src/components/ErrorBoundary.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app/task-beacon-app-cursor/task-beacon-app/src/components/admin/DatabaseTestPanel.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":11,"column":12,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":11,"endColumn":15,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[420,423],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[420,423],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\nimport { useState } from 'react';\nimport { Button } from '@/components/ui/button';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Badge } from '@/components/ui/badge';\nimport { runAllCRUDTests } from '@/lib/testing/crudTesting';\nimport { Loader2, Play, CheckCircle, XCircle, Clock } from 'lucide-react';\n\ninterface TestSuite {\n  suiteName: string;\n  results: any[];\n  totalDuration: number;\n  passed: number;\n  failed: number;\n}\n\nexport default function DatabaseTestPanel() {\n  const [isRunning, setIsRunning] = useState(false);\n  const [testResults, setTestResults] = useState<TestSuite[]>([]);\n  const [lastRun, setLastRun] = useState<Date | null>(null);\n\n  const handleRunTests = async () => {\n    setIsRunning(true);\n    try {\n      const results = await runAllCRUDTests();\n      setTestResults(results);\n      setLastRun(new Date());\n    } catch (error) {\n      console.error('Test execution failed:', error);\n    } finally {\n      setIsRunning(false);\n    }\n  };\n\n  const getTotalStats = () => {\n    const totalPassed = testResults.reduce((sum, suite) => sum + suite.passed, 0);\n    const totalFailed = testResults.reduce((sum, suite) => sum + suite.failed, 0);\n    const totalDuration = testResults.reduce((sum, suite) => sum + suite.totalDuration, 0);\n    \n    return { totalPassed, totalFailed, totalDuration };\n  };\n\n  const { totalPassed, totalFailed, totalDuration } = getTotalStats();\n\n  return (\n    <Card className=\"w-full max-w-4xl mx-auto\">\n      <CardHeader>\n        <CardTitle className=\"flex items-center gap-2\">\n          <CheckCircle className=\"h-5 w-5\" />\n          Database Integrity Testing\n        </CardTitle>\n        <CardDescription>\n          Test all CRUD operations and validate data integrity constraints\n        </CardDescription>\n      </CardHeader>\n      \n      <CardContent className=\"space-y-6\">\n        <div className=\"flex items-center justify-between\">\n          <div className=\"flex items-center gap-4\">\n            <Button \n              onClick={handleRunTests} \n              disabled={isRunning}\n              className=\"flex items-center gap-2\"\n            >\n              {isRunning ? (\n                <Loader2 className=\"h-4 w-4 animate-spin\" />\n              ) : (\n                <Play className=\"h-4 w-4\" />\n              )}\n              {isRunning ? 'Running Tests...' : 'Run All Tests'}\n            </Button>\n            \n            {lastRun && (\n              <div className=\"flex items-center gap-2 text-sm text-muted-foreground\">\n                <Clock className=\"h-4 w-4\" />\n                Last run: {lastRun.toLocaleTimeString()}\n              </div>\n            )}\n          </div>\n          \n          {testResults.length > 0 && (\n            <div className=\"flex items-center gap-2\">\n              <Badge variant={totalFailed === 0 ? \"default\" : \"destructive\"}>\n                {totalPassed}/{totalPassed + totalFailed} Passed\n              </Badge>\n              <Badge variant=\"outline\">\n                {totalDuration}ms\n              </Badge>\n            </div>\n          )}\n        </div>\n\n        {testResults.length > 0 && (\n          <div className=\"space-y-4\">\n            <h3 className=\"text-lg font-semibold\">Test Results</h3>\n            \n            {testResults.map((suite, index) => (\n              <Card key={index} className=\"border-l-4 border-l-primary\">\n                <CardHeader className=\"pb-3\">\n                  <div className=\"flex items-center justify-between\">\n                    <CardTitle className=\"text-base\">{suite.suiteName}</CardTitle>\n                    <div className=\"flex items-center gap-2\">\n                      <Badge variant={suite.failed === 0 ? \"default\" : \"destructive\"}>\n                        {suite.passed}/{suite.passed + suite.failed}\n                      </Badge>\n                      <Badge variant=\"outline\">\n                        {suite.totalDuration}ms\n                      </Badge>\n                    </div>\n                  </div>\n                </CardHeader>\n                \n                <CardContent>\n                  <div className=\"space-y-2\">\n                    {suite.results.map((result, resultIndex) => (\n                      <div \n                        key={resultIndex}\n                        className=\"flex items-center justify-between p-2 rounded border\"\n                      >\n                        <div className=\"flex items-center gap-2\">\n                          {result.success ? (\n                            <CheckCircle className=\"h-4 w-4 text-green-500\" />\n                          ) : (\n                            <XCircle className=\"h-4 w-4 text-red-500\" />\n                          )}\n                          <span className=\"text-sm font-medium\">\n                            {result.operation}\n                          </span>\n                        </div>\n                        \n                        <div className=\"flex items-center gap-2\">\n                          <Badge variant=\"outline\" className=\"text-xs\">\n                            {result.duration}ms\n                          </Badge>\n                          {result.error && (\n                            <Badge variant=\"destructive\" className=\"text-xs\">\n                              Error\n                            </Badge>\n                          )}\n                        </div>\n                      </div>\n                    ))}\n                  </div>\n                  \n                  {suite.results.some(r => r.error) && (\n                    <div className=\"mt-4 p-3 bg-red-50 border border-red-200 rounded\">\n                      <h4 className=\"text-sm font-semibold text-red-800 mb-2\">Errors:</h4>\n                      {suite.results\n                        .filter(r => r.error)\n                        .map((result, errorIndex) => (\n                          <div key={errorIndex} className=\"text-sm text-red-700\">\n                            <strong>{result.operation}:</strong> {result.error}\n                          </div>\n                        ))}\n                    </div>\n                  )}\n                </CardContent>\n              </Card>\n            ))}\n          </div>\n        )}\n      </CardContent>\n    </Card>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app/task-beacon-app-cursor/task-beacon-app/src/components/auth/FloatingInput.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app/task-beacon-app-cursor/task-beacon-app/src/components/auth/ModernAuthForm.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app/task-beacon-app-cursor/task-beacon-app/src/components/auth/PasswordStrengthIndicator.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app/task-beacon-app-cursor/task-beacon-app/src/components/business/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app/task-beacon-app-cursor/task-beacon-app/src/components/form/AnimatedCharacterCount.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app/task-beacon-app-cursor/task-beacon-app/src/components/form/BaseTaskForm.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app/task-beacon-app-cursor/task-beacon-app/src/components/form/DatePickerField.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app/task-beacon-app-cursor/task-beacon-app/src/components/form/EnhancedDatePicker.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app/task-beacon-app-cursor/task-beacon-app/src/components/form/EnhancedFormActions.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app/task-beacon-app-cursor/task-beacon-app/src/components/form/EnhancedPhotoUpload.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app/task-beacon-app-cursor/task-beacon-app/src/components/form/EnhancedUserSearch.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app/task-beacon-app-cursor/task-beacon-app/src/components/form/FloatingInput.tsx","messages":[{"ruleId":"unused-imports/no-unused-vars","severity":2,"message":"'placeholder' is defined but never used.","line":25,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":25,"endColumn":14}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { Input } from '@/components/ui/input';\nimport { useState, ReactNode } from 'react';\nimport { cn } from '@/lib/utils';\nimport { AnimatedCharacterCount } from './AnimatedCharacterCount';\n\ninterface FloatingInputProps {\n  id: string;\n  type?: string;\n  value: string;\n  onChange: (e: React.ChangeEvent<HTMLInputElement>) => void;\n  placeholder: string;\n  label: string;\n  icon?: ReactNode;\n  maxLength?: number;\n  required?: boolean;\n  autoFocus?: boolean;\n  className?: string;\n}\n\nexport function FloatingInput({\n  id,\n  type = 'text',\n  value,\n  onChange,\n  placeholder,\n  label,\n  icon,\n  maxLength,\n  required = false,\n  autoFocus = false,\n  className,\n}: FloatingInputProps) {\n  const [isFocused, setIsFocused] = useState(false);\n  const hasValue = value.length > 0;\n  const isFloating = isFocused || hasValue;\n  const showCounter = maxLength && (isFocused || hasValue);\n\n  return (\n    <div className={cn('group relative', className)}>\n      <div className=\"relative\">\n        {icon && (\n          <div\n            className={cn(\n              'absolute left-3 top-1/2 z-10 -translate-y-1/2 transform transition-all duration-300',\n              isFloating ? 'scale-95 text-primary' : 'text-muted-foreground'\n            )}\n          >\n            {icon}\n          </div>\n        )}\n\n        <Input\n          id={id}\n          type={type}\n          value={value}\n          onChange={onChange}\n          onFocus={() => setIsFocused(true)}\n          onBlur={() => setIsFocused(false)}\n          placeholder=\"\"\n          maxLength={maxLength}\n          required={required}\n          autoFocus={autoFocus}\n          className={cn(\n            'peer h-14 rounded-2xl border-border/40 bg-background/60 pb-2 pt-6 backdrop-blur-sm transition-all duration-300 hover:border-border/60 hover:bg-background/70 focus:border-primary/60 focus:bg-background/80 focus:shadow-lg focus:shadow-primary/10',\n            icon ? 'pl-11' : 'pl-4',\n            maxLength ? 'pr-16' : 'pr-4'\n          )}\n        />\n\n        <label\n          htmlFor={id}\n          className={cn(\n            'pointer-events-none absolute select-none font-medium transition-all duration-300',\n            icon ? 'left-11' : 'left-4',\n            isFloating\n              ? 'top-2 text-xs text-primary'\n              : 'top-1/2 -translate-y-1/2 text-sm text-muted-foreground'\n          )}\n        >\n          {label}\n        </label>\n\n        {/* Character counter inside input field */}\n        {showCounter && (\n          <div className=\"absolute right-3 top-1/2 z-10 -translate-y-1/2 transform\">\n            <AnimatedCharacterCount current={value.length} max={maxLength} />\n          </div>\n        )}\n      </div>\n\n      {/* Enhanced focus ring */}\n      <div\n        className={cn(\n          'pointer-events-none absolute inset-0 rounded-2xl transition-all duration-300',\n          isFocused &&\n            'ring-2 ring-primary/30 ring-offset-2 ring-offset-background'\n        )}\n      />\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app/task-beacon-app-cursor/task-beacon-app/src/components/form/FloatingTextarea.tsx","messages":[{"ruleId":"unused-imports/no-unused-vars","severity":2,"message":"'placeholder' is defined but never used.","line":19,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":19,"endColumn":14}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { Textarea } from '@/components/ui/textarea';\nimport { useState, useRef, useEffect, ReactNode } from 'react';\nimport { cn } from '@/lib/utils';\n\ninterface FloatingTextareaProps {\n  id: string;\n  value: string;\n  onChange: (e: React.ChangeEvent<HTMLTextAreaElement>) => void;\n  placeholder: string;\n  label: string;\n  icon?: ReactNode;\n  className?: string;\n}\n\nexport function FloatingTextarea({\n  id,\n  value,\n  onChange,\n  placeholder,\n  label,\n  icon,\n  className,\n}: FloatingTextareaProps) {\n  const [isFocused, setIsFocused] = useState(false);\n  const textareaRef = useRef<HTMLTextAreaElement>(null);\n  const hasValue = value.length > 0;\n  const isFloating = isFocused || hasValue;\n\n  // Auto-expand textarea with doubled minimum height\n  useEffect(() => {\n    if (textareaRef.current) {\n      textareaRef.current.style.height = 'auto';\n      textareaRef.current.style.height = `${Math.max(112, textareaRef.current.scrollHeight)}px`; // Doubled from 56 to 112\n    }\n  }, [value]);\n\n  return (\n    <div className={cn('group relative', className)}>\n      <div className=\"relative\">\n        {icon && (\n          <div\n            className={cn(\n              'absolute left-3 top-3 z-10 transition-all duration-300', // Changed from top-6 to top-3\n              isFloating ? 'scale-95 text-primary' : 'text-muted-foreground'\n            )}\n          >\n            {icon}\n          </div>\n        )}\n\n        <Textarea\n          ref={textareaRef}\n          id={id}\n          value={value}\n          onChange={onChange}\n          onFocus={() => setIsFocused(true)}\n          onBlur={() => setIsFocused(false)}\n          placeholder=\"\"\n          rows={1}\n          className={cn(\n            'peer min-h-28 resize-none overflow-hidden rounded-2xl border-border/40 bg-background/60 pb-2 pt-6 backdrop-blur-sm transition-all duration-300 hover:border-border/60 hover:bg-background/70 focus:border-primary/60 focus:bg-background/80 focus:shadow-lg focus:shadow-primary/10', // Changed min-h-14 to min-h-28 (doubled)\n            icon ? 'pl-11' : 'pl-4',\n            'pr-4'\n          )}\n        />\n\n        <label\n          htmlFor={id}\n          className={cn(\n            'pointer-events-none absolute select-none font-medium transition-all duration-300',\n            icon ? 'left-11' : 'left-4',\n            isFloating\n              ? 'top-2 text-xs text-primary' // Keeps the floated label at top-2\n              : 'top-3 text-sm text-muted-foreground' // Changed from top-6 to top-3 for better alignment\n          )}\n        >\n          {label}\n        </label>\n      </div>\n\n      {/* Elegant focus ring with animation */}\n      <div\n        className={cn(\n          'pointer-events-none absolute inset-0 rounded-2xl transition-all duration-300',\n          isFocused &&\n            'ring-2 ring-primary/30 ring-offset-2 ring-offset-background'\n        )}\n      />\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app/task-beacon-app-cursor/task-beacon-app/src/components/form/FormActions.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app/task-beacon-app-cursor/task-beacon-app/src/components/form/ParentTaskReference.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app/task-beacon-app-cursor/task-beacon-app/src/components/form/PhotoUploadField.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app/task-beacon-app-cursor/task-beacon-app/src/components/form/ProgressiveFieldContainer.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app/task-beacon-app-cursor/task-beacon-app/src/components/form/QuickActionBar.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app/task-beacon-app-cursor/task-beacon-app/src/components/form/ReferenceCard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app/task-beacon-app-cursor/task-beacon-app/src/components/form/UrlField.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app/task-beacon-app-cursor/task-beacon-app/src/components/form/UrlInputModal.tsx","messages":[{"ruleId":"unused-imports/no-unused-vars","severity":2,"message":"'handleCancel' is assigned a value but never used.","line":53,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":53,"endColumn":21}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useState } from 'react';\nimport { Link } from 'lucide-react';\nimport {\n  Dialog,\n  DialogContent,\n  DialogHeader,\n  DialogTitle,\n} from '@/components/ui/dialog';\nimport { FloatingInput } from '@/components/form/FloatingInput';\nimport { Button } from '@/components/ui/button';\nimport { cn } from '@/lib/utils';\n\ninterface UrlInputModalProps {\n  isOpen: boolean;\n  onClose: () => void;\n  value: string;\n  onChange: (value: string) => void;\n}\n\nexport function UrlInputModal({\n  isOpen,\n  onClose,\n  value,\n  onChange,\n}: UrlInputModalProps) {\n  const [tempValue, setTempValue] = useState(value);\n  const [error, setError] = useState<string | null>(null);\n\n  const validateUrl = (url: string): boolean => {\n    // Simple URL validation regex\n    const urlPattern = /^(https?:\\/\\/)?([\\w-]+(\\.[\\w-]+)+)(\\/[\\w-./?%&=]*)?$/i;\n    return urlPattern.test(url);\n  };\n\n  const handleSave = () => {\n    if (!tempValue) {\n      // Allow empty URL (optional field)\n      onChange(tempValue);\n      onClose();\n      return;\n    }\n\n    if (!validateUrl(tempValue)) {\n      setError('Please enter a valid URL (e.g., https://example.com)');\n      return;\n    }\n\n    setError(null);\n    onChange(tempValue);\n    onClose();\n  };\n\n  const handleCancel = () => {\n    setTempValue(value);\n    setError(null);\n    onClose();\n  };\n\n  return (\n    <Dialog open={isOpen} onOpenChange={onClose}>\n      <DialogContent className=\"sm:max-w-md\">\n        <DialogHeader>\n          <DialogTitle className=\"flex items-center gap-2\">\n            <Link className=\"h-5 w-5\" />\n            Add Reference URL\n          </DialogTitle>\n        </DialogHeader>\n\n        <div className=\"space-y-4\">\n          <div>\n            <FloatingInput\n              id=\"url-input\"\n              type=\"text\"\n              value={tempValue}\n              onChange={(e) => {\n                setTempValue(e.target.value);\n                setError(null); // Clear error on input change\n              }}\n              placeholder=\"https://example.com\"\n              label=\"URL\"\n              icon={<Link className=\"h-4 w-4\" />}\n              autoFocus\n            />\n            {error && (\n              <p\n                className={cn(\n                  'mt-1 text-sm text-destructive',\n                  'animate-in fade-in-0'\n                )}\n              >\n                {error}\n              </p>\n            )}\n          </div>\n\n          <div className=\"flex justify-end\">\n            <Button onClick={handleSave}>Save URL</Button>\n          </div>\n        </div>\n      </DialogContent>\n    </Dialog>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app/task-beacon-app-cursor/task-beacon-app/src/components/form/UserSearchField.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app/task-beacon-app-cursor/task-beacon-app/src/components/form/UserSearchModal.tsx","messages":[{"ruleId":"unused-imports/no-unused-vars","severity":2,"message":"'setTempValue' is assigned a value but never used.","line":24,"column":21,"nodeType":null,"messageId":"unusedVar","endLine":24,"endColumn":33}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useState } from 'react';\nimport {\n  Dialog,\n  DialogContent,\n  DialogHeader,\n  DialogTitle,\n} from '@/components/ui/dialog';\nimport { EnhancedUserSearch } from '@/components/form/EnhancedUserSearch';\nimport { VisuallyHidden } from '@radix-ui/react-visually-hidden';\n\ninterface UserSearchModalProps {\n  isOpen: boolean;\n  onClose: () => void;\n  value: string;\n  onChange: (value: string) => void;\n}\n\nexport function UserSearchModal({\n  isOpen,\n  onClose,\n  value,\n  onChange,\n}: UserSearchModalProps) {\n  const [tempValue, setTempValue] = useState(value);\n\n  const handleUserSelect = (selectedValue: string) => {\n    onChange(selectedValue);\n    onClose();\n  };\n\n  return (\n    <Dialog open={isOpen} onOpenChange={onClose}>\n      <DialogContent className=\"pb-8 sm:max-w-md\">\n        <DialogHeader>\n          <VisuallyHidden asChild>\n            <DialogTitle>Assign Task</DialogTitle>\n          </VisuallyHidden>\n        </DialogHeader>\n\n        <div className=\"space-y-4 pb-4\">\n          <EnhancedUserSearch value={tempValue} onChange={handleUserSelect} />\n        </div>\n      </DialogContent>\n    </Dialog>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app/task-beacon-app-cursor/task-beacon-app/src/components/form/form-utils.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app/task-beacon-app-cursor/task-beacon-app/src/components/form/hooks/useFormState.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app/task-beacon-app-cursor/task-beacon-app/src/components/form/hooks/usePhotoUpload.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app/task-beacon-app-cursor/task-beacon-app/src/components/form/useFormSubmission.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app/task-beacon-app-cursor/task-beacon-app/src/components/form/useFormWithValidation.ts","messages":[{"ruleId":null,"message":"Unused eslint-disable directive (no problems were reported from 'no-console').","line":29,"column":5,"severity":1,"nodeType":null,"fix":{"range":[761,799],"text":" "}}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"import { useFormWithZod } from './useFormWithZod';\nimport { useFormSubmission } from './useFormSubmission';\nimport { z } from 'zod';\n\ninterface UseFormWithValidationOptions<T> {\n  schema: z.ZodSchema<T>;\n  defaultValues: T;\n  onSubmit: (data: T) => Promise<void>;\n  successMessage?: string;\n}\n\n/**\n * @deprecated Use useFormWithZod and useFormSubmission instead.\n */\nexport function useFormWithValidation<T>({\n  schema,\n  defaultValues,\n  onSubmit,\n  successMessage = 'Success',\n}: UseFormWithValidationOptions<T>) {\n  const form = useFormWithZod({ schema, defaultValues });\n  const { handleSubmit, formError, formSuccess } = useFormSubmission({\n    onSubmit,\n    successMessage,\n    reset: form.reset,\n  });\n\n  if (process.env.NODE_ENV !== 'production') {\n    // eslint-disable-next-line no-console\n    console.warn('useFormWithValidation is deprecated. Use useFormWithZod and useFormSubmission instead.');\n  }\n\n  return {\n    ...form,\n    onSubmit: handleSubmit,\n    isSubmitting: form.formState.isSubmitting,\n    formError,\n    formSuccess,\n  };\n}\n\nexport { useFormWithZod };\nexport { useFormSubmission };\n","usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app/task-beacon-app-cursor/task-beacon-app/src/components/form/useFormWithZod.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":13,"column":37,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":13,"endColumn":40,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[392,395],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[392,395],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useForm } from 'react-hook-form';\nimport { zodResolver } from '@hookform/resolvers/zod';\nimport { z } from 'zod';\n\ninterface UseFormWithZodOptions<T> {\n  schema: z.ZodSchema<T>;\n  defaultValues: T;\n}\n\nexport function useFormWithZod<T>({ schema, defaultValues }: UseFormWithZodOptions<T>) {\n  return useForm<T>({\n    resolver: zodResolver(schema),\n    defaultValues: defaultValues as any,\n  });\n} ","usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app/task-beacon-app-cursor/task-beacon-app/src/components/timer/TimerDisplay.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app/task-beacon-app-cursor/task-beacon-app/src/components/timer/TimerRing.tsx","messages":[{"ruleId":"unused-imports/no-unused-imports","severity":2,"message":"'getTimerColor' is defined but never used.","line":4,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":4,"endColumn":23,"fix":{"range":[136,205],"text":"\n"}}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":1,"fixableWarningCount":0,"source":"import { memo, useMemo } from 'react';\nimport { animated, SpringValue } from '@react-spring/web';\nimport { TaskStatus } from '@/types';\nimport { getTimerColor } from '@/features/tasks/utils/taskUiUtils';\n\n/**\n * TimerRing Component\n *\n * Renders the circular progress indicator for the countdown timer with the appropriate\n * styling based on task status. Uses SVG with gradients and filters for visual effects.\n *\n * @param size - The diameter of the timer ring in pixels\n * @param radius - The radius of the timer ring in pixels\n * @param circumference - The circumference of the timer ring\n * @param strokeDashoffset - The animated stroke dash offset value\n * @param status - The current status of the task\n */\ninterface TimerRingProps {\n  size: number;\n  radius: number;\n  circumference: number;\n  strokeDashoffset: SpringValue<number> | number;\n  status: TaskStatus;\n}\n\n// Define gradients once outside the component to avoid recreating them on each render\n// This is moved to a separate component and memoized to prevent re-renders\nconst GradientDefs = memo(() => (\n  <defs>\n    <linearGradient id=\"gradientPending\" x1=\"0%\" y1=\"0%\" x2=\"100%\" y2=\"100%\">\n      <stop offset=\"0%\" stopColor=\"#FFDD24\" />\n      <stop offset=\"100%\" stopColor=\"#FFE082\" />\n    </linearGradient>\n    <linearGradient id=\"gradientOverdue\" x1=\"0%\" y1=\"0%\" x2=\"100%\" y2=\"100%\">\n      <stop offset=\"0%\" stopColor=\"#DA3E52\" />\n      <stop offset=\"100%\" stopColor=\"#E57373\" />\n    </linearGradient>\n    <linearGradient id=\"gradientComplete\" x1=\"0%\" y1=\"0%\" x2=\"100%\" y2=\"100%\">\n      <stop offset=\"0%\" stopColor=\"#10B981\" />\n      <stop offset=\"100%\" stopColor=\"#34D399\" />\n    </linearGradient>\n\n    {/* Add filters for glow effects */}\n    <filter id=\"glowOverdue\" x=\"-20%\" y=\"-20%\" width=\"140%\" height=\"140%\">\n      <feGaussianBlur stdDeviation=\"2\" result=\"blur\" />\n      <feComposite in=\"SourceGraphic\" in2=\"blur\" operator=\"over\" />\n    </filter>\n\n    <filter id=\"glowPending\" x=\"-20%\" y=\"-20%\" width=\"140%\" height=\"140%\">\n      <feGaussianBlur stdDeviation=\"1\" result=\"blur\" />\n      <feComposite in=\"SourceGraphic\" in2=\"blur\" operator=\"over\" />\n    </filter>\n\n    <filter id=\"glowComplete\" x=\"-20%\" y=\"-20%\" width=\"140%\" height=\"140%\">\n      <feGaussianBlur stdDeviation=\"1.5\" result=\"blur\" />\n      <feComposite in=\"SourceGraphic\" in2=\"blur\" operator=\"over\" />\n    </filter>\n  </defs>\n));\n\nGradientDefs.displayName = 'GradientDefs';\n\nconst TimerRing = ({\n  size,\n  radius,\n  circumference,\n  strokeDashoffset,\n  status,\n}: TimerRingProps) => {\n  // Memoize derived values that don't need to be recalculated on every render\n  const staticProps = useMemo(() => {\n    const gradientId =\n      status === 'pending'\n        ? 'url(#gradientPending)'\n        : status === 'overdue'\n          ? 'url(#gradientOverdue)'\n          : 'url(#gradientComplete)';\n\n    const filterId =\n      status === 'overdue'\n        ? 'url(#glowOverdue)'\n        : status === 'complete'\n          ? 'url(#glowComplete)'\n          : 'url(#glowPending)';\n\n    const strokeWidth = status === 'overdue' ? '5px' : '4px';\n\n    return { gradientId, filterId, strokeWidth };\n  }, [status]);\n\n  return (\n    <svg\n      width={size}\n      height={size}\n      viewBox={`0 0 ${size} ${size}`}\n      style={{\n        overflow: 'visible',\n      }}\n      className=\"timer-ring\"\n      aria-hidden=\"true\" // Mark as decorative for accessibility\n    >\n      <GradientDefs />\n\n      {/* Background circle */}\n      <circle\n        cx={size / 2}\n        cy={size / 2}\n        r={radius}\n        fill=\"none\"\n        strokeWidth=\"2.5\"\n        stroke=\"#F9FAFB\"\n        style={{ strokeWidth: '2.5px' }}\n      />\n\n      {/* Animated foreground circle */}\n      <animated.circle\n        cx={size / 2}\n        cy={size / 2}\n        r={radius}\n        fill=\"none\"\n        stroke={staticProps.gradientId}\n        strokeDasharray={circumference}\n        strokeDashoffset={strokeDashoffset}\n        transform={`rotate(-90, ${size / 2}, ${size / 2})`}\n        strokeLinecap=\"round\"\n        className=\"timer-progress\"\n        style={{\n          filter: staticProps.filterId,\n          strokeWidth: staticProps.strokeWidth,\n        }}\n      />\n    </svg>\n  );\n};\n\n// Use React.memo with a custom equality function to prevent unnecessary re-renders\nexport default memo(TimerRing, (prevProps, nextProps) => {\n  return (\n    prevProps.size === nextProps.size &&\n    prevProps.radius === nextProps.radius &&\n    prevProps.circumference === nextProps.circumference &&\n    prevProps.status === nextProps.status &&\n    // For the strokeDashoffset, we need special handling since it might be a SpringValue\n    (prevProps.strokeDashoffset === nextProps.strokeDashoffset ||\n      (typeof prevProps.strokeDashoffset === 'number' &&\n        typeof nextProps.strokeDashoffset === 'number' &&\n        prevProps.strokeDashoffset === nextProps.strokeDashoffset))\n  );\n});\n","usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app/task-beacon-app-cursor/task-beacon-app/src/components/timer/__tests__/TimerRing.test.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app/task-beacon-app-cursor/task-beacon-app/src/components/ui/__tests__/SimpleNavbar.test.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app/task-beacon-app-cursor/task-beacon-app/src/components/ui/accordion.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app/task-beacon-app-cursor/task-beacon-app/src/components/ui/alert-dialog.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app/task-beacon-app-cursor/task-beacon-app/src/components/ui/alert.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app/task-beacon-app-cursor/task-beacon-app/src/components/ui/aspect-ratio.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app/task-beacon-app-cursor/task-beacon-app/src/components/ui/avatar.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app/task-beacon-app-cursor/task-beacon-app/src/components/ui/badge.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app/task-beacon-app-cursor/task-beacon-app/src/components/ui/breadcrumb.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app/task-beacon-app-cursor/task-beacon-app/src/components/ui/button.tsx","messages":[{"ruleId":"react-refresh/only-export-components","severity":1,"message":"Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.","line":32,"column":18,"nodeType":"Identifier","messageId":"namedExport","endLine":32,"endColumn":32}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import * as React from 'react';\nimport { Slot } from '@radix-ui/react-slot';\nimport { type VariantProps } from 'class-variance-authority';\n\nimport { cn } from '@/lib/utils';\nimport { buttonVariants } from '@/lib/button-variants';\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean;\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : 'button';\n\n    return (\n      <Comp\n        className={cn(\n          buttonVariants({ variant, size, className }),\n          'shadow-sm transition-all hover:shadow-md'\n        )}\n        ref={ref}\n        {...props}\n      />\n    );\n  }\n);\nButton.displayName = 'Button';\n\nexport { Button, buttonVariants };\n","usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app/task-beacon-app-cursor/task-beacon-app/src/components/ui/calendar.tsx","messages":[{"ruleId":"unused-imports/no-unused-vars","severity":2,"message":"'_props' is defined but never used.","line":56,"column":27,"nodeType":null,"messageId":"unusedVar","endLine":56,"endColumn":33},{"ruleId":"unused-imports/no-unused-vars","severity":2,"message":"'_props' is defined but never used.","line":57,"column":28,"nodeType":null,"messageId":"unusedVar","endLine":57,"endColumn":34}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import * as React from 'react';\nimport { ChevronLeft, ChevronRight } from 'lucide-react';\nimport { DayPicker } from 'react-day-picker';\n\nimport { cn } from '@/lib/utils';\nimport { buttonVariants } from '@/lib/button-variants';\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>;\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <div style={{ backgroundColor: '#1a1a1a', color: '#ffffff' }}>\n      <DayPicker\n        showOutsideDays={showOutsideDays}\n        className={cn('p-3', className)}\n        classNames={{\n          months:\n            'flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0',\n          month: 'space-y-4',\n          caption: 'flex justify-center pt-1 relative items-center',\n          caption_label: 'text-sm font-medium',\n          nav: 'space-x-1 flex items-center',\n          nav_button: cn(\n            buttonVariants({ variant: 'outline' }),\n            'h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100'\n          ),\n          nav_button_previous: 'absolute left-1',\n          nav_button_next: 'absolute right-1',\n          table: 'w-full border-collapse space-y-1',\n          head_row: 'flex',\n          head_cell: 'rounded-md w-9 font-normal text-[0.8rem]',\n          row: 'flex w-full mt-2',\n          cell: 'h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20',\n          day: cn(\n            buttonVariants({ variant: 'ghost' }),\n            'h-9 w-9 p-0 font-normal aria-selected:opacity-100'\n          ),\n          day_range_end: 'day-range-end',\n          day_selected:\n            'hover:text-primary-foreground focus:text-primary-foreground',\n          day_today: 'text-accent-foreground',\n          day_outside:\n            'day-outside opacity-50 aria-selected:bg-accent/50 aria-selected:opacity-30',\n          day_disabled: 'opacity-50',\n          day_range_middle:\n            'aria-selected:bg-accent aria-selected:text-accent-foreground',\n          day_hidden: 'invisible',\n          ...classNames,\n        }}\n        components={{\n          IconLeft: ({ ..._props }) => <ChevronLeft className=\"h-4 w-4\" />,\n          IconRight: ({ ..._props }) => <ChevronRight className=\"h-4 w-4\" />,\n        }}\n        style={{\n          backgroundColor: '#1a1a1a',\n          color: '#ffffff',\n        }}\n        {...props}\n      />\n    </div>\n  );\n}\nCalendar.displayName = 'Calendar';\n\nexport { Calendar };\n","usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app/task-beacon-app-cursor/task-beacon-app/src/components/ui/card.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app/task-beacon-app-cursor/task-beacon-app/src/components/ui/carousel.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app/task-beacon-app-cursor/task-beacon-app/src/components/ui/chart.tsx","messages":[{"ruleId":"unused-imports/no-unused-vars","severity":2,"message":"'_' is defined but never used.","line":70,"column":7,"nodeType":null,"messageId":"unusedVar","endLine":70,"endColumn":8}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import * as React from 'react';\nimport * as RechartsPrimitive from 'recharts';\n\nimport { cn } from '@/lib/utils';\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: '', dark: '.dark' } as const;\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode;\n    icon?: React.ComponentType;\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  );\n};\n\ntype ChartContextProps = {\n  config: ChartConfig;\n};\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null);\n\nfunction useChart() {\n  const context = React.useContext(ChartContext);\n\n  if (!context) {\n    throw new Error('useChart must be used within a <ChartContainer />');\n  }\n\n  return context;\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<'div'> & {\n    config: ChartConfig;\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >['children'];\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId();\n  const chartId = `chart-${id || uniqueId.replace(/:/g, '')}`;\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  );\n});\nChartContainer.displayName = 'Chart';\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([_, config]) => config.theme || config.color\n  );\n\n  if (!colorConfig.length) {\n    return null;\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color;\n    return color ? `  --color-${key}: ${color};` : null;\n  })\n  .join('\\n')}\n}\n`\n          )\n          .join('\\n'),\n      }}\n    />\n  );\n};\n\nconst ChartTooltip = RechartsPrimitive.Tooltip;\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<'div'> & {\n      hideLabel?: boolean;\n      hideIndicator?: boolean;\n      indicator?: 'line' | 'dot' | 'dashed';\n      nameKey?: string;\n      labelKey?: string;\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = 'dot',\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart();\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null;\n      }\n\n      const [item] = payload;\n      const key = `${labelKey || item.dataKey || item.name || 'value'}`;\n      const itemConfig = getPayloadConfigFromPayload(config, item, key);\n      const value =\n        !labelKey && typeof label === 'string'\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label;\n\n      if (labelFormatter) {\n        return (\n          <div className={cn('font-medium', labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        );\n      }\n\n      if (!value) {\n        return null;\n      }\n\n      return <div className={cn('font-medium', labelClassName)}>{value}</div>;\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ]);\n\n    if (!active || !payload?.length) {\n      return null;\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== 'dot';\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          'grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl',\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || 'value'}`;\n            const itemConfig = getPayloadConfigFromPayload(config, item, key);\n            const indicatorColor = color || item.payload.fill || item.color;\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  'flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground',\n                  indicator === 'dot' && 'items-center'\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            'shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]',\n                            {\n                              'h-2.5 w-2.5': indicator === 'dot',\n                              'w-1': indicator === 'line',\n                              'w-0 border-[1.5px] border-dashed bg-transparent':\n                                indicator === 'dashed',\n                              'my-0.5': nestLabel && indicator === 'dashed',\n                            }\n                          )}\n                          style={\n                            {\n                              '--color-bg': indicatorColor,\n                              '--color-border': indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        'flex flex-1 justify-between leading-none',\n                        nestLabel ? 'items-end' : 'items-center'\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            );\n          })}\n        </div>\n      </div>\n    );\n  }\n);\nChartTooltipContent.displayName = 'ChartTooltip';\n\nconst ChartLegend = RechartsPrimitive.Legend;\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<'div'> &\n    Pick<RechartsPrimitive.LegendProps, 'payload' | 'verticalAlign'> & {\n      hideIcon?: boolean;\n      nameKey?: string;\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = 'bottom', nameKey },\n    ref\n  ) => {\n    const { config } = useChart();\n\n    if (!payload?.length) {\n      return null;\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          'flex items-center justify-center gap-4',\n          verticalAlign === 'top' ? 'pb-3' : 'pt-3',\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || 'value'}`;\n          const itemConfig = getPayloadConfigFromPayload(config, item, key);\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                'flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground'\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          );\n        })}\n      </div>\n    );\n  }\n);\nChartLegendContent.displayName = 'ChartLegend';\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== 'object' || payload === null) {\n    return undefined;\n  }\n\n  const payloadPayload =\n    'payload' in payload &&\n    typeof payload.payload === 'object' &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined;\n\n  let configLabelKey: string = key;\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === 'string'\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string;\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === 'string'\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string;\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config];\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n};\n","usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app/task-beacon-app-cursor/task-beacon-app/src/components/ui/checkbox.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app/task-beacon-app-cursor/task-beacon-app/src/components/ui/collapsible.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app/task-beacon-app-cursor/task-beacon-app/src/components/ui/command.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app/task-beacon-app-cursor/task-beacon-app/src/components/ui/context-menu.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app/task-beacon-app-cursor/task-beacon-app/src/components/ui/dialog.tsx","messages":[{"ruleId":"unused-imports/no-unused-vars","severity":2,"message":"'ref' is defined but never used.","line":37,"column":39,"nodeType":null,"messageId":"unusedVar","endLine":37,"endColumn":42}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import * as React from 'react';\nimport * as DialogPrimitive from '@radix-ui/react-dialog';\nimport { X } from 'lucide-react';\nimport { useMobileViewport } from '@/hooks/useMobileViewport';\n\nimport { cn } from '@/lib/utils';\n\nconst Dialog = DialogPrimitive.Root;\n\nconst DialogTrigger = DialogPrimitive.Trigger;\n\nconst DialogPortal = DialogPrimitive.Portal;\n\nconst DialogClose = DialogPrimitive.Close;\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      'fixed inset-0 z-50 backdrop-blur-sm data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0',\n      className\n    )}\n    style={{\n      backgroundColor: 'rgba(0, 0, 0, 0.8)',\n    }}\n    {...props}\n  />\n));\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName;\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => {\n  const { keyboardVisible, availableHeight } = useMobileViewport();\n  const modalRef = React.useRef<HTMLDivElement>(null);\n  const [modalHeight, setModalHeight] = React.useState<number>(0);\n  const [isStandalone, setIsStandalone] = React.useState<boolean>(false);\n  const [safeAreaTop, setSafeAreaTop] = React.useState<number>(0);\n\n  // Detect PWA standalone mode and safe area inset top\n  React.useEffect(() => {\n    const standalone =\n      'standalone' in window.navigator ? window.navigator.standalone : false;\n    setIsStandalone(!!standalone);\n\n    const sat =\n      parseInt(\n        getComputedStyle(document.documentElement).getPropertyValue('--sat')\n      ) || 0;\n    setSafeAreaTop(sat);\n  }, []);\n\n  // Update modal height when content changes\n  React.useEffect(() => {\n    if (modalRef.current) {\n      const height = modalRef.current.offsetHeight;\n      setModalHeight(height);\n    }\n  }, [children]);\n\n  const getModalPosition = React.useCallback(() => {\n    if (!keyboardVisible) {\n      return {\n        top: '50%',\n        transform: 'translate(-50%, -50%)',\n        maxHeight: '90vh',\n      };\n    }\n\n    // When keyboard is visible, position the top of the modal\n    const modalMaxHeight = Math.min(availableHeight * 0.7, 400);\n    let topPosition = availableHeight * (isStandalone ? 0.55 : 0.61); // 55% in PWA mode, 61% in Safari\n\n    // Adjust for PWA standalone mode (account for safe area inset top)\n    if (isStandalone) {\n      topPosition += safeAreaTop; // Add safe area inset top to position below the status bar\n    }\n\n    return {\n      top: `${Math.max(40, topPosition)}px`,\n      transform: 'translateX(-50%)',\n      maxHeight: `${modalMaxHeight}px`,\n    };\n  }, [keyboardVisible, availableHeight, isStandalone, safeAreaTop]);\n\n  const modalStyle = getModalPosition();\n\n  // Ensure position updates on every render when keyboard is visible\n  React.useEffect(() => {\n    const updatePosition = () => {\n      if (keyboardVisible && modalRef.current) {\n        const updatedStyle = getModalPosition();\n        modalRef.current.style.top = updatedStyle.top;\n        modalRef.current.style.transform = updatedStyle.transform;\n        modalRef.current.style.maxHeight = updatedStyle.maxHeight;\n      }\n    };\n\n    updatePosition(); // Initial update\n\n    // Add a small delay to ensure DOM is fully rendered\n    const timer = setTimeout(updatePosition, 100);\n\n    // Update on window resize (e.g., keyboard show/hide)\n    window.addEventListener('resize', updatePosition);\n    if (window.visualViewport) {\n      window.visualViewport.addEventListener('resize', updatePosition);\n    }\n\n    return () => {\n      clearTimeout(timer);\n      window.removeEventListener('resize', updatePosition);\n      if (window.visualViewport) {\n        window.visualViewport.removeEventListener('resize', updatePosition);\n      }\n    };\n  }, [\n    keyboardVisible,\n    availableHeight,\n    modalHeight,\n    getModalPosition,\n    isStandalone,\n    safeAreaTop,\n  ]);\n\n  return (\n    <DialogPortal>\n      <DialogOverlay />\n      <DialogPrimitive.Content\n        ref={modalRef}\n        className={cn(\n          'fixed left-[50%] z-50 grid w-full max-w-lg gap-4 overflow-y-auto border p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=open]:slide-in-from-left-1/2 sm:rounded-xl',\n          keyboardVisible &&\n            'data-[state=closed]:slide-out-to-top-[40px] data-[state=open]:slide-in-from-top-[40px]',\n          !keyboardVisible &&\n            'data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-top-[48%]',\n          className\n        )}\n        style={{\n          backgroundColor: '#1a1a1a',\n          color: '#ffffff',\n          borderColor: '#404040',\n          ...modalStyle,\n        }}\n        {...props}\n      >\n        {children}\n        <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-full opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n          <X className=\"h-4 w-4\" style={{ color: '#ffffff' }} />\n          <span className=\"sr-only\">Close</span>\n        </DialogPrimitive.Close>\n      </DialogPrimitive.Content>\n    </DialogPortal>\n  );\n});\nDialogContent.displayName = DialogPrimitive.Content.displayName;\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      'flex flex-col space-y-1.5 text-center sm:text-left',\n      className\n    )}\n    {...props}\n  />\n);\nDialogHeader.displayName = 'DialogHeader';\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      'flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2',\n      className\n    )}\n    {...props}\n  />\n);\nDialogFooter.displayName = 'DialogFooter';\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      'text-lg font-semibold leading-none tracking-tight',\n      className\n    )}\n    style={{ color: '#ffffff' }}\n    {...props}\n  />\n));\nDialogTitle.displayName = DialogPrimitive.Title.displayName;\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn('text-sm', className)}\n    style={{ color: '#a3a3a3' }}\n    {...props}\n  />\n));\nDialogDescription.displayName = DialogPrimitive.Description.displayName;\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n};\n","usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app/task-beacon-app-cursor/task-beacon-app/src/components/ui/drawer.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app/task-beacon-app-cursor/task-beacon-app/src/components/ui/dropdown-menu.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app/task-beacon-app-cursor/task-beacon-app/src/components/ui/form.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app/task-beacon-app-cursor/task-beacon-app/src/components/ui/hover-card.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app/task-beacon-app-cursor/task-beacon-app/src/components/ui/input-otp.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app/task-beacon-app-cursor/task-beacon-app/src/components/ui/input.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app/task-beacon-app-cursor/task-beacon-app/src/components/ui/label.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app/task-beacon-app-cursor/task-beacon-app/src/components/ui/layout/LoadingSpinner.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app/task-beacon-app-cursor/task-beacon-app/src/components/ui/layout/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app/task-beacon-app-cursor/task-beacon-app/src/components/ui/menubar.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app/task-beacon-app-cursor/task-beacon-app/src/components/ui/navigation-menu.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app/task-beacon-app-cursor/task-beacon-app/src/components/ui/pagination.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app/task-beacon-app-cursor/task-beacon-app/src/components/ui/popover.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app/task-beacon-app-cursor/task-beacon-app/src/components/ui/progress.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app/task-beacon-app-cursor/task-beacon-app/src/components/ui/radio-group.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app/task-beacon-app-cursor/task-beacon-app/src/components/ui/resizable.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app/task-beacon-app-cursor/task-beacon-app/src/components/ui/scroll-area.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app/task-beacon-app-cursor/task-beacon-app/src/components/ui/select.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app/task-beacon-app-cursor/task-beacon-app/src/components/ui/separator.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app/task-beacon-app-cursor/task-beacon-app/src/components/ui/sheet.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app/task-beacon-app-cursor/task-beacon-app/src/components/ui/sidebar.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app/task-beacon-app-cursor/task-beacon-app/src/components/ui/simple-navbar.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'updateActiveButtonBounds'. Either include it or remove the dependency array.","line":91,"column":6,"nodeType":"ArrayExpression","endLine":91,"endColumn":41,"suggestions":[{"desc":"Update the dependencies array to be: [activeItem, items, computedColors, updateActiveButtonBounds]","fix":{"range":[2262,2297],"text":"[activeItem, items, computedColors, updateActiveButtonBounds]"}}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'updateActiveButtonBounds'. Either include it or remove the dependency array.","line":101,"column":6,"nodeType":"ArrayExpression","endLine":101,"endColumn":18,"suggestions":[{"desc":"Update the dependencies array to be: [activeItem, updateActiveButtonBounds]","fix":{"range":[2549,2561],"text":"[activeItem, updateActiveButtonBounds]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useRef, useEffect, useState } from 'react';\nimport { useSpring, animated } from '@react-spring/web';\nimport { LucideIcon } from 'lucide-react';\nimport { cn } from '@/lib/utils';\nimport {\n  computeNavbarColors,\n  setupThemeObserver,\n} from '@/lib/utils/navbarColors';\nimport {\n  calculateActiveButtonBounds,\n  setButtonRef,\n} from '@/lib/utils/navbarGeometry';\n\ninterface NavItem {\n  name: string;\n  value: string;\n  icon: LucideIcon;\n}\n\ninterface SimpleNavbarProps {\n  items: NavItem[];\n  activeItem: string;\n  onItemChange: (value: string) => void;\n  className?: string;\n}\n\nexport function SimpleNavbar({\n  items,\n  activeItem,\n  onItemChange,\n  className,\n}: SimpleNavbarProps) {\n  const containerRef = useRef<HTMLDivElement>(null);\n  const buttonRefs = useRef<(HTMLButtonElement | null)[]>([]);\n  const [activeButtonBounds, setActiveButtonBounds] = useState({\n    x: 0,\n    width: 0,\n  });\n  const [isInitialized, setIsInitialized] = useState(false);\n  const [computedColors, setComputedColors] = useState(() =>\n    computeNavbarColors()\n  );\n\n  // Get computed CSS variable values and detect theme\n  useEffect(() => {\n    const updateColors = () => {\n      setComputedColors(computeNavbarColors());\n    };\n\n    // Get colors on mount and when theme changes\n    updateColors();\n\n    // Listen for theme changes\n    const cleanup = setupThemeObserver(updateColors);\n\n    return cleanup;\n  }, []);\n\n  // Calculate active button position with proper timing\n  const updateActiveButtonBounds = () => {\n    const activeIndex = items.findIndex((item) => item.value === activeItem);\n    const container = containerRef.current;\n\n    if (activeIndex >= 0 && container) {\n      const containerPadding = 8;\n      const newBounds = calculateActiveButtonBounds(\n        activeIndex,\n        buttonRefs.current,\n        container,\n        containerPadding\n      );\n\n      setActiveButtonBounds(newBounds);\n\n      if (!isInitialized) {\n        setIsInitialized(true);\n      }\n    }\n  };\n\n  // Initialize and update on changes\n  useEffect(() => {\n    // Use requestAnimationFrame to ensure DOM is ready\n    const frame = requestAnimationFrame(() => {\n      updateActiveButtonBounds();\n    });\n\n    return () => {\n      cancelAnimationFrame(frame);\n    };\n  }, [activeItem, items, computedColors]);\n\n  // Handle window resize\n  useEffect(() => {\n    const handleResize = () => {\n      updateActiveButtonBounds();\n    };\n\n    window.addEventListener('resize', handleResize);\n    return () => window.removeEventListener('resize', handleResize);\n  }, [activeItem]);\n\n  // Spring animation for active indicator line\n  const indicatorLineSpring = useSpring({\n    transform: `translateX(${activeButtonBounds.x}px)`,\n    width: 40,\n    opacity: isInitialized ? 1 : 0,\n    config: {\n      tension: 300,\n      friction: 30,\n    },\n  });\n\n  // Spring animation for button background\n  const buttonBackgroundSpring = useSpring({\n    transform: `translateX(${activeButtonBounds.x}px)`,\n    width: activeButtonBounds.width,\n    opacity: isInitialized ? 1 : 0,\n    config: {\n      tension: 300,\n      friction: 30,\n    },\n  });\n\n  // Spring animation for glow effect\n  const glowSpring = useSpring({\n    transform: `translateX(${activeButtonBounds.x - 8}px)`,\n    width: activeButtonBounds.width + 16,\n    opacity: isInitialized ? 1 : 0,\n    config: {\n      tension: 250,\n      friction: 35,\n    },\n  });\n\n  return (\n    <div className={cn('flex w-full justify-center', className)}>\n      <div\n        ref={containerRef}\n        className=\"relative flex items-center gap-1 rounded-full border border-gray-300 bg-gray-50/80 p-2 shadow-lg backdrop-blur-md dark:border-gray-600 dark:bg-gray-900/90\"\n      >\n        {/* Active indicator line above button */}\n        <animated.div\n          style={{\n            position: 'absolute',\n            top: '-4px',\n            left: '12px',\n            height: '4px',\n            borderRadius: '9999px',\n            zIndex: 20,\n            filter: 'blur(1px)',\n            backgroundColor: computedColors.indicatorColor,\n            boxShadow: computedColors.isDarkMode\n              ? '0 0 8px rgba(255, 255, 255, 0.4)'\n              : `0 0 8px ${computedColors.primaryGlow}`,\n            ...indicatorLineSpring,\n          }}\n        />\n\n        {/* Button background highlight */}\n        <animated.div\n          style={{\n            position: 'absolute',\n            left: '8px',\n            height: '38px',\n            borderRadius: '9999px',\n            zIndex: 5,\n            backgroundColor: computedColors.highlightColor,\n            boxShadow: '0 2px 8px rgba(0, 0, 0, 0.1)',\n            ...buttonBackgroundSpring,\n          }}\n        />\n\n        {/* Ambient glow effect */}\n        <animated.div\n          style={{\n            position: 'absolute',\n            top: '0px',\n            left: '0px',\n            height: '48px',\n            borderRadius: '9999px',\n            zIndex: 0,\n            backgroundColor: computedColors.primaryVeryLight,\n            filter: 'blur(12px)',\n            boxShadow: `0 0 20px ${computedColors.primaryGlow}`,\n            ...glowSpring,\n          }}\n        />\n\n        {items.map((item, index) => {\n          const Icon = item.icon;\n          const isActive = activeItem === item.value;\n\n          return (\n            <button\n              key={item.value}\n              ref={(el) => setButtonRef(buttonRefs, index, el)}\n              onClick={() => onItemChange(item.value)}\n              className={cn(\n                'relative z-10 min-w-[48px] cursor-pointer rounded-full border-none bg-transparent px-4 py-2 text-sm font-medium transition-all duration-200',\n                isActive\n                  ? 'text-white dark:text-white'\n                  : 'text-gray-600 hover:text-gray-900 dark:text-gray-400 dark:hover:text-gray-200'\n              )}\n            >\n              <span className=\"relative z-20 flex items-center justify-center\">\n                <Icon size={18} strokeWidth={2.5} />\n              </span>\n            </button>\n          );\n        })}\n      </div>\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app/task-beacon-app-cursor/task-beacon-app/src/components/ui/skeleton.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app/task-beacon-app-cursor/task-beacon-app/src/components/ui/slider.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app/task-beacon-app-cursor/task-beacon-app/src/components/ui/sonner.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app/task-beacon-app-cursor/task-beacon-app/src/components/ui/switch.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app/task-beacon-app-cursor/task-beacon-app/src/components/ui/table.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app/task-beacon-app-cursor/task-beacon-app/src/components/ui/tabs.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app/task-beacon-app-cursor/task-beacon-app/src/components/ui/textarea.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app/task-beacon-app-cursor/task-beacon-app/src/components/ui/theme-toggle.tsx","messages":[{"ruleId":"unused-imports/no-unused-vars","severity":2,"message":"'theme' is assigned a value but never used.","line":6,"column":11,"nodeType":null,"messageId":"unusedVar","endLine":6,"endColumn":16}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { Moon, Sun } from 'lucide-react';\nimport { Button } from '@/components/ui/button';\nimport { useTheme } from '@/contexts/ThemeContext';\n\nexport function ThemeToggle() {\n  const { theme, setTheme, actualTheme } = useTheme();\n\n  const handleToggle = () => {\n    setTheme(actualTheme === 'dark' ? 'light' : 'dark');\n  };\n\n  return (\n    <Button\n      variant=\"ghost\"\n      size=\"sm\"\n      onClick={handleToggle}\n      className=\"h-8 w-8 p-0\"\n      aria-label={`Switch to ${actualTheme === 'dark' ? 'light' : 'dark'} theme`}\n      title={`Switch to ${actualTheme === 'dark' ? 'light' : 'dark'} theme`}\n    >\n      {actualTheme === 'dark' ? (\n        <Sun className=\"h-4 w-4 text-foreground\" aria-hidden=\"true\" />\n      ) : (\n        <Moon className=\"h-4 w-4 text-foreground\" aria-hidden=\"true\" />\n      )}\n      <span className=\"sr-only\">\n        {actualTheme === 'dark'\n          ? 'Switch to light theme'\n          : 'Switch to dark theme'}\n      </span>\n    </Button>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app/task-beacon-app-cursor/task-beacon-app/src/components/ui/toast.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app/task-beacon-app-cursor/task-beacon-app/src/components/ui/toaster.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app/task-beacon-app-cursor/task-beacon-app/src/components/ui/toggle-group.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app/task-beacon-app-cursor/task-beacon-app/src/components/ui/toggle.tsx","messages":[{"ruleId":"react-refresh/only-export-components","severity":1,"message":"Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.","line":8,"column":14,"nodeType":"Identifier","messageId":"namedExport","endLine":8,"endColumn":28}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// src/components/ui/toggle.tsx\nimport * as React from 'react';\nimport * as TogglePrimitive from '@radix-ui/react-toggle';\nimport { cva, type VariantProps } from 'class-variance-authority';\n\nimport { cn } from '@/lib/utils';\n\nexport const toggleVariants = cva(\n  'inline-flex items-center justify-center rounded-full text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground',\n  {\n    variants: {\n      variant: {\n        default: 'bg-transparent',\n        outline:\n          'border border-input bg-transparent hover:bg-accent hover:text-accent-foreground',\n      },\n      size: {\n        default: 'h-10 px-3',\n        sm: 'h-9 px-2.5',\n        lg: 'h-11 px-5',\n      },\n    },\n    defaultVariants: {\n      variant: 'default',\n      size: 'default',\n    },\n  }\n);\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n));\n\nToggle.displayName = TogglePrimitive.Root.displayName;\n\nexport { Toggle };\n","usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app/task-beacon-app-cursor/task-beacon-app/src/components/ui/tooltip.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app/task-beacon-app-cursor/task-beacon-app/src/components/ui/use-toast.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app/task-beacon-app-cursor/task-beacon-app/src/contexts/AuthContext.tsx","messages":[{"ruleId":"unused-imports/no-unused-imports","severity":2,"message":"'getCurrentUser' is defined but never used.","line":11,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":11,"endColumn":24,"fix":{"range":[245,318],"text":"\n"}},{"ruleId":"react-refresh/only-export-components","severity":1,"message":"Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.","line":184,"column":17,"nodeType":"Identifier","messageId":"namedExport","endLine":184,"endColumn":24}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":1,"fixableWarningCount":0,"source":"import {\n  createContext,\n  useContext,\n  useState,\n  useEffect,\n  ReactNode,\n} from 'react';\nimport { supabase } from '@/integrations/supabase/client';\nimport { toast } from '@/lib/toast';\nimport { User, Session } from '@supabase/supabase-js';\nimport { getCurrentUser } from '@/integrations/supabase/api/users.api';\n\ninterface AuthContextType {\n  user: User | null;\n  session: Session | null;\n  loading: boolean;\n  error: Error | null;\n  signOut: () => Promise<void>;\n  refreshSession: () => Promise<void>;\n}\n\nconst AuthContext = createContext<AuthContextType | undefined>(undefined);\n\nexport function AuthProvider({ children }: { children: ReactNode }) {\n  const [user, setUser] = useState<User | null>(null);\n  const [session, setSession] = useState<Session | null>(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState<Error | null>(null);\n\n  // Clean up auth state utility\n  const cleanupAuthState = () => {\n    Object.keys(localStorage).forEach((key) => {\n      if (key.startsWith('supabase.auth.') || key.includes('sb-')) {\n        localStorage.removeItem(key);\n      }\n    });\n    Object.keys(sessionStorage || {}).forEach((key) => {\n      if (key.startsWith('supabase.auth.') || key.includes('sb-')) {\n        sessionStorage.removeItem(key);\n      }\n    });\n  };\n\n  // Refresh session function\n  const refreshSession = async () => {\n    try {\n      const { data, error } = await supabase.auth.refreshSession();\n      if (error) throw error;\n\n      setSession(data.session);\n      setUser(data.session?.user ?? null);\n    } catch (error: unknown) {\n      console.error('Session refresh error:', error);\n      if (error instanceof Error) {\n        setError(error);\n      }\n    }\n  };\n\n  // Sign out function with enhanced cleanup\n  const signOut = async () => {\n    try {\n      setLoading(true);\n\n      // Clean up auth state first\n      cleanupAuthState();\n\n      // Attempt global sign out\n      try {\n        await supabase.auth.signOut({ scope: 'global' });\n      } catch (err) {\n        console.warn(\n          'Global sign out failed, continuing with local cleanup:',\n          err\n        );\n      }\n\n      // Clear local state\n      setUser(null);\n      setSession(null);\n      setError(null);\n\n      toast.success('Signed out successfully');\n\n      // Force page reload for clean state\n      setTimeout(() => {\n        window.location.href = '/auth';\n      }, 500);\n    } catch (error: unknown) {\n      console.error('Sign-out error:', error);\n      toast.error('Failed to sign out');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  useEffect(() => {\n    let mounted = true;\n\n    // Set up auth state listener FIRST\n    const {\n      data: { subscription },\n    } = supabase.auth.onAuthStateChange(async (event, session) => {\n      console.log('Auth state change:', event, session?.user?.id);\n\n      if (!mounted) return;\n\n      // Update session and user state\n      setSession(session);\n      setUser(session?.user ?? null);\n\n      // Handle different auth events\n      if (event === 'SIGNED_IN' && session?.user) {\n        // Defer any additional data fetching to prevent deadlocks\n        setTimeout(() => {\n          if (mounted) {\n            setError(null);\n            setLoading(false);\n          }\n        }, 0);\n      } else if (event === 'SIGNED_OUT') {\n        setUser(null);\n        setSession(null);\n        setError(null);\n        setLoading(false);\n      } else if (event === 'TOKEN_REFRESHED') {\n        console.log('Token refreshed successfully');\n      }\n    });\n\n    // THEN check for existing session\n    const initializeAuth = async () => {\n      try {\n        const {\n          data: { session },\n          error,\n        } = await supabase.auth.getSession();\n\n        if (error) {\n          console.error('Error getting session:', error);\n          setError(error);\n        }\n\n        if (mounted) {\n          setSession(session);\n          setUser(session?.user ?? null);\n        }\n      } catch (error: unknown) {\n        console.error('Auth initialization error:', error);\n        if (mounted && error instanceof Error) {\n          setError(error);\n        }\n      } finally {\n        if (mounted) {\n          setLoading(false);\n        }\n      }\n    };\n\n    initializeAuth();\n\n    return () => {\n      mounted = false;\n      subscription.unsubscribe();\n    };\n  }, []);\n\n  return (\n    <AuthContext.Provider\n      value={{\n        user,\n        session,\n        loading,\n        error,\n        signOut,\n        refreshSession,\n      }}\n    >\n      {children}\n    </AuthContext.Provider>\n  );\n}\n\nexport function useAuth() {\n  const context = useContext(AuthContext);\n  if (context === undefined) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app/task-beacon-app-cursor/task-beacon-app/src/contexts/ThemeContext.tsx","messages":[{"ruleId":"react-refresh/only-export-components","severity":1,"message":"Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.","line":77,"column":17,"nodeType":"Identifier","messageId":"namedExport","endLine":77,"endColumn":25}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { createContext, useContext, useEffect, useState } from 'react';\n\ntype Theme = 'dark' | 'light' | 'system';\n\ninterface ThemeContextType {\n  theme: Theme;\n  setTheme: (theme: Theme) => void;\n  actualTheme: 'dark' | 'light';\n}\n\nconst ThemeContext = createContext<ThemeContextType | undefined>(undefined);\n\nexport function ThemeProvider({ children }: { children: React.ReactNode }) {\n  const [theme, setTheme] = useState<Theme>('dark'); // Default to dark\n  const [actualTheme, setActualTheme] = useState<'dark' | 'light'>('dark');\n\n  useEffect(() => {\n    // Get stored theme preference or default to dark\n    const storedTheme = localStorage.getItem('theme') as Theme;\n    if (storedTheme) {\n      setTheme(storedTheme);\n    } else {\n      // Set dark as default and store it\n      localStorage.setItem('theme', 'dark');\n    }\n  }, []);\n\n  useEffect(() => {\n    const root = window.document.documentElement;\n\n    // Remove existing theme classes\n    root.classList.remove('light', 'dark');\n\n    let effectiveTheme: 'dark' | 'light';\n\n    if (theme === 'system') {\n      effectiveTheme = window.matchMedia('(prefers-color-scheme: dark)').matches\n        ? 'dark'\n        : 'light';\n    } else {\n      effectiveTheme = theme;\n    }\n\n    // Apply the theme class\n    root.classList.add(effectiveTheme);\n    setActualTheme(effectiveTheme);\n\n    // Store the preference\n    localStorage.setItem('theme', theme);\n  }, [theme]);\n\n  // Listen for system theme changes when using system preference\n  useEffect(() => {\n    if (theme !== 'system') return;\n\n    const mediaQuery = window.matchMedia('(prefers-color-scheme: dark)');\n    const handleChange = () => {\n      const root = window.document.documentElement;\n      root.classList.remove('light', 'dark');\n\n      const effectiveTheme = mediaQuery.matches ? 'dark' : 'light';\n      root.classList.add(effectiveTheme);\n      setActualTheme(effectiveTheme);\n    };\n\n    mediaQuery.addEventListener('change', handleChange);\n    return () => mediaQuery.removeEventListener('change', handleChange);\n  }, [theme]);\n\n  return (\n    <ThemeContext.Provider value={{ theme, setTheme, actualTheme }}>\n      {children}\n    </ThemeContext.Provider>\n  );\n}\n\nexport function useTheme() {\n  const context = useContext(ThemeContext);\n  if (context === undefined) {\n    throw new Error('useTheme must be used within a ThemeProvider');\n  }\n  return context;\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app/task-beacon-app-cursor/task-beacon-app/src/features/tasks/components/CountdownTimer.tsx","messages":[{"ruleId":"unused-imports/no-unused-imports","severity":2,"message":"'config' is defined but never used.","line":2,"column":31,"nodeType":null,"messageId":"unusedVar","endLine":2,"endColumn":37,"fix":{"range":[68,76],"text":""}},{"ruleId":"unused-imports/no-unused-imports","severity":2,"message":"'setupAnimationVariables' is defined but never used.","line":13,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":13,"endColumn":33,"fix":{"range":[478,503],"text":""}},{"ruleId":"unused-imports/no-unused-imports","severity":2,"message":"'getSpringConfig' is defined but never used.","line":13,"column":35,"nodeType":null,"messageId":"unusedVar","endLine":13,"endColumn":50,"fix":{"range":[502,519],"text":""}},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useMemo has an unnecessary dependency: 'shouldReduceMotion'. Either exclude it or remove the dependency array.","line":86,"column":5,"nodeType":"ArrayExpression","endLine":86,"endColumn":45,"suggestions":[{"desc":"Update the dependencies array to be: [getAnimationConfig]","fix":{"range":[2784,2824],"text":"[getAnimationConfig]"}}]}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":3,"fixableWarningCount":0,"source":"import React, { useMemo } from 'react';\nimport { useSpring, animated, config } from '@react-spring/web';\nimport { TaskStatus } from '@/types';\nimport TimerRing from './timer/TimerRing';\nimport TimerDisplay from './timer/TimerDisplay';\nimport { useTaskUIContext } from '@/features/tasks/context/TaskUIContext';\nimport {\n  Tooltip,\n  TooltipProvider,\n  TooltipTrigger,\n} from '@/components/ui/tooltip';\nimport TimerTooltip from '@/features/tasks/components/TimerTooltip';\nimport { setupAnimationVariables, getSpringConfig } from '@/lib/animationUtils';\nimport { useCountdown } from '@/hooks/useCountdown';\nimport { useMotionPreferences } from '@/hooks/useMotionPreferences';\n\n/**\n * CountdownTimer component displays a circular timer that visualizes the time remaining\n * until a task's due date.\n *\n * Features:\n * - Visually displays time left as a circular progress indicator\n * - Adapts display based on task status (pending, complete, overdue)\n * - Shows different styling based on priority\n * - Resizes based on mobile/desktop view\n * - Provides detailed due date information via tooltip\n * - Respects user motion preferences for accessibility\n *\n * @param dueDate - The due date of the task as an ISO string\n * @param status - The current status of the task\n * @param size - The size of the timer in pixels (default: 48)\n * @param priority - The priority of the task (default: \"medium\")\n */\ninterface CountdownTimerProps {\n  dueDate: string | null;\n  status: TaskStatus;\n  size?: number;\n  priority?: 'low' | 'medium' | 'high';\n}\n\nconst AnimatedDiv = animated.div;\n\nfunction CountdownTimer({\n  dueDate,\n  status,\n  size = 48,\n  priority = 'medium',\n}: CountdownTimerProps) {\n  const { isMobile } = useTaskUIContext();\n  const { shouldReduceMotion, getAnimationConfig } = useMotionPreferences();\n\n  // Calculate and memoize size-related values to avoid recalculation\n  const { dynamicSize, radius, circumference } = useMemo(() => {\n    const dynamicSize = isMobile\n      ? priority === 'high'\n        ? size * 1.1\n        : priority === 'low'\n          ? size * 0.7\n          : size * 0.9\n      : priority === 'high'\n        ? size * 1.2\n        : priority === 'low'\n          ? size * 0.8\n          : size;\n\n    const radius = dynamicSize / 2 - 4;\n    const circumference = 2 * Math.PI * radius;\n\n    return { dynamicSize, radius, circumference };\n  }, [isMobile, priority, size]);\n\n  // Use our custom hook to manage countdown logic\n  const { timeDisplay, dashOffset, tooltipContent, ariaLabel } = useCountdown(\n    dueDate,\n    status,\n    circumference\n  );\n\n  // Animation configuration based on motion preferences\n  const springConfig = useMemo(\n    () =>\n      getAnimationConfig(\n        { tension: 120, friction: 14 },\n        { tension: 300, friction: 30 }\n      ),\n    [shouldReduceMotion, getAnimationConfig]\n  );\n\n  // Animation for the timer ring with motion preference support\n  const { strokeDashoffset } = useSpring({\n    strokeDashoffset: dashOffset,\n    config: springConfig,\n    immediate:\n      status === 'complete' ||\n      status === 'overdue' ||\n      !dueDate ||\n      shouldReduceMotion,\n  });\n\n  // Apply GPU acceleration for better performance on non-reduced motion\n  const containerStyles = useMemo(\n    () => ({\n      width: dynamicSize,\n      height: dynamicSize,\n      ...(shouldReduceMotion ? {} : { transform: 'translateZ(0)' }),\n    }),\n    [dynamicSize, shouldReduceMotion]\n  );\n\n  return (\n    <TooltipProvider>\n      <Tooltip delayDuration={300}>\n        <TooltipTrigger asChild>\n          <AnimatedDiv\n            role=\"timer\"\n            tabIndex={0}\n            aria-label={ariaLabel}\n            className={`timer-container relative rounded-full focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-primary focus-visible:ring-offset-2 ${\n              status === 'pending' &&\n              Number(timeDisplay) === 0 &&\n              !shouldReduceMotion\n                ? 'animate-pulse-subtle'\n                : ''\n            } ${shouldReduceMotion ? 'reduce-motion-duration' : 'gpu-accelerated'}`}\n            style={containerStyles}\n          >\n            <TimerRing\n              size={dynamicSize}\n              radius={radius}\n              circumference={circumference}\n              strokeDashoffset={strokeDashoffset}\n              status={status}\n            />\n            <TimerDisplay\n              size={dynamicSize}\n              status={status}\n              timeDisplay={timeDisplay}\n            />\n          </AnimatedDiv>\n        </TooltipTrigger>\n        <TimerTooltip tooltipContent={tooltipContent} status={status} />\n      </Tooltip>\n    </TooltipProvider>\n  );\n}\n\nexport default CountdownTimer; ","usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app/task-beacon-app-cursor/task-beacon-app/src/features/tasks/components/FabButton.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app/task-beacon-app-cursor/task-beacon-app/src/features/tasks/components/ParentTaskInfo.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app/task-beacon-app-cursor/task-beacon-app/src/features/tasks/components/RealtimeUpdateIndicator.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app/task-beacon-app-cursor/task-beacon-app/src/features/tasks/components/TaskActions.tsx","messages":[{"ruleId":"unused-imports/no-unused-vars","severity":2,"message":"'detailView' is defined but never used.","line":13,"column":30,"nodeType":null,"messageId":"unusedVar","endLine":13,"endColumn":40}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useCallback, memo } from 'react';\nimport { Button } from '@/components/ui/button';\nimport { Task } from '@/types/shared.types';\nimport { useNavigate } from 'react-router-dom';\nimport { useTaskMutations } from '../hooks/useTaskMutations';\nimport { toast } from '@/lib/toast';\n\ninterface TaskActionsProps {\n  task: Task;\n  detailView?: boolean;\n}\n\nfunction TaskActions({ task, detailView }: TaskActionsProps) {\n  const navigate = useNavigate();\n  const { toggleTaskComplete } = useTaskMutations();\n\n  const handleCreateFollowUp = useCallback(() => {\n    navigate(`/follow-up-task/${task.id}`);\n  }, [navigate, task.id]);\n\n  const handleToggleComplete = useCallback(async () => {\n    const result = await toggleTaskComplete(task);\n    if (result.success) {\n      toast.success(result.message);\n    } else if (result.error) {\n      toast.error(result.message);\n    }\n  }, [toggleTaskComplete, task]);\n\n  return (\n    <div className=\"flex flex-wrap gap-2 border-t border-gray-100 pt-2\">\n      <Button\n        variant={task.status === 'complete' ? 'outline' : 'default'}\n        size=\"sm\"\n        onClick={handleToggleComplete}\n      >\n        {task.status === 'complete' ? 'Mark Incomplete' : 'Complete'}\n      </Button>\n      <Button variant=\"outline\" size=\"sm\" onClick={handleCreateFollowUp}>\n        Follow Up\n      </Button>\n    </div>\n  );\n}\n\nexport default memo(TaskActions);\n","usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app/task-beacon-app-cursor/task-beacon-app/src/features/tasks/components/TaskCard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app/task-beacon-app-cursor/task-beacon-app/src/features/tasks/components/TaskCardContent.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app/task-beacon-app-cursor/task-beacon-app/src/features/tasks/components/TaskCardHeader.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app/task-beacon-app-cursor/task-beacon-app/src/features/tasks/components/TaskDashboard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app/task-beacon-app-cursor/task-beacon-app/src/features/tasks/components/TaskDashboardHeader.tsx","messages":[{"ruleId":"unused-imports/no-unused-vars","severity":2,"message":"'navigate' is assigned a value but never used.","line":5,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":5,"endColumn":17}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { memo } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\n\nfunction TaskDashboardHeader() {\n  const navigate = useNavigate();\n\n  return (\n    <header className=\"mb-8 flex items-center justify-between\">\n      <div className=\"flex items-center gap-4\">\n        <div>\n          <h1 className=\"text-2xl font-bold tracking-tight text-foreground sm:text-3xl\">\n            Tasks\n          </h1>\n          <p className=\"text-sm text-muted-foreground sm:text-base\">\n            Manage your tasks and stay organized\n          </p>\n        </div>\n      </div>\n    </header>\n  );\n}\n\nexport default memo(TaskDashboardHeader);\n","usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app/task-beacon-app-cursor/task-beacon-app/src/features/tasks/components/TaskDetails.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app/task-beacon-app-cursor/task-beacon-app/src/features/tasks/components/TaskExpandButton.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app/task-beacon-app-cursor/task-beacon-app/src/features/tasks/components/TaskFilterNavbar.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app/task-beacon-app-cursor/task-beacon-app/src/features/tasks/components/TaskHeader.tsx","messages":[{"ruleId":"unused-imports/no-unused-imports","severity":2,"message":"'useTaskUIContext' is defined but never used.","line":5,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":5,"endColumn":26,"fix":{"range":[160,235],"text":""}}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":1,"fixableWarningCount":0,"source":"import { memo } from 'react';\nimport { Button } from '@/components/ui/button';\nimport { Task } from '@/types/shared.types';\nimport { Pin } from 'lucide-react';\nimport { useTaskUIContext } from '@/features/tasks/context/TaskUIContext';\nimport TaskStatus from './TaskStatus';\nimport TaskExpandButton from './TaskExpandButton';\n\ninterface TaskHeaderProps {\n  task: Task;\n  isExpanded: boolean;\n  toggleExpand: () => void;\n  handleTogglePin: () => void;\n}\n\nfunction TaskHeader({\n  task,\n  isExpanded,\n  toggleExpand,\n  handleTogglePin,\n}: TaskHeaderProps) {\n  return (\n    <div className=\"task-header-container flex w-full items-center gap-2\">\n      <TaskStatus task={task} />\n\n      <div className=\"flex min-w-0 flex-1 items-center\">\n        <h3\n          className=\"mb-0 text-base text-card-foreground sm:text-lg\"\n          title={task.title}\n        >\n          {task.title}\n        </h3>\n      </div>\n\n      <Button\n        variant=\"ghost\"\n        size=\"icon\"\n        className=\"no-shadow ml-1 h-8 w-8 shrink-0\"\n        onClick={handleTogglePin}\n        title={task.pinned ? 'Unpin task' : 'Pin task'}\n      >\n        {task.pinned ? (\n          <Pin size={16} className=\"fill-current text-card-foreground\" />\n        ) : (\n          <Pin size={16} className=\"text-card-foreground opacity-80\" />\n        )}\n      </Button>\n\n      <TaskExpandButton isExpanded={isExpanded} onClick={toggleExpand} />\n    </div>\n  );\n}\n\nexport default memo(TaskHeader);\n","usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app/task-beacon-app-cursor/task-beacon-app/src/features/tasks/components/TaskList.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app/task-beacon-app-cursor/task-beacon-app/src/features/tasks/components/TaskMetadata.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app/task-beacon-app-cursor/task-beacon-app/src/features/tasks/components/TaskPagination.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app/task-beacon-app-cursor/task-beacon-app/src/features/tasks/components/TaskStatus.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app/task-beacon-app-cursor/task-beacon-app/src/features/tasks/components/TimerTooltip.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app/task-beacon-app-cursor/task-beacon-app/src/features/tasks/components/__tests__/CountdownTimer.test.tsx","messages":[{"ruleId":"unused-imports/no-unused-imports","severity":2,"message":"'TaskStatus' is defined but never used.","line":4,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":4,"endColumn":20,"fix":{"range":[171,210],"text":"\n"}}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":1,"fixableWarningCount":0,"source":"import { render, screen } from '@testing-library/react';\nimport { describe, it, expect, vi, beforeEach } from 'vitest';\nimport CountdownTimer from '../../CountdownTimer';\nimport { TaskStatus } from '@/types';\n\n// Mock the TaskUIContext\nvi.mock('@/features/tasks/context/TaskUIContext', () => ({\n  useTaskUIContext: () => ({\n    isMobile: false,\n  }),\n}));\n\n// Mock useCountdown hook\nvi.mock('@/hooks/useCountdown', () => ({\n  useCountdown: () => ({\n    timeDisplay: '5',\n    dashOffset: 50,\n    tooltipContent: 'Due in 5 days',\n    ariaLabel: 'Task timer: 5 days remaining',\n  }),\n}));\n\ndescribe('CountdownTimer', () => {\n  beforeEach(() => {\n    vi.clearAllMocks();\n  });\n\n  it('renders timer with pending status', () => {\n    render(\n      <CountdownTimer\n        dueDate=\"2025-06-05T10:00:00Z\"\n        status=\"pending\"\n        size={48}\n        priority=\"medium\"\n      />\n    );\n\n    expect(screen.getByRole('timer')).toBeInTheDocument();\n    expect(screen.getByText('5')).toBeInTheDocument();\n  });\n\n  it('renders checkmark for completed tasks', () => {\n    vi.doMock('@/hooks/useCountdown', () => ({\n      useCountdown: () => ({\n        timeDisplay: '',\n        dashOffset: 0,\n        tooltipContent: 'Task completed',\n        ariaLabel: 'Task timer: Completed',\n      }),\n    }));\n\n    render(\n      <CountdownTimer\n        dueDate=\"2025-06-05T10:00:00Z\"\n        status=\"complete\"\n        size={48}\n        priority=\"medium\"\n      />\n    );\n\n    const svg = screen.getByRole('timer').querySelector('svg');\n    expect(svg).toBeInTheDocument();\n  });\n\n  it('applies correct size and priority styling', () => {\n    render(\n      <CountdownTimer\n        dueDate=\"2025-06-05T10:00:00Z\"\n        status=\"pending\"\n        size={64}\n        priority=\"high\"\n      />\n    );\n\n    const timer = screen.getByRole('timer');\n    expect(timer).toHaveStyle({ width: '76.8px', height: '76.8px' }); // 64 * 1.2 for high priority\n  });\n\n  it('handles null due date gracefully', () => {\n    render(\n      <CountdownTimer\n        dueDate={null}\n        status=\"pending\"\n        size={48}\n        priority=\"medium\"\n      />\n    );\n\n    expect(screen.getByRole('timer')).toBeInTheDocument();\n  });\n\n  it('has proper accessibility attributes', () => {\n    render(\n      <CountdownTimer\n        dueDate=\"2025-06-05T10:00:00Z\"\n        status=\"pending\"\n        size={48}\n        priority=\"medium\"\n      />\n    );\n\n    const timer = screen.getByRole('timer');\n    expect(timer).toHaveAttribute('tabIndex', '0');\n    expect(timer).toHaveAttribute('aria-label', 'Task timer: 5 days remaining');\n  });\n}); ","usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app/task-beacon-app-cursor/task-beacon-app/src/features/tasks/components/timer/TimerDisplay.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app/task-beacon-app-cursor/task-beacon-app/src/features/tasks/components/timer/TimerRing.tsx","messages":[{"ruleId":"unused-imports/no-unused-imports","severity":2,"message":"'getTimerColor' is defined but never used.","line":4,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":4,"endColumn":23,"fix":{"range":[136,205],"text":"\n"}}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":1,"fixableWarningCount":0,"source":"import { memo, useMemo } from 'react';\nimport { animated, SpringValue } from '@react-spring/web';\nimport { TaskStatus } from '@/types';\nimport { getTimerColor } from '@/features/tasks/utils/taskUiUtils';\n\n/**\n * TimerRing Component\n *\n * Renders the circular progress indicator for the countdown timer with the appropriate\n * styling based on task status. Uses SVG with gradients and filters for visual effects.\n *\n * @param size - The diameter of the timer ring in pixels\n * @param radius - The radius of the timer ring in pixels\n * @param circumference - The circumference of the timer ring\n * @param strokeDashoffset - The animated stroke dash offset value\n * @param status - The current status of the task\n */\ninterface TimerRingProps {\n  size: number;\n  radius: number;\n  circumference: number;\n  strokeDashoffset: SpringValue<number> | number;\n  status: TaskStatus;\n}\n\n// Define gradients once outside the component to avoid recreating them on each render\n// This is moved to a separate component and memoized to prevent re-renders\nconst GradientDefs = memo(() => (\n  <defs>\n    <linearGradient id=\"gradientPending\" x1=\"0%\" y1=\"0%\" x2=\"100%\" y2=\"100%\">\n      <stop offset=\"0%\" stopColor=\"#FFDD24\" />\n      <stop offset=\"100%\" stopColor=\"#FFE082\" />\n    </linearGradient>\n    <linearGradient id=\"gradientOverdue\" x1=\"0%\" y1=\"0%\" x2=\"100%\" y2=\"100%\">\n      <stop offset=\"0%\" stopColor=\"#DA3E52\" />\n      <stop offset=\"100%\" stopColor=\"#E57373\" />\n    </linearGradient>\n    <linearGradient id=\"gradientComplete\" x1=\"0%\" y1=\"0%\" x2=\"100%\" y2=\"100%\">\n      <stop offset=\"0%\" stopColor=\"#10B981\" />\n      <stop offset=\"100%\" stopColor=\"#34D399\" />\n    </linearGradient>\n\n    {/* Add filters for glow effects */}\n    <filter id=\"glowOverdue\" x=\"-20%\" y=\"-20%\" width=\"140%\" height=\"140%\">\n      <feGaussianBlur stdDeviation=\"2\" result=\"blur\" />\n      <feComposite in=\"SourceGraphic\" in2=\"blur\" operator=\"over\" />\n    </filter>\n\n    <filter id=\"glowPending\" x=\"-20%\" y=\"-20%\" width=\"140%\" height=\"140%\">\n      <feGaussianBlur stdDeviation=\"1\" result=\"blur\" />\n      <feComposite in=\"SourceGraphic\" in2=\"blur\" operator=\"over\" />\n    </filter>\n\n    <filter id=\"glowComplete\" x=\"-20%\" y=\"-20%\" width=\"140%\" height=\"140%\">\n      <feGaussianBlur stdDeviation=\"1.5\" result=\"blur\" />\n      <feComposite in=\"SourceGraphic\" in2=\"blur\" operator=\"over\" />\n    </filter>\n  </defs>\n));\n\nGradientDefs.displayName = 'GradientDefs';\n\nconst TimerRing = ({\n  size,\n  radius,\n  circumference,\n  strokeDashoffset,\n  status,\n}: TimerRingProps) => {\n  // Memoize derived values that don't need to be recalculated on every render\n  const staticProps = useMemo(() => {\n    const gradientId =\n      status === 'pending'\n        ? 'url(#gradientPending)'\n        : status === 'overdue'\n          ? 'url(#gradientOverdue)'\n          : 'url(#gradientComplete)';\n\n    const filterId =\n      status === 'overdue'\n        ? 'url(#glowOverdue)'\n        : status === 'complete'\n          ? 'url(#glowComplete)'\n          : 'url(#glowPending)';\n\n    const strokeWidth = status === 'overdue' ? '5px' : '4px';\n\n    return { gradientId, filterId, strokeWidth };\n  }, [status]);\n\n  return (\n    <svg\n      width={size}\n      height={size}\n      viewBox={`0 0 ${size} ${size}`}\n      style={{\n        overflow: 'visible',\n      }}\n      className=\"timer-ring\"\n      aria-hidden=\"true\" // Mark as decorative for accessibility\n    >\n      <GradientDefs />\n\n      {/* Background circle */}\n      <circle\n        cx={size / 2}\n        cy={size / 2}\n        r={radius}\n        fill=\"none\"\n        strokeWidth=\"2.5\"\n        stroke=\"#F9FAFB\"\n        style={{ strokeWidth: '2.5px' }}\n      />\n\n      {/* Animated foreground circle */}\n      <animated.circle\n        cx={size / 2}\n        cy={size / 2}\n        r={radius}\n        fill=\"none\"\n        stroke={staticProps.gradientId}\n        strokeDasharray={circumference}\n        strokeDashoffset={strokeDashoffset}\n        transform={`rotate(-90, ${size / 2}, ${size / 2})`}\n        strokeLinecap=\"round\"\n        className=\"timer-progress\"\n        style={{\n          filter: staticProps.filterId,\n          strokeWidth: staticProps.strokeWidth,\n        }}\n      />\n    </svg>\n  );\n};\n\n// Use React.memo with a custom equality function to prevent unnecessary re-renders\nexport default memo(TimerRing, (prevProps, nextProps) => {\n  return (\n    prevProps.size === nextProps.size &&\n    prevProps.radius === nextProps.radius &&\n    prevProps.circumference === nextProps.circumference &&\n    prevProps.status === nextProps.status &&\n    // For the strokeDashoffset, we need special handling since it might be a SpringValue\n    (prevProps.strokeDashoffset === nextProps.strokeDashoffset ||\n      (typeof prevProps.strokeDashoffset === 'number' &&\n        typeof nextProps.strokeDashoffset === 'number' &&\n        prevProps.strokeDashoffset === nextProps.strokeDashoffset))\n  );\n}); ","usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app/task-beacon-app-cursor/task-beacon-app/src/features/tasks/context/TaskContext.tsx","messages":[{"ruleId":"react-refresh/only-export-components","severity":1,"message":"Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.","line":6,"column":25,"nodeType":"Identifier","messageId":"namedExport","endLine":6,"endColumn":39},{"ruleId":"react-refresh/only-export-components","severity":1,"message":"Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.","line":8,"column":33,"nodeType":"Identifier","messageId":"namedExport","endLine":8,"endColumn":49}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// Legacy file - now re-exports the split contexts\n// This file will be removed once all consumers are updated\n\nexport {\n  TaskDataContextProvider,\n  useTaskDataContext as useTaskContext,\n} from './TaskDataContext';\nexport { TaskUIContextProvider, useTaskUIContext } from './TaskUIContext';\n","usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app/task-beacon-app-cursor/task-beacon-app/src/features/tasks/context/TaskDataContext.tsx","messages":[{"ruleId":"react-refresh/only-export-components","severity":1,"message":"Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.","line":39,"column":17,"nodeType":"Identifier","messageId":"namedExport","endLine":39,"endColumn":35}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { createContext, useContext, ReactNode } from 'react';\nimport { useTaskQueries } from '@/features/tasks/hooks/useTaskQueries';\nimport { Task } from '@/types/shared.types';\n\ninterface TaskDataContextValue {\n  tasks: Task[];\n  isLoading: boolean;\n  isFetching: boolean;\n  error: Error | null;\n  totalCount: number;\n  currentPage: number;\n  pageSize: number;\n  hasNextPage: boolean;\n  hasPreviousPage: boolean;\n  goToNextPage: () => void;\n  goToPreviousPage: () => void;\n}\n\nconst TaskDataContext = createContext<TaskDataContextValue | undefined>(\n  undefined\n);\n\ninterface TaskDataContextProviderProps {\n  children: ReactNode;\n}\n\nexport function TaskDataContextProvider({\n  children,\n}: TaskDataContextProviderProps) {\n  const taskQueries = useTaskQueries();\n\n  return (\n    <TaskDataContext.Provider value={taskQueries}>\n      {children}\n    </TaskDataContext.Provider>\n  );\n}\n\nexport function useTaskDataContext() {\n  const context = useContext(TaskDataContext);\n  if (context === undefined) {\n    throw new Error(\n      'useTaskDataContext must be used within a TaskDataContextProvider'\n    );\n  }\n  return context;\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app/task-beacon-app-cursor/task-beacon-app/src/features/tasks/context/TaskUIContext.tsx","messages":[{"ruleId":"react-refresh/only-export-components","severity":1,"message":"Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.","line":74,"column":17,"nodeType":"Identifier","messageId":"namedExport","endLine":74,"endColumn":33}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import {\n  createContext,\n  useContext,\n  useState,\n  useEffect,\n  useMemo,\n  ReactNode,\n} from 'react';\nimport { TaskFilter } from '../types';\n\n// Define the shape of our UI context\ninterface TaskUIContextType {\n  // UI filters\n  filter: TaskFilter;\n  setFilter: (filter: TaskFilter) => void;\n\n  // Expanded state\n  expandedTaskId: string | null;\n  setExpandedTaskId: (id: string | null) => void;\n\n  // Mobile detection\n  isMobile: boolean;\n}\n\nconst TaskUIContext = createContext<TaskUIContextType | undefined>(undefined);\n\n/**\n * Provider component for task UI-related state\n *\n * Manages UI-only concerns like filters, expanded state, and mobile detection\n *\n * @param children - React components that will consume the context\n */\nexport function TaskUIContextProvider({ children }: { children: ReactNode }) {\n  // UI States\n  const [filter, setFilter] = useState<TaskFilter>('all');\n  const [expandedTaskId, setExpandedTaskId] = useState<string | null>(null);\n  const [isMobile, setIsMobile] = useState(false);\n\n  // Check if the device is mobile on component mount and window resize\n  useEffect(() => {\n    const checkIfMobile = () => {\n      setIsMobile(window.innerWidth < 768);\n    };\n\n    checkIfMobile();\n    window.addEventListener('resize', checkIfMobile);\n\n    return () => window.removeEventListener('resize', checkIfMobile);\n  }, []);\n\n  const value = useMemo(\n    () => ({\n      filter,\n      setFilter,\n      expandedTaskId,\n      setExpandedTaskId,\n      isMobile,\n    }),\n    [filter, expandedTaskId, isMobile]\n  );\n\n  return (\n    <TaskUIContext.Provider value={value}>{children}</TaskUIContext.Provider>\n  );\n}\n\n/**\n * Custom hook for using the task UI context\n *\n * @returns The task UI context value\n * @throws Error if used outside of a TaskUIContextProvider\n */\nexport function useTaskUIContext() {\n  const context = useContext(TaskUIContext);\n  if (context === undefined) {\n    throw new Error(\n      'useTaskUIContext must be used within a TaskUIContextProvider'\n    );\n  }\n  return context;\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app/task-beacon-app-cursor/task-beacon-app/src/features/tasks/forms/CreateTaskForm.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app/task-beacon-app-cursor/task-beacon-app/src/features/tasks/forms/FollowUpTaskForm.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app/task-beacon-app-cursor/task-beacon-app/src/features/tasks/forms/TaskFormExample.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app/task-beacon-app-cursor/task-beacon-app/src/features/tasks/forms/TaskFormWithValidation.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app/task-beacon-app-cursor/task-beacon-app/src/features/tasks/hooks/useCountdown.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app/task-beacon-app-cursor/task-beacon-app/src/features/tasks/hooks/useCreateTask.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app/task-beacon-app-cursor/task-beacon-app/src/features/tasks/hooks/useCreateTaskAPI.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app/task-beacon-app-cursor/task-beacon-app/src/features/tasks/hooks/useCreateTaskPhotoUpload.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app/task-beacon-app-cursor/task-beacon-app/src/features/tasks/hooks/useFilteredTasks.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app/task-beacon-app-cursor/task-beacon-app/src/features/tasks/hooks/useFollowUpTask.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app/task-beacon-app-cursor/task-beacon-app/src/features/tasks/hooks/useRealtimeTaskUpdates.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app/task-beacon-app-cursor/task-beacon-app/src/features/tasks/hooks/useTaskAnimation.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app/task-beacon-app-cursor/task-beacon-app/src/features/tasks/hooks/useTaskCard.ts","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has a missing dependency: 'task'. Either include it or remove the dependency array.","line":50,"column":6,"nodeType":"ArrayExpression","endLine":50,"endColumn":43,"suggestions":[{"desc":"Update the dependencies array to be: [toggleTaskPin, task]","fix":{"range":[1778,1815],"text":"[toggleTaskPin, task]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useRef, useCallback, useMemo } from 'react';\nimport { Task } from '@/types';\nimport { useTaskUIContext } from '@/features/tasks/context/TaskUIContext';\nimport { useTaskAnimation } from '@/features/tasks/hooks/useTaskAnimation';\nimport { useTaskMutations } from './useTaskMutations';\nimport { toast } from '@/lib/toast';\n\n/**\n * Custom hook for TaskCard functionality\n *\n * Provides task card state management, expansion handling, and pin toggling functionality\n *\n * @param task - The task data to display in the card\n * @returns Object containing refs, state, and handlers for the TaskCard component\n */\nexport function useTaskCard(task: Task) {\n  const { toggleTaskPin } = useTaskMutations();\n  const { expandedTaskId, setExpandedTaskId } = useTaskUIContext();\n  const contentRef = useRef<HTMLDivElement>(null);\n  const cardRef = useRef<HTMLDivElement>(null);\n\n  // Memoize expansion state to prevent unnecessary recalculations\n  const isExpanded = useMemo(\n    () => expandedTaskId === task.id,\n    [expandedTaskId, task.id]\n  );\n\n  // Custom hook for task animations\n  const { animationState } = useTaskAnimation(contentRef, isExpanded);\n\n  /**\n   * Toggle the expanded state of the task card\n   * Optimized: Only recreate when necessary dependencies change\n   */\n  const toggleExpand = useCallback(() => {\n    setExpandedTaskId(isExpanded ? null : task.id);\n  }, [setExpandedTaskId, isExpanded, task.id]);\n\n  /**\n   * Toggle the pinned state of the task\n   * Optimized: Only recreate when task.id or task.pinned changes\n   */\n  const handleTogglePin = useCallback(async () => {\n    const result = await toggleTaskPin(task);\n    if (result.success) {\n      toast.success(result.message);\n    } else if (result.error) {\n      toast.error(result.message);\n    }\n  }, [toggleTaskPin, task.id, task.pinned]);\n\n  // Memoize the return object to prevent unnecessary re-renders\n  return useMemo(\n    () => ({\n      contentRef,\n      cardRef,\n      isExpanded,\n      animationState,\n      toggleExpand,\n      handleTogglePin,\n    }),\n    [isExpanded, animationState, toggleExpand, handleTogglePin]\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app/task-beacon-app-cursor/task-beacon-app/src/features/tasks/hooks/useTaskDetails.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app/task-beacon-app-cursor/task-beacon-app/src/features/tasks/hooks/useTaskError.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app/task-beacon-app-cursor/task-beacon-app/src/features/tasks/hooks/useTaskForm.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app/task-beacon-app-cursor/task-beacon-app/src/features/tasks/hooks/useTaskFormState.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app/task-beacon-app-cursor/task-beacon-app/src/features/tasks/hooks/useTaskFormValidation.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":19,"column":12,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":19,"endColumn":15,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[658,661],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[658,661],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useCallback } from 'react';\nimport { useObjectValidation, useFieldValidation } from '@/hooks/useValidation';\nimport { createTaskSchema } from '@/features/tasks/schemas/taskSchema';\nimport { createTextSchema } from '@/schemas/commonValidation';\n\n/**\n * Standardized task form validation hook\n *\n * Provides consistent validation patterns for all task forms using Zod schemas\n */\nexport function useTaskFormValidation() {\n  const { validateWithError } = useObjectValidation();\n  const { validateField } = useFieldValidation();\n\n  /**\n   * Validate complete task form data using the task schema\n   */\n  const validateTaskForm = useCallback(\n    (data: any) => {\n      return validateWithError(createTaskSchema, data);\n    },\n    [validateWithError]\n  );\n\n  /**\n   * Validate title with character limit\n   */\n  const validateTitle = useCallback(\n    (value: string): boolean => {\n      const titleSchema = createTextSchema(1, 22, true);\n      const result = validateField(titleSchema, value, 'title');\n      return result.isValid;\n    },\n    [validateField]\n  );\n\n  /**\n   * Create a title setter with validation and character limit enforcement\n   */\n  const createTitleSetter = useCallback((setTitle: (value: string) => void) => {\n    return (value: string) => {\n      if (value.length <= 22) {\n        setTitle(value);\n      }\n    };\n  }, []);\n\n  return {\n    validateTaskForm,\n    validateTitle,\n    createTitleSetter,\n  };\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app/task-beacon-app-cursor/task-beacon-app/src/features/tasks/hooks/useTaskMutations.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":25,"column":46,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":25,"endColumn":49,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[780,783],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[780,783],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":25,"column":67,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":25,"endColumn":70,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[801,804],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[801,804],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":26,"column":69,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":26,"endColumn":72,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[879,882],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[879,882],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":32,"column":45,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":32,"endColumn":48,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1060,1063],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1060,1063],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":34,"column":39,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":34,"endColumn":42,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1132,1135],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1132,1135],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":46,"column":49,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":46,"endColumn":52,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1437,1440],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1437,1440],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":85,"column":23,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":85,"endColumn":26,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2412,2415],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2412,2415],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":129,"column":23,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":129,"endColumn":26,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3560,3563],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3560,3563],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":152,"column":40,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":152,"endColumn":43,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4211,4214],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4211,4214],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":165,"column":23,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":165,"endColumn":26,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4608,4611],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4608,4611],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":10,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useCallback } from 'react';\nimport { useQueryClient } from '@tanstack/react-query';\nimport { Task } from '@/types';\nimport {\n  updateTaskStatus,\n  toggleTaskPin as apiToggleTaskPin,\n  createFollowUpTask as apiCreateFollowUpTask,\n} from '@/integrations/supabase/api/tasks.api';\n\n/**\n * Consolidated hook for all task mutation operations\n *\n * Single source of truth for task mutations with consistent error handling,\n * optimistic updates, and user feedback.\n *\n * UI side effects (toasts, notifications) are now handled by the UI layer.\n */\nexport function useTaskMutations() {\n  const queryClient = useQueryClient();\n\n  /**\n   * Optimistically update a task in the cache\n   */\n  const updateTaskOptimistically = useCallback(\n    (taskId: string, updates: Record<string, any>, fallbackData?: any) => {\n      queryClient.setQueriesData({ queryKey: ['tasks'] }, (oldData: any) => {\n        if (!oldData) return fallbackData || oldData;\n\n        if (oldData.pages) {\n          return {\n            ...oldData,\n            pages: oldData.pages.map((page: any) => ({\n              ...page,\n              data: page.data.map((t: any) =>\n                t.id === taskId ? { ...t, ...updates } : t\n              ),\n            })),\n          };\n        }\n\n        const newData = oldData.data\n          ? {\n              ...oldData,\n              data: {\n                ...oldData.data,\n                data: oldData.data.data.map((t: any) =>\n                  t.id === taskId ? { ...t, ...updates } : t\n                ),\n              },\n            }\n          : oldData;\n\n        return newData;\n      });\n    },\n    [queryClient]\n  );\n\n  /**\n   * Toggle task completion status\n   */\n  const toggleTaskComplete = useCallback(\n    async (task: Task) => {\n      const newStatus = task.status === 'complete' ? 'pending' : 'complete';\n      const previousData = queryClient.getQueryData([\n        'tasks',\n        undefined,\n        undefined,\n      ]);\n\n      try {\n        updateTaskOptimistically(task.id, { status: newStatus });\n\n        const { error } = await updateTaskStatus(task.id, newStatus);\n        if (error) throw error;\n\n        // UI layer should handle haptic feedback, toast, and browser notification\n        return {\n          success: true,\n          error: null,\n          message: `Task marked ${newStatus}`,\n          status: newStatus,\n          task,\n        };\n      } catch (error: any) {\n        updateTaskOptimistically(\n          task.id,\n          { status: task.status },\n          previousData\n        );\n\n        return {\n          success: false,\n          error: error instanceof Error ? error.message : 'Failed to update task',\n          message: `Failed to update task: ${error instanceof Error ? error.message : ''}`,\n          status: task.status,\n          task,\n        };\n      }\n    },\n    [updateTaskOptimistically, queryClient]\n  );\n\n  /**\n   * Toggle task pin status\n   */\n  const toggleTaskPin = useCallback(\n    async (task: Task) => {\n      const newPinnedState = !task.pinned;\n      const previousData = queryClient.getQueryData([\n        'tasks',\n        undefined,\n        undefined,\n      ]);\n\n      try {\n        updateTaskOptimistically(task.id, { pinned: newPinnedState });\n\n        const { error } = await apiToggleTaskPin(task.id, newPinnedState);\n        if (error) throw error;\n\n        return {\n          success: true,\n          error: null,\n          message: `Task ${newPinnedState ? 'pinned' : 'unpinned'}`,\n          pinned: newPinnedState,\n          task,\n        };\n      } catch (error: any) {\n        updateTaskOptimistically(\n          task.id,\n          { pinned: task.pinned },\n          previousData\n        );\n\n        return {\n          success: false,\n          error: error instanceof Error ? error.message : `Failed to ${newPinnedState ? 'pin' : 'unpin'} task`,\n          message: `Failed to ${newPinnedState ? 'pin' : 'unpin'} task: ${error instanceof Error ? error.message : ''}`,\n          pinned: task.pinned,\n          task,\n        };\n      }\n    },\n    [updateTaskOptimistically, queryClient]\n  );\n\n  /**\n   * Create a follow-up task\n   */\n  const createFollowUpTask = useCallback(\n    async (parentTask: Task, taskData: any) => {\n      try {\n        const { error } = await apiCreateFollowUpTask(parentTask.id, taskData);\n        if (error) throw error;\n\n        queryClient.invalidateQueries({ queryKey: ['tasks'] });\n        return {\n          success: true,\n          error: null,\n          message: 'Follow-up task created successfully',\n          parentTask,\n          taskData,\n        };\n      } catch (error: any) {\n        return {\n          success: false,\n          error: error instanceof Error ? error.message : 'Failed to create follow-up task',\n          message: `Failed to create follow-up task: ${error instanceof Error ? error.message : ''}`,\n          parentTask,\n          taskData,\n        };\n      }\n    },\n    [queryClient]\n  );\n\n  return {\n    toggleTaskComplete,\n    toggleTaskPin,\n    createFollowUpTask,\n  };\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app/task-beacon-app-cursor/task-beacon-app/src/features/tasks/hooks/useTaskPhotoUpload.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app/task-beacon-app-cursor/task-beacon-app/src/features/tasks/hooks/useTaskQueries.ts","messages":[{"ruleId":"unused-imports/no-unused-imports","severity":2,"message":"'Task' is defined but never used.","line":4,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":4,"endColumn":14,"fix":{"range":[169,214],"text":""}}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":1,"fixableWarningCount":0,"source":"import { useQuery, useQueryClient } from '@tanstack/react-query';\nimport { getAllTasks } from '@/integrations/supabase/api/tasks.api';\nimport { useState } from 'react';\nimport { Task } from '@/types/shared.types';\nimport { useAuth } from '@/contexts/AuthContext';\n\n/**\n * Custom hook for paginated task queries with real database integration\n *\n * @param pageSize Number of tasks to fetch per page\n * @returns Object containing tasks array, loading state, pagination controls and error\n */\nexport function useTaskQueries(pageSize = 10) {\n  const [currentPage, setCurrentPage] = useState(1);\n  const queryClient = useQueryClient();\n  const { user, session } = useAuth();\n\n  // Fetch tasks with database-level pagination - only if user is authenticated\n  const {\n    data: response,\n    isLoading,\n    error,\n    isFetching,\n  } = useQuery({\n    queryKey: ['tasks', currentPage, pageSize, user?.id],\n    queryFn: () => getAllTasks(currentPage, pageSize),\n    staleTime: 5 * 60 * 1000, // 5 minutes\n    enabled: !!user && !!session, // Only run query if user is authenticated\n    retry: 2, // Retry failed requests twice\n    refetchOnWindowFocus: false, // Don't refetch on window focus\n  });\n\n  // Determine if we have a next page\n  const hasNextPage = response?.data?.hasNextPage || false;\n\n  // Prefetch next page if available and user is authenticated\n  if (hasNextPage && user && session && !isLoading) {\n    queryClient.prefetchQuery({\n      queryKey: ['tasks', currentPage + 1, pageSize, user.id],\n      queryFn: () => getAllTasks(currentPage + 1, pageSize),\n      staleTime: 5 * 60 * 1000,\n    });\n  }\n\n  return {\n    tasks: response?.data?.data || [],\n    totalCount: response?.data?.totalCount || 0,\n    currentPage,\n    pageSize,\n    hasNextPage,\n    hasPreviousPage: currentPage > 1,\n    goToNextPage: () => setCurrentPage((old) => old + 1),\n    goToPreviousPage: () => setCurrentPage((old) => Math.max(1, old - 1)),\n    isLoading,\n    isFetching,\n    error: error || response?.error || null,\n  };\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app/task-beacon-app-cursor/task-beacon-app/src/features/tasks/hooks/useTaskRealtime.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app/task-beacon-app-cursor/task-beacon-app/src/features/tasks/hooks/useTaskValidation.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":14,"column":32,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":14,"endColumn":35,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[405,408],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[405,408],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useCallback } from 'react';\nimport { useTaskFormValidation } from './useTaskFormValidation';\n\n/**\n * Task form validation hook\n *\n * Provides validation functions specifically for task forms\n */\nexport function useTaskValidation() {\n  const { validateTitle, createTitleSetter, validateTaskForm } =\n    useTaskFormValidation();\n\n  const validateField = useCallback(\n    (fieldName: string, value: any) => {\n      switch (fieldName) {\n        case 'title':\n          return validateTitle(value);\n        default:\n          return true;\n      }\n    },\n    [validateTitle]\n  );\n\n  return {\n    validateTitle,\n    validateTaskForm,\n    validateField,\n    createTitleSetter,\n  };\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app/task-beacon-app-cursor/task-beacon-app/src/features/tasks/schemas/taskSchema.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app/task-beacon-app-cursor/task-beacon-app/src/features/tasks/types.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app/task-beacon-app-cursor/task-beacon-app/src/features/tasks/types/navigator.d.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app/task-beacon-app-cursor/task-beacon-app/src/features/tasks/types/task-api.types.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app/task-beacon-app-cursor/task-beacon-app/src/features/tasks/types/task-form.types.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app/task-beacon-app-cursor/task-beacon-app/src/features/tasks/types/task-ui.types.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app/task-beacon-app-cursor/task-beacon-app/src/features/tasks/utils/taskCardStyles.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app/task-beacon-app-cursor/task-beacon-app/src/features/tasks/utils/taskUiUtils.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app/task-beacon-app-cursor/task-beacon-app/src/features/users/components/EnhancedUserSearch.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app/task-beacon-app-cursor/task-beacon-app/src/features/users/components/UserProfile.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app/task-beacon-app-cursor/task-beacon-app/src/features/users/components/UserSearchInput.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app/task-beacon-app-cursor/task-beacon-app/src/features/users/components/UserSelect.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app/task-beacon-app-cursor/task-beacon-app/src/features/users/components/preferences/NotificationPreferences.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app/task-beacon-app-cursor/task-beacon-app/src/features/users/hooks/useUserFilter.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app/task-beacon-app-cursor/task-beacon-app/src/features/users/hooks/useUserFilter.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app/task-beacon-app-cursor/task-beacon-app/src/features/users/hooks/useUserList.test.ts","messages":[{"ruleId":"unused-imports/no-unused-imports","severity":2,"message":"'act' is defined but never used.","line":1,"column":22,"nodeType":null,"messageId":"unusedVar","endLine":1,"endColumn":25,"fix":{"range":[19,24],"text":""}}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":1,"fixableWarningCount":0,"source":"import { renderHook, act } from '@testing-library/react-hooks';\nimport { useUserList } from './useUserList';\nimport * as api from '@/integrations/supabase/api/users.api';\n\ndescribe('useUserList', () => {\n  it('fetches users successfully', async () => {\n    const users = [{ id: '1', email: 'a@test.com' }];\n    vi.spyOn(api, 'getAllUsers').mockResolvedValue({ data: users, error: null });\n    const { result, waitForNextUpdate } = renderHook(() => useUserList());\n    await waitForNextUpdate();\n    expect(result.current.users).toEqual(users);\n    expect(result.current.loading).toBe(false);\n    expect(result.current.error).toBeNull();\n  });\n\n  it('handles fetch error', async () => {\n    vi.spyOn(api, 'getAllUsers').mockResolvedValue({ data: null, error: new Error('fail') });\n    const { result, waitForNextUpdate } = renderHook(() => useUserList());\n    await waitForNextUpdate();\n    expect(result.current.users).toEqual([]);\n    expect(result.current.loading).toBe(false);\n    expect(result.current.error).toBe('fail');\n  });\n}); ","usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app/task-beacon-app-cursor/task-beacon-app/src/features/users/hooks/useUserList.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app/task-beacon-app-cursor/task-beacon-app/src/features/users/hooks/useUserProfile.ts","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'fetchProfile'. Either include it or remove the dependency array.","line":56,"column":6,"nodeType":"ArrayExpression","endLine":56,"endColumn":20,"suggestions":[{"desc":"Update the dependencies array to be: [fetchProfile, targetUserId]","fix":{"range":[1454,1468],"text":"[fetchProfile, targetUserId]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useState, useEffect } from 'react';\nimport { useAuth } from '@/contexts/AuthContext';\nimport { getUserById } from '@/integrations/supabase/api/users.api';\nimport { User } from '@/types/shared.types';\nimport { toast } from '@/lib/toast';\n\ninterface UseUserProfileReturn {\n  profile: User | null;\n  loading: boolean;\n  error: string | null;\n  refreshProfile: () => Promise<void>;\n}\n\n/**\n * Hook for fetching and managing user profile data\n */\nexport function useUserProfile(userId?: string): UseUserProfileReturn {\n  const { user } = useAuth();\n  const [profile, setProfile] = useState<User | null>(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n\n  const targetUserId = userId || user?.id;\n\n  const fetchProfile = async () => {\n    if (!targetUserId) {\n      setError('No user ID provided');\n      setLoading(false);\n      return;\n    }\n\n    setLoading(true);\n    setError(null);\n\n    try {\n      const { data, error } = await getUserById(targetUserId);\n\n      if (error) throw error;\n      setProfile(data);\n    } catch (error: unknown) {\n      const errorMessage =\n        error instanceof Error ? error.message : 'Failed to fetch user profile';\n      setError(errorMessage);\n      toast.error(errorMessage);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const refreshProfile = async () => {\n    await fetchProfile();\n  };\n\n  useEffect(() => {\n    fetchProfile();\n  }, [targetUserId]);\n\n  return {\n    profile,\n    loading,\n    error,\n    refreshProfile,\n  };\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app/task-beacon-app-cursor/task-beacon-app/src/features/users/hooks/useUserSearch.ts","messages":[{"ruleId":"unused-imports/no-unused-imports","severity":2,"message":"'User' is defined but never used.","line":4,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":4,"endColumn":14,"fix":{"range":[128,174],"text":"\n"}},{"ruleId":null,"message":"Unused eslint-disable directive (no problems were reported from 'no-console').","line":15,"column":5,"severity":1,"nodeType":null,"fix":{"range":[532,570],"text":" "}}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":1,"fixableWarningCount":1,"source":"import { useState } from 'react';\nimport { useUserList } from './useUserList';\nimport { useUserFilter } from './useUserFilter';\nimport { User } from '@/types/shared.types';\n\n/**\n * @deprecated Use useUserList and useUserFilter instead.\n */\nexport function useUserSearch(limitResults = 10) {\n  const [searchTerm, setSearchTerm] = useState('');\n  const { users, loading, error, refreshUsers } = useUserList();\n  const filteredUsers = useUserFilter(users, searchTerm, limitResults);\n\n  if (process.env.NODE_ENV !== 'production') {\n    // eslint-disable-next-line no-console\n    console.warn('useUserSearch is deprecated. Use useUserList and useUserFilter instead.');\n  }\n\n  return {\n    users,\n    filteredUsers,\n    loading,\n    error,\n    searchTerm,\n    setSearchTerm,\n    refreshUsers,\n  };\n}\n\nexport { useUserList };\nexport { useUserFilter };\n","usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app/task-beacon-app-cursor/task-beacon-app/src/features/users/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app/task-beacon-app-cursor/task-beacon-app/src/hooks/dataValidationUtils.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app/task-beacon-app-cursor/task-beacon-app/src/hooks/use-mobile.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app/task-beacon-app-cursor/task-beacon-app/src/hooks/use-toast.tsx","messages":[{"ruleId":"unused-imports/no-unused-vars","severity":2,"message":"'actionTypes' is assigned a value but only used as a type.","line":15,"column":7,"nodeType":null,"messageId":"usedOnlyAsType","endLine":15,"endColumn":18}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import * as React from 'react';\n\nimport type { ToastActionElement, ToastProps } from '@/components/ui/toast';\n\nconst TOAST_LIMIT = 5;\nconst TOAST_REMOVE_DELAY = 1000000;\n\ntype ToasterToast = ToastProps & {\n  id: string;\n  title?: React.ReactNode;\n  description?: React.ReactNode;\n  action?: ToastActionElement;\n};\n\nconst actionTypes = {\n  ADD_TOAST: 'ADD_TOAST',\n  UPDATE_TOAST: 'UPDATE_TOAST',\n  DISMISS_TOAST: 'DISMISS_TOAST',\n  REMOVE_TOAST: 'REMOVE_TOAST',\n} as const;\n\nlet count = 0;\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_VALUE;\n  return count.toString();\n}\n\ntype ActionType = typeof actionTypes;\n\ntype Action =\n  | {\n      type: ActionType['ADD_TOAST'];\n      toast: ToasterToast;\n    }\n  | {\n      type: ActionType['UPDATE_TOAST'];\n      toast: Partial<ToasterToast>;\n    }\n  | {\n      type: ActionType['DISMISS_TOAST'];\n      toastId?: ToasterToast['id'];\n    }\n  | {\n      type: ActionType['REMOVE_TOAST'];\n      toastId?: ToasterToast['id'];\n    };\n\ninterface State {\n  toasts: ToasterToast[];\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>();\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return;\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId);\n    dispatch({\n      type: 'REMOVE_TOAST',\n      toastId: toastId,\n    });\n  }, TOAST_REMOVE_DELAY);\n\n  toastTimeouts.set(toastId, timeout);\n};\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case 'ADD_TOAST':\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      };\n\n    case 'UPDATE_TOAST':\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      };\n\n    case 'DISMISS_TOAST': {\n      const { toastId } = action;\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action\n      if (toastId) {\n        addToRemoveQueue(toastId);\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id);\n        });\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      };\n    }\n    case 'REMOVE_TOAST':\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        };\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      };\n  }\n};\n\nconst listeners: Array<(state: State) => void> = [];\n\nlet memoryState: State = { toasts: [] };\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action);\n  listeners.forEach((listener) => {\n    listener(memoryState);\n  });\n}\n\ntype Toast = Omit<ToasterToast, 'id'>;\n\nfunction toast({ ...props }: Toast) {\n  const id = genId();\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: 'UPDATE_TOAST',\n      toast: { ...props, id },\n    });\n  const dismiss = () => dispatch({ type: 'DISMISS_TOAST', toastId: id });\n\n  dispatch({\n    type: 'ADD_TOAST',\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss();\n      },\n    },\n  });\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  };\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState);\n\n  React.useEffect(() => {\n    listeners.push(setState);\n    return () => {\n      const index = listeners.indexOf(setState);\n      if (index > -1) {\n        listeners.splice(index, 1);\n      }\n    };\n  }, [state]);\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: 'DISMISS_TOAST', toastId }),\n  };\n}\n\ntoast.dismiss = (toastId?: string) => {\n  dispatch({ type: 'DISMISS_TOAST', toastId });\n};\n\ntoast.success = (message: string) => {\n  toast({ title: 'Success', description: message, variant: 'default' });\n};\n\ntoast.error = (message: string) => {\n  toast({ title: 'Error', description: message, variant: 'destructive' });\n};\n\nexport { useToast, toast };\n","usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app/task-beacon-app-cursor/task-beacon-app/src/hooks/useDataValidation.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app/task-beacon-app-cursor/task-beacon-app/src/hooks/useMobileViewport.ts","messages":[{"ruleId":"unused-imports/no-unused-vars","severity":2,"message":"'initialHeight' is assigned a value but never used.","line":23,"column":11,"nodeType":null,"messageId":"unusedVar","endLine":23,"endColumn":24}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useState, useEffect } from 'react';\n\ninterface MobileViewportState {\n  keyboardVisible: boolean;\n  viewportHeight: number;\n  availableHeight: number;\n  keyboardHeight: number;\n  safeAreaTop: number;\n  safeAreaBottom: number;\n}\n\nexport function useMobileViewport(): MobileViewportState {\n  const [state, setState] = useState<MobileViewportState>({\n    keyboardVisible: false,\n    viewportHeight: window.innerHeight,\n    availableHeight: window.innerHeight,\n    keyboardHeight: 0,\n    safeAreaTop: 0,\n    safeAreaBottom: 0,\n  });\n\n  useEffect(() => {\n    const initialHeight = window.innerHeight;\n\n    const updateViewportState = () => {\n      const currentHeight = window.visualViewport?.height || window.innerHeight;\n      const screenHeight = window.innerHeight;\n      const keyboardHeight = Math.max(0, screenHeight - currentHeight);\n      const keyboardVisible = keyboardHeight > 150; // Threshold for keyboard detection\n\n      // Use the full visible viewport height\n      const availableHeight = currentHeight;\n\n      setState({\n        keyboardVisible,\n        viewportHeight: currentHeight,\n        availableHeight,\n        keyboardHeight,\n        safeAreaTop:\n          parseInt(\n            getComputedStyle(document.documentElement).getPropertyValue(\n              'env(safe-area-inset-top)'\n            )\n          ) || 0,\n        safeAreaBottom:\n          parseInt(\n            getComputedStyle(document.documentElement).getPropertyValue(\n              'env(safe-area-inset-bottom)'\n            )\n          ) || 0,\n      });\n    };\n\n    const handleResize = () => {\n      updateViewportState();\n    };\n\n    const handleVisualViewportChange = () => {\n      updateViewportState();\n    };\n\n    // Listen for viewport changes\n    window.addEventListener('resize', handleResize);\n    if (window.visualViewport) {\n      window.visualViewport.addEventListener(\n        'resize',\n        handleVisualViewportChange\n      );\n      window.visualViewport.addEventListener(\n        'scroll',\n        handleVisualViewportChange\n      );\n    }\n\n    // Initial setup\n    updateViewportState();\n\n    return () => {\n      window.removeEventListener('resize', handleResize);\n      if (window.visualViewport) {\n        window.visualViewport.removeEventListener(\n          'resize',\n          handleVisualViewportChange\n        );\n        window.visualViewport.removeEventListener(\n          'scroll',\n          handleVisualViewportChange\n        );\n      }\n    };\n  }, []);\n\n  return state;\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app/task-beacon-app-cursor/task-beacon-app/src/hooks/useMotionPreferences.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":41,"column":40,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":41,"endColumn":43,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1148,1151],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1148,1151],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":41,"column":60,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":41,"endColumn":63,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1168,1171],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1168,1171],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useState, useEffect } from 'react';\n\n/**\n * Hook to detect and manage user motion preferences\n *\n * @returns Object containing motion preference state and utilities\n */\nexport function useMotionPreferences() {\n  const [prefersReducedMotion, setPrefersReducedMotion] = useState(false);\n  const [isLoaded, setIsLoaded] = useState(false);\n\n  useEffect(() => {\n    // Check if matchMedia is available (for SSR compatibility)\n    if (typeof window === 'undefined' || !window.matchMedia) {\n      setIsLoaded(true);\n      return;\n    }\n\n    const mediaQuery = window.matchMedia('(prefers-reduced-motion: reduce)');\n\n    // Set initial value\n    setPrefersReducedMotion(mediaQuery.matches);\n    setIsLoaded(true);\n\n    // Listen for changes\n    const handleChange = (event: MediaQueryListEvent) => {\n      setPrefersReducedMotion(event.matches);\n    };\n\n    mediaQuery.addEventListener('change', handleChange);\n\n    return () => {\n      mediaQuery.removeEventListener('change', handleChange);\n    };\n  }, []);\n\n  return {\n    prefersReducedMotion,\n    isLoaded,\n    shouldReduceMotion: prefersReducedMotion,\n    getAnimationConfig: (normalConfig: any, reducedConfig: any) =>\n      prefersReducedMotion ? reducedConfig : normalConfig,\n  };\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app/task-beacon-app-cursor/task-beacon-app/src/hooks/usePerformanceMonitoring.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app/task-beacon-app-cursor/task-beacon-app/src/hooks/useProfileValidation.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app/task-beacon-app-cursor/task-beacon-app/src/hooks/useProfileValidation.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app/task-beacon-app-cursor/task-beacon-app/src/hooks/useRealtimeEntity.ts","messages":[{"ruleId":"unused-imports/no-unused-vars","severity":2,"message":"'entityName' is assigned a value but never used.","line":26,"column":5,"nodeType":null,"messageId":"unusedVar","endLine":26,"endColumn":15},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":38,"column":31,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":38,"endColumn":34,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1266,1269],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1266,1269],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":40,"column":52,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":40,"endColumn":55,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1330,1333],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1330,1333],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":56,"column":52,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":56,"endColumn":55,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2162,2165],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2162,2165],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"unused-imports/no-unused-vars","severity":2,"message":"'isOwnedByCurrentUser' is assigned a value but never used.","line":60,"column":11,"nodeType":null,"messageId":"unusedVar","endLine":60,"endColumn":31},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":78,"column":52,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":78,"endColumn":55,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3251,3254],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3251,3254],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has a missing dependency: 'user?.id'. Either include it or remove the dependency array.","line":84,"column":6,"nodeType":"ArrayExpression","endLine":84,"endColumn":39,"suggestions":[{"desc":"Update the dependencies array to be: [getUserId, onDeleteNotification, user?.id]","fix":{"range":[3529,3562],"text":"[getUserId, onDeleteNotification, user?.id]"}}]}],"suppressedMessages":[],"errorCount":6,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useCallback, useRef } from 'react';\nimport { useRealtimeSubscription } from './useRealtimeSubscription';\nimport { useAuth } from '@/contexts/AuthContext';\n\ninterface RealtimeEntityConfig<T> {\n  table: string;\n  entityName: string;\n  getUserId?: (entity: T) => string | null;\n  getOwnerId?: (entity: T) => string | null;\n  getTitle?: (entity: T) => string;\n  onInsertNotification?: (entity: T, isForCurrentUser: boolean) => void;\n  onUpdateNotification?: (oldEntity: T, newEntity: T, isForCurrentUser: boolean) => void;\n  onDeleteNotification?: (entity: T, isForCurrentUser: boolean) => void;\n  // New callbacks for UI feedback\n  onUserAssigned?: (event: { entity: T; title: string }) => void;\n  onAssignmentChanged?: (event: { oldEntity: T; newEntity: T; title: string }) => void;\n}\n\n/**\n * Generalized hook for real-time entity updates with notifications\n */\nexport function useRealtimeEntity<T>(config: RealtimeEntityConfig<T>) {\n  const { user } = useAuth();\n  const {\n    table,\n    entityName,\n    getUserId,\n    getOwnerId,\n    getTitle,\n    onInsertNotification,\n    onUpdateNotification,\n    onDeleteNotification,\n    onUserAssigned,\n    onAssignmentChanged,\n  } = config;\n\n  // Store the last event for UI observation\n  const lastEventRef = useRef<any>(null);\n\n  const handleEntityInsert = useCallback((payload: any) => {\n    const newEntity = payload.new as T;\n    const isForCurrentUser = getUserId ? getUserId(newEntity) === user?.id : false;\n    const isOwnedByCurrentUser = getOwnerId ? getOwnerId(newEntity) === user?.id : false;\n    \n    // Notify UI for entities assigned to current user but not owned by them\n    if (isForCurrentUser && !isOwnedByCurrentUser) {\n      const title = getTitle ? getTitle(newEntity) : 'New item';\n      lastEventRef.current = { type: 'userAssigned', entity: newEntity, title };\n      onUserAssigned?.({ entity: newEntity, title });\n    }\n    \n    onInsertNotification?.(newEntity, isForCurrentUser);\n    // console.log(`📝 New ${entityName} created:`, newEntity);\n  }, [user?.id, getUserId, getOwnerId, getTitle, onInsertNotification, onUserAssigned]);\n\n  const handleEntityUpdate = useCallback((payload: any) => {\n    const updatedEntity = payload.new as T;\n    const oldEntity = payload.old as T;\n    const isForCurrentUser = getUserId ? getUserId(updatedEntity) === user?.id : false;\n    const isOwnedByCurrentUser = getOwnerId ? getOwnerId(updatedEntity) === user?.id : false;\n\n    // Handle assignment changes\n    if (getUserId && getOwnerId) {\n      const oldUserId = getUserId(oldEntity);\n      const newUserId = getUserId(updatedEntity);\n      \n      if (oldUserId !== newUserId && newUserId === user?.id) {\n        const title = getTitle ? getTitle(updatedEntity) : 'Item';\n        lastEventRef.current = { type: 'assignmentChanged', oldEntity, newEntity: updatedEntity, title };\n        onAssignmentChanged?.({ oldEntity, newEntity: updatedEntity, title });\n      }\n    }\n    \n    onUpdateNotification?.(oldEntity, updatedEntity, isForCurrentUser);\n    // console.log(`📝 ${entityName} updated:`, { old: oldEntity, new: updatedEntity });\n  }, [user?.id, getUserId, getOwnerId, getTitle, onUpdateNotification, onAssignmentChanged]);\n\n  const handleEntityDelete = useCallback((payload: any) => {\n    const deletedEntity = payload.old as T;\n    const isForCurrentUser = getUserId ? getUserId(deletedEntity) === user?.id : false;\n    \n    onDeleteNotification?.(deletedEntity, isForCurrentUser);\n    // console.log(`🗑️ ${entityName} deleted:`, deletedEntity);\n  }, [getUserId, onDeleteNotification]);\n\n  const { isSubscribed } = useRealtimeSubscription({\n    table,\n    onInsert: handleEntityInsert,\n    onUpdate: handleEntityUpdate,\n    onDelete: handleEntityDelete,\n    invalidateQueries: [table],\n  });\n\n  return {\n    isSubscribed,\n    lastEvent: lastEventRef.current,\n  };\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app/task-beacon-app-cursor/task-beacon-app/src/hooks/useRealtimeSubscription.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":11,"column":24,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":11,"endColumn":27,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[367,370],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[367,370],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":12,"column":24,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":12,"endColumn":27,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[404,407],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[404,407],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":13,"column":24,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":13,"endColumn":27,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[441,444],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[441,444],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":31,"column":29,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":31,"endColumn":32,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[854,857],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[854,857],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":52,"column":29,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":52,"endColumn":32,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1395,1398],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1395,1398],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'user'. Either include it or remove the dependency array.","line":113,"column":6,"nodeType":"ArrayExpression","endLine":113,"endColumn":100,"suggestions":[{"desc":"Update the dependencies array to be: [user.id, table, schema, event, onInsert, onUpdate, onDelete, queryClient, invalidateQueries, user]","fix":{"range":[3304,3398],"text":"[user.id, table, schema, event, onInsert, onUpdate, onDelete, queryClient, invalidateQueries, user]"}}]}],"suppressedMessages":[],"errorCount":5,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\nimport { useEffect, useRef, useState } from 'react';\nimport { supabase } from '@/integrations/supabase/client';\nimport { useQueryClient } from '@tanstack/react-query';\nimport { useAuth } from '@/contexts/AuthContext';\n\ninterface RealtimeSubscriptionOptions {\n  table: string;\n  schema?: string;\n  event?: 'INSERT' | 'UPDATE' | 'DELETE' | '*';\n  onInsert?: (payload: any) => void;\n  onUpdate?: (payload: any) => void;\n  onDelete?: (payload: any) => void;\n  invalidateQueries?: string[];\n}\n\n/**\n * Optimized hook for managing real-time subscriptions with proper cleanup\n */\nexport function useRealtimeSubscription({\n  table,\n  schema = 'public',\n  event = '*',\n  onInsert,\n  onUpdate,\n  onDelete,\n  invalidateQueries = [],\n}: RealtimeSubscriptionOptions) {\n  const queryClient = useQueryClient();\n  const { user } = useAuth();\n  const channelRef = useRef<any>(null);\n  const [isSubscribed, setIsSubscribed] = useState(false);\n\n  useEffect(() => {\n    // Only subscribe if user is authenticated\n    if (!user) {\n      setIsSubscribed(false);\n      return;\n    }\n\n    // Create unique channel name\n    const channelName = `realtime-${table}-${user.id}-${Date.now()}`;\n    \n    console.log(`🔄 Setting up real-time subscription for ${table}`);\n\n    try {\n      const channel = supabase\n        .channel(channelName)\n        .on(\n          'postgres_changes',\n          {\n            event: event as any,\n            schema,\n            table,\n          },\n          (payload) => {\n            console.log(`📡 Real-time update received for ${table}:`, payload);\n            \n            // Handle different event types\n            switch (payload.eventType) {\n              case 'INSERT':\n                onInsert?.(payload);\n                break;\n              case 'UPDATE':\n                onUpdate?.(payload);\n                break;\n              case 'DELETE':\n                onDelete?.(payload);\n                break;\n            }\n\n            // Invalidate specified queries to refresh data\n            if (invalidateQueries.length > 0) {\n              invalidateQueries.forEach(queryKey => {\n                queryClient.invalidateQueries({ queryKey: [queryKey] });\n              });\n            }\n          }\n        )\n        .subscribe((status) => {\n          console.log(`🎯 Subscription status for ${table}:`, status);\n          \n          if (status === 'SUBSCRIBED') {\n            setIsSubscribed(true);\n            console.log(`✅ Successfully subscribed to ${table} changes`);\n          } else if (status === 'CHANNEL_ERROR') {\n            console.error(`❌ Subscription error for ${table}`);\n            setIsSubscribed(false);\n          } else if (status === 'CLOSED') {\n            setIsSubscribed(false);\n          }\n        });\n\n      channelRef.current = channel;\n    } catch (error) {\n      console.error(`❌ Failed to set up real-time subscription for ${table}:`, error);\n      setIsSubscribed(false);\n    }\n\n    // Cleanup function\n    return () => {\n      console.log(`🧹 Cleaning up real-time subscription for ${table}`);\n      \n      if (channelRef.current) {\n        try {\n          supabase.removeChannel(channelRef.current);\n          setIsSubscribed(false);\n        } catch (error) {\n          console.error('Error cleaning up channel:', error);\n        }\n      }\n    };\n  }, [user?.id, table, schema, event, onInsert, onUpdate, onDelete, queryClient, invalidateQueries]);\n\n  return {\n    isSubscribed,\n    channel: channelRef.current,\n  };\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app/task-beacon-app-cursor/task-beacon-app/src/hooks/useTaskValidation.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app/task-beacon-app-cursor/task-beacon-app/src/hooks/useTaskValidation.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app/task-beacon-app-cursor/task-beacon-app/src/hooks/useValidation.ts","messages":[{"ruleId":"unused-imports/no-unused-imports","severity":2,"message":"'ValidationResult' is defined but never used.","line":3,"column":45,"nodeType":null,"messageId":"unusedVar","endLine":3,"endColumn":61,"fix":{"range":[105,123],"text":""}},{"ruleId":null,"message":"Unused eslint-disable directive (no problems were reported from 'no-console').","line":54,"column":5,"severity":1,"nodeType":null,"fix":{"range":[1438,1476],"text":" "}}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":1,"fixableWarningCount":1,"source":"import { useCallback } from 'react';\nimport { z } from 'zod';\nimport { validateObject, validateWithError, ValidationResult, ValidationOptions } from './validationUtils';\n\n// Object validation hook\nexport function useObjectValidation() {\n  return {\n    validate: validateObject,\n    validateWithError,\n  };\n}\n\n// Field validation hook\nexport function useFieldValidation() {\n  const validateField = useCallback(\n    <T>(\n      schema: z.ZodSchema<T>,\n      value: unknown,\n      fieldName: string,\n      options: ValidationOptions = {}\n    ): { isValid: boolean; error?: string } => {\n      const result = validateObject(schema, { [fieldName]: value }, options);\n      return {\n        isValid: result.isValid,\n        error: result.errors[fieldName],\n      };\n    },\n    []\n  );\n\n  const createFieldValidator = useCallback(\n    <T>(schema: z.ZodSchema<T>, options: ValidationOptions = {}) => {\n      return (value: unknown, fieldName: string) => {\n        return validateField(schema, value, fieldName, options);\n      };\n    },\n    [validateField]\n  );\n\n  return {\n    validateField,\n    createFieldValidator,\n  };\n}\n\n// Deprecated: useValidation (for backward compatibility)\n/**\n * @deprecated Use useObjectValidation and useFieldValidation instead.\n */\nexport function useValidation() {\n  const objectValidation = useObjectValidation();\n  const fieldValidation = useFieldValidation();\n  if (process.env.NODE_ENV !== 'production') {\n    // eslint-disable-next-line no-console\n    console.warn('useValidation is deprecated. Use useObjectValidation and useFieldValidation instead.');\n  }\n  return {\n    ...objectValidation,\n    ...fieldValidation,\n  };\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app/task-beacon-app-cursor/task-beacon-app/src/hooks/validationUtils.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app/task-beacon-app-cursor/task-beacon-app/src/integrations/supabase/api/base.api.ts","messages":[{"ruleId":"unused-imports/no-unused-imports","severity":2,"message":"'handleApiError' is defined but never used.","line":3,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":3,"endColumn":24,"fix":{"range":[122,177],"text":"\n"}},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":25,"column":31,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":25,"endColumn":34,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[900,903],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[900,903],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":1,"fixableWarningCount":0,"source":"import { supabase } from '@/integrations/supabase/client';\nimport { ApiError, TablesResponse } from '../types/api.types';\nimport { handleApiError } from '@/lib/errorHandling';\n\n/**\n * Handles and normalizes errors from Supabase or other sources\n *\n * @param error - The error object from Supabase or other source\n * @returns A standardized ApiError object\n */\nexport const formatApiError = (error: unknown): ApiError => {\n  // Handle PostgrestError from Supabase\n  if (\n    typeof error === 'object' &&\n    error !== null &&\n    'code' in error &&\n    'message' in error\n  ) {\n    return {\n      name: 'ApiError', // Add name property to make compatible with Error interface\n      message: String(error.message),\n      code: String(error.code),\n      details: 'details' in error ? error.details : undefined,\n      hint: 'hint' in error ? String(error.hint) : undefined,\n      originalError: error as any,\n    };\n  }\n\n  // Handle standard Error objects\n  if (error instanceof Error) {\n    return {\n      name: error.name,\n      message: error.message,\n      originalError: error,\n    };\n  }\n\n  // Handle unknown error types\n  return {\n    name: 'UnknownError',\n    message: typeof error === 'string' ? error : 'An unknown error occurred',\n    details: error,\n  };\n};\n\n/**\n * Check if a user is authenticated and get their ID\n *\n * @returns A promise resolving to the authenticated user's ID\n * @throws Error if user is not authenticated\n */\nexport const getCurrentUserId = async (): Promise<string> => {\n  const {\n    data: { user },\n  } = await supabase.auth.getUser();\n  if (!user) throw new Error('User not authenticated');\n  return user.id;\n};\n\n/**\n * Wrapper for standardized error handling in async functions\n *\n * @param requestFn - The async function to execute\n * @returns A standardized TablesResponse with data or error\n */\nexport const apiRequest = async <T>(\n  requestFn: () => Promise<T>\n): Promise<TablesResponse<T>> => {\n  try {\n    const data = await requestFn();\n    return { data, error: null };\n  } catch (error) {\n    const formattedError = formatApiError(error);\n\n    // Log error to console for debugging\n    console.error('[API Error]:', formattedError);\n\n    return { data: null, error: formattedError };\n  }\n};\n","usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app/task-beacon-app-cursor/task-beacon-app/src/integrations/supabase/api/tasks.api.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app/task-beacon-app-cursor/task-beacon-app/src/integrations/supabase/api/users.api.ts","messages":[{"ruleId":"unused-imports/no-unused-imports","severity":2,"message":"'UserRow' is defined but never used.","line":3,"column":26,"nodeType":null,"messageId":"unusedVar","endLine":3,"endColumn":33,"fix":{"range":[123,132],"text":""}}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":1,"fixableWarningCount":0,"source":"import { supabase } from '@/integrations/supabase/client';\nimport { apiRequest } from './base.api';\nimport { TablesResponse, UserRow } from '@/types/api.types';\nimport { User } from '@/types/shared.types';\n\n/**\n * Fetches all users\n */\nexport const getAllUsers = async (): Promise<TablesResponse<User[]>> => {\n  return apiRequest(async () => {\n    const { data, error } = await supabase.from('profiles').select('*');\n\n    if (error) throw error;\n    return data as User[];\n  });\n};\n\n/**\n * Gets user by ID\n */\nexport const getUserById = async (\n  userId: string\n): Promise<TablesResponse<User>> => {\n  return apiRequest(async () => {\n    const { data, error } = await supabase\n      .from('profiles')\n      .select('*')\n      .eq('id', userId)\n      .single();\n\n    if (error) throw error;\n    return data as User;\n  });\n};\n\n/**\n * Gets the current authenticated user\n */\nexport const getCurrentUser = async (): Promise<TablesResponse<User>> => {\n  return apiRequest(async () => {\n    const {\n      data: { user },\n    } = await supabase.auth.getUser();\n    if (!user) throw new Error('No authenticated user');\n\n    const { data, error } = await supabase\n      .from('profiles')\n      .select('*')\n      .eq('id', user.id)\n      .single();\n\n    if (error) throw error;\n    return data as User;\n  });\n};\n","usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app/task-beacon-app-cursor/task-beacon-app/src/integrations/supabase/client.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app/task-beacon-app-cursor/task-beacon-app/src/integrations/supabase/types.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app/task-beacon-app-cursor/task-beacon-app/src/integrations/supabase/types/api.types.ts","messages":[{"ruleId":"unused-imports/no-unused-imports","severity":2,"message":"'Database' is defined but never used.","line":1,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":1,"endColumn":18,"fix":{"range":[0,58],"text":""}},{"ruleId":"unused-imports/no-unused-imports","severity":2,"message":"'PostgrestError' is defined but never used.","line":2,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":2,"endColumn":24,"fix":{"range":[58,115],"text":"\n"}}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":2,"fixableWarningCount":0,"source":"import { Database } from '@/integrations/supabase/types';\nimport { PostgrestError } from '@supabase/supabase-js';\n\n// Re-export centralized API types\nexport * from '@/types/api.types';\n\n// Legacy exports for backward compatibility\nexport type Tables = {\n  tasks: {\n    Row: {\n      id: string;\n      title: string;\n      description: string | null;\n      due_date: string | null;\n      photo_url: string | null;\n      url_link: string | null;\n      owner_id: string;\n      parent_task_id: string | null;\n      pinned: boolean;\n      status: 'pending' | 'complete' | 'overdue';\n      assignee_id: string | null;\n      created_at: string;\n      updated_at: string;\n    };\n  };\n  users: {\n    Row: {\n      id: string;\n      email: string;\n      name?: string;\n      avatar_url?: string;\n    };\n  };\n};\n","usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app/task-beacon-app-cursor/task-beacon-app/src/lib/animationUtils.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app/task-beacon-app-cursor/task-beacon-app/src/lib/badge-variants.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app/task-beacon-app-cursor/task-beacon-app/src/lib/button-variants.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app/task-beacon-app-cursor/task-beacon-app/src/lib/dataUtils.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app/task-beacon-app-cursor/task-beacon-app/src/lib/dateUtils.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app/task-beacon-app-cursor/task-beacon-app/src/lib/errorHandling.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":60,"column":23,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":60,"endColumn":26,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1623,1626],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1623,1626],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":63,"column":23,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":63,"endColumn":26,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1705,1708],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1705,1708],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":68,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":68,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1852,1855],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1852,1855],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":122,"column":55,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":122,"endColumn":58,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3209,3212],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3209,3212],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":122,"column":73,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":122,"endColumn":76,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3227,3230],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3227,3230],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":5,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { toast } from '@/hooks/use-toast';\nimport { ApiError } from '@/integrations/supabase/types/api.types';\n\n/**\n * Standardized error handling utilities for the application.\n *\n * These utilities provide consistent error handling patterns\n * across different parts of the application.\n */\n\n/**\n * Configuration for error handling\n */\nexport interface ErrorHandlingOptions {\n  showToast?: boolean;\n  logToConsole?: boolean;\n  rethrow?: boolean;\n}\n\nconst defaultOptions: ErrorHandlingOptions = {\n  showToast: true,\n  logToConsole: true,\n  rethrow: false,\n};\n\n/**\n * Process API errors in a standardized way\n *\n * @param error - The error to process\n * @param customMessage - Optional custom message to display instead of the error message\n * @param options - Error handling configuration options\n */\nexport const handleApiError = (\n  error: Error | ApiError | unknown,\n  customMessage?: string,\n  options: ErrorHandlingOptions = {}\n): Error => {\n  // Merge with default options\n  const opts = { ...defaultOptions, ...options };\n\n  let errorMessage = customMessage || 'An unexpected error occurred';\n  let errorObject: Error;\n\n  // Process different error types\n  if (error instanceof Error) {\n    errorMessage = customMessage || error.message;\n    errorObject = error;\n  } else if (\n    typeof error === 'object' &&\n    error !== null &&\n    'message' in error &&\n    typeof error.message === 'string'\n  ) {\n    // Handle API error objects\n    errorMessage = customMessage || error.message;\n    errorObject = new Error(errorMessage);\n\n    // Copy properties from ApiError\n    if ('code' in error) {\n      (errorObject as any).code = error.code;\n    }\n    if ('details' in error) {\n      (errorObject as any).details = error.details;\n    }\n  } else {\n    // Handle unexpected error types\n    errorObject = new Error(errorMessage);\n    (errorObject as any).originalError = error;\n  }\n\n  // Display error toast if enabled\n  if (opts.showToast) {\n    toast({\n      title: 'Error',\n      description: errorMessage,\n      variant: 'destructive',\n    });\n  }\n\n  // Log error to console if enabled\n  if (opts.logToConsole) {\n    console.error('[Error]:', errorMessage, errorObject);\n  }\n\n  // Rethrow if required\n  if (opts.rethrow) {\n    throw errorObject;\n  }\n\n  return errorObject;\n};\n\n/**\n * Utility to safely execute async functions with standardized error handling\n *\n * @param asyncFn - The async function to execute\n * @param errorMessage - Optional custom error message\n * @param options - Error handling options\n * @returns Promise resolving to the function result or null if there was an error\n */\nexport async function safeAsync<T>(\n  asyncFn: () => Promise<T>,\n  errorMessage?: string,\n  options?: ErrorHandlingOptions\n): Promise<T | null> {\n  try {\n    return await asyncFn();\n  } catch (error) {\n    handleApiError(error, errorMessage, options);\n    return null;\n  }\n}\n\n/**\n * Higher-order function that wraps an async function with error handling\n *\n * @param fn - The async function to wrap\n * @param errorMessage - Optional custom error message\n * @param options - Error handling options\n * @returns A wrapped function with error handling\n */\nexport function withErrorHandling<T extends (...args: any[]) => Promise<any>>(\n  fn: T,\n  errorMessage?: string,\n  options?: ErrorHandlingOptions\n): (...args: Parameters<T>) => Promise<ReturnType<T> | null> {\n  return async (...args: Parameters<T>): Promise<ReturnType<T> | null> => {\n    try {\n      return await fn(...args);\n    } catch (error) {\n      handleApiError(error, errorMessage, options);\n      return null;\n    }\n  };\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app/task-beacon-app-cursor/task-beacon-app/src/lib/formatUtils.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app/task-beacon-app-cursor/task-beacon-app/src/lib/imageUtils.ts","messages":[{"ruleId":"unused-imports/no-unused-vars","severity":2,"message":"'e' is defined but never used.","line":143,"column":12,"nodeType":null,"messageId":"unusedVar","endLine":143,"endColumn":13}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Compresses and resizes a photo for upload using a Web Worker\n *\n * This utility function takes a File object (image), sends it to a Web Worker for processing,\n * which compresses it and resizes it to reduce file size while maintaining reasonable quality.\n * This implementation prevents blocking the main thread during image processing.\n *\n * @param file - The image File object to process\n * @param maxWidth - Maximum width of the processed image (default: 1200px)\n * @param maxHeight - Maximum height of the processed image (default: 1200px)\n * @param quality - JPEG compression quality (0-1, default: 0.85)\n * @returns A Promise that resolves to a processed File object\n */\nexport async function compressAndResizePhoto(\n  file: File,\n  maxWidth = 1200,\n  maxHeight = 1200,\n  quality = 0.85\n): Promise<File> {\n  return new Promise((resolve, reject) => {\n    // Create a worker only when needed\n    const worker = new Worker(\n      new URL('../workers/imageProcessorWorker.js', import.meta.url),\n      { type: 'module' }\n    );\n\n    // Handle the worker response\n    worker.onmessage = (event) => {\n      // Terminate worker after use\n      worker.terminate();\n\n      if (event.data.success) {\n        // Convert blob back to File object with original name\n        const processedFile = new File([event.data.processedFile], file.name, {\n          type: 'image/jpeg',\n          lastModified: Date.now(),\n        });\n\n        resolve(processedFile);\n      } else {\n        reject(new Error(event.data.error || 'Image processing failed'));\n      }\n    };\n\n    // Handle worker errors\n    worker.onerror = (error) => {\n      worker.terminate();\n      reject(new Error('Worker error: ' + error.message));\n    };\n\n    // Send the file to the worker\n    worker.postMessage({\n      file,\n      maxWidth,\n      maxHeight,\n      quality,\n    });\n  });\n}\n\n/**\n * Fallback function for environments where Web Workers are not supported\n */\nexport async function compressAndResizePhotoFallback(\n  file: File,\n  maxWidth = 1200,\n  maxHeight = 1200,\n  quality = 0.85\n): Promise<File> {\n  return new Promise((resolve, reject) => {\n    try {\n      // Create an image object from the file\n      const img = new Image();\n      img.src = URL.createObjectURL(file);\n\n      img.onload = () => {\n        // Calculate the new dimensions\n        let width = img.width;\n        let height = img.height;\n\n        // Scale down if either dimension exceeds the maximum\n        if (width > maxWidth || height > maxHeight) {\n          const ratio = Math.min(maxWidth / width, maxHeight / height);\n          width = Math.floor(width * ratio);\n          height = Math.floor(height * ratio);\n        }\n\n        // Create a canvas and draw the resized image\n        const canvas = document.createElement('canvas');\n        canvas.width = width;\n        canvas.height = height;\n\n        const ctx = canvas.getContext('2d');\n        if (!ctx) {\n          reject(new Error('Could not get canvas context'));\n          return;\n        }\n\n        ctx.drawImage(img, 0, 0, width, height);\n\n        // Convert the canvas to a Blob\n        canvas.toBlob(\n          (blob) => {\n            if (!blob) {\n              reject(new Error('Failed to create blob from image'));\n              return;\n            }\n\n            // Create a new File object from the blob\n            const processedFile = new File([blob], file.name, {\n              type: 'image/jpeg',\n              lastModified: Date.now(),\n            });\n\n            // Clean up the object URL\n            URL.revokeObjectURL(img.src);\n\n            resolve(processedFile);\n          },\n          'image/jpeg',\n          quality\n        );\n      };\n\n      img.onerror = () => {\n        URL.revokeObjectURL(img.src);\n        reject(new Error('Failed to load image'));\n      };\n    } catch (error) {\n      reject(error);\n    }\n  });\n}\n\n/**\n * Feature detection to determine if Web Workers are supported\n */\nexport const supportsWebWorker = (): boolean => {\n  try {\n    return (\n      typeof Worker !== 'undefined' && typeof OffscreenCanvas !== 'undefined'\n    );\n  } catch (e) {\n    return false;\n  }\n};\n","usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app/task-beacon-app-cursor/task-beacon-app/src/lib/mobile-utils.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app/task-beacon-app-cursor/task-beacon-app/src/lib/navigation-menu-variants.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app/task-beacon-app-cursor/task-beacon-app/src/lib/notification.ts","messages":[{"ruleId":"unused-imports/no-unused-vars","severity":2,"message":"'error' is defined but never used.","line":11,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":11,"endColumn":19}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { toast } from \"sonner\";\n\n// Re-export toast\nexport { toast };\n\n// Function to trigger haptic feedback if available\nexport const triggerHapticFeedback = () => {\n  if (typeof navigator !== \"undefined\" && \"vibrate\" in navigator) {\n    try {\n      navigator.vibrate(200);\n    } catch (error) {\n      console.log(\"Haptic feedback not supported or permission denied\");\n    }\n  }\n};\n\n// Function to handle browser notifications with proper checks\nexport const showBrowserNotification = async (\n  title: string,\n  body?: string\n): Promise<boolean> => {\n  if (typeof Notification !== \"undefined\" && \"Notification\" in window) {\n    if (Notification.permission === \"granted\") {\n      new Notification(title, { body });\n      return true;\n    } else if (Notification.permission === \"default\") {\n      const permission = await Notification.requestPermission();\n      if (permission === \"granted\") {\n        new Notification(title, { body });\n        return true;\n      }\n      return false;\n    } else {\n      toast.info(\"Notifications are blocked by your browser\");\n      return false;\n    }\n  } else {\n    toast.info(\"Your browser does not support notifications\");\n    return false;\n  }\n};\n","usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app/task-beacon-app-cursor/task-beacon-app/src/lib/performance.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app/task-beacon-app-cursor/task-beacon-app/src/lib/performanceUtils.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":52,"column":44,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":52,"endColumn":47,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1207,1210],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1207,1210],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\n/**\n * Core performance monitoring utilities (React-agnostic)\n */\n\ninterface PerformanceMetrics {\n  name: string;\n  startTime: number;\n  endTime?: number;\n  duration?: number;\n  fps?: number;\n  memoryUsage?: number;\n}\n\nclass PerformanceMonitor {\n  private metrics: PerformanceMetrics[] = [];\n  private frameCount = 0;\n  private lastFPSUpdate = 0;\n  private currentFPS = 0;\n\n  /**\n   * Start measuring performance for a given operation\n   */\n  startMeasurement(name: string): string {\n    const id = `${name}-${Date.now()}`;\n    const metric: PerformanceMetrics = {\n      name: id,\n      startTime: performance.now(),\n    };\n\n    this.metrics.push(metric);\n\n    if (process.env.NODE_ENV === 'development') {\n      console.log(`🚀 Performance measurement started: ${name}`);\n    }\n\n    return id;\n  }\n\n  /**\n   * End measurement and calculate duration\n   */\n  endMeasurement(id: string): number | null {\n    const metric = this.metrics.find((m) => m.name === id);\n    if (!metric) return null;\n\n    metric.endTime = performance.now();\n    metric.duration = metric.endTime - metric.startTime;\n\n    // Add memory usage if available\n    if ('memory' in performance) {\n      metric.memoryUsage = (performance as any).memory.usedJSHeapSize;\n    }\n\n    if (process.env.NODE_ENV === 'development') {\n      console.log(\n        `⏱️ Performance measurement completed: ${id} - ${metric.duration.toFixed(2)}ms`\n      );\n\n      if (metric.duration > 16.67) {\n        // More than one frame at 60fps\n        console.warn(\n          `⚠️ Slow operation detected: ${id} took ${metric.duration.toFixed(2)}ms`\n        );\n      }\n    }\n\n    return metric.duration;\n  }\n\n  /**\n   * Monitor FPS during animations\n   */\n  startFPSMonitoring(): () => void {\n    let animationId: number;\n    this.frameCount = 0;\n    this.lastFPSUpdate = performance.now();\n\n    const updateFPS = () => {\n      this.frameCount++;\n      const now = performance.now();\n\n      if (now - this.lastFPSUpdate >= 1000) {\n        // Update every second\n        this.currentFPS = Math.round(\n          (this.frameCount * 1000) / (now - this.lastFPSUpdate)\n        );\n\n        if (process.env.NODE_ENV === 'development') {\n          console.log(`📊 Current FPS: ${this.currentFPS}`);\n\n          if (this.currentFPS < 30) {\n            console.warn(`⚠️ Low FPS detected: ${this.currentFPS}`);\n          }\n        }\n\n        this.frameCount = 0;\n        this.lastFPSUpdate = now;\n      }\n\n      animationId = requestAnimationFrame(updateFPS);\n    };\n\n    animationId = requestAnimationFrame(updateFPS);\n\n    // Return cleanup function\n    return () => {\n      cancelAnimationFrame(animationId);\n    };\n  }\n\n  /**\n   * Get performance report\n   */\n  getReport(): PerformanceMetrics[] {\n    return this.metrics.filter((m) => m.duration !== undefined);\n  }\n\n  /**\n   * Clear all metrics\n   */\n  clearMetrics(): void {\n    this.metrics = [];\n  }\n\n  /**\n   * Get current FPS\n   */\n  getCurrentFPS(): number {\n    return this.currentFPS;\n  }\n}\n\n// Export singleton instance\nexport const performanceMonitor = new PerformanceMonitor();\n","usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app/task-beacon-app-cursor/task-beacon-app/src/lib/sidebar-constants.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app/task-beacon-app-cursor/task-beacon-app/src/lib/sidebar-utils.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app/task-beacon-app-cursor/task-beacon-app/src/lib/sidebar-variants.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app/task-beacon-app-cursor/task-beacon-app/src/lib/style-optimization.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app/task-beacon-app-cursor/task-beacon-app/src/lib/testing/crudTesting.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":14,"column":10,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":14,"endColumn":13,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[311,314],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[311,314],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\nimport { supabase } from '@/integrations/supabase/client';\nimport { toast } from '@/lib/toast';\n\n/**\n * Comprehensive CRUD testing utilities\n * These functions test all database operations to ensure data integrity\n */\n\ninterface TestResult {\n  operation: string;\n  success: boolean;\n  error?: string;\n  data?: any;\n  duration: number;\n}\n\ninterface TestSuite {\n  suiteName: string;\n  results: TestResult[];\n  totalDuration: number;\n  passed: number;\n  failed: number;\n}\n\n/**\n * Test task CRUD operations\n */\nexport const testTaskCRUD = async (): Promise<TestSuite> => {\n  const results: TestResult[] = [];\n  const startTime = Date.now();\n  let testTaskId: string | null = null;\n\n  console.log('🧪 Starting Task CRUD Tests...');\n\n  // Test 1: Create Task\n  try {\n    const createStart = Date.now();\n    const { data: user } = await supabase.auth.getUser();\n    \n    if (!user.user) {\n      throw new Error('User not authenticated');\n    }\n\n    const { data, error } = await supabase\n      .from('tasks')\n      .insert({\n        title: 'Test Task',\n        description: 'Test description for CRUD validation',\n        owner_id: user.user.id,\n        status: 'pending',\n        pinned: false,\n      })\n      .select()\n      .single();\n\n    if (error) throw error;\n    \n    testTaskId = data.id;\n    results.push({\n      operation: 'CREATE Task',\n      success: true,\n      data: data,\n      duration: Date.now() - createStart,\n    });\n  } catch (error) {\n    results.push({\n      operation: 'CREATE Task',\n      success: false,\n      error: error instanceof Error ? error.message : 'Unknown error',\n      duration: Date.now() - Date.now(),\n    });\n  }\n\n  // Test 2: Read Task\n  if (testTaskId) {\n    try {\n      const readStart = Date.now();\n      const { data, error } = await supabase\n        .from('tasks')\n        .select('*')\n        .eq('id', testTaskId)\n        .single();\n\n      if (error) throw error;\n\n      results.push({\n        operation: 'READ Task',\n        success: true,\n        data: data,\n        duration: Date.now() - readStart,\n      });\n    } catch (error) {\n      results.push({\n        operation: 'READ Task',\n        success: false,\n        error: error instanceof Error ? error.message : 'Unknown error',\n        duration: Date.now() - Date.now(),\n      });\n    }\n  }\n\n  // Test 3: Update Task\n  if (testTaskId) {\n    try {\n      const updateStart = Date.now();\n      const { data, error } = await supabase\n        .from('tasks')\n        .update({\n          title: 'Updated Test Task',\n          description: 'Updated description',\n          status: 'complete',\n        })\n        .eq('id', testTaskId)\n        .select()\n        .single();\n\n      if (error) throw error;\n\n      results.push({\n        operation: 'UPDATE Task',\n        success: true,\n        data: data,\n        duration: Date.now() - updateStart,\n      });\n    } catch (error) {\n      results.push({\n        operation: 'UPDATE Task',\n        success: false,\n        error: error instanceof Error ? error.message : 'Unknown error',\n        duration: Date.now() - Date.now(),\n      });\n    }\n  }\n\n  // Test 4: Delete Task\n  if (testTaskId) {\n    try {\n      const deleteStart = Date.now();\n      const { error } = await supabase\n        .from('tasks')\n        .delete()\n        .eq('id', testTaskId);\n\n      if (error) throw error;\n\n      results.push({\n        operation: 'DELETE Task',\n        success: true,\n        duration: Date.now() - deleteStart,\n      });\n    } catch (error) {\n      results.push({\n        operation: 'DELETE Task',\n        success: false,\n        error: error instanceof Error ? error.message : 'Unknown error',\n        duration: Date.now() - Date.now(),\n      });\n    }\n  }\n\n  const totalDuration = Date.now() - startTime;\n  const passed = results.filter(r => r.success).length;\n  const failed = results.filter(r => !r.success).length;\n\n  return {\n    suiteName: 'Task CRUD Operations',\n    results,\n    totalDuration,\n    passed,\n    failed,\n  };\n};\n\n/**\n * Test profile CRUD operations\n */\nexport const testProfileCRUD = async (): Promise<TestSuite> => {\n  const results: TestResult[] = [];\n  const startTime = Date.now();\n\n  console.log('🧪 Starting Profile CRUD Tests...');\n\n  // Test 1: Read Current Profile\n  try {\n    const readStart = Date.now();\n    const { data: user } = await supabase.auth.getUser();\n    \n    if (!user.user) {\n      throw new Error('User not authenticated');\n    }\n\n    const { data, error } = await supabase\n      .from('profiles')\n      .select('*')\n      .eq('id', user.user.id)\n      .single();\n\n    if (error) throw error;\n\n    results.push({\n      operation: 'READ Profile',\n      success: true,\n      data: data,\n      duration: Date.now() - readStart,\n    });\n  } catch (error) {\n    results.push({\n      operation: 'READ Profile',\n      success: false,\n      error: error instanceof Error ? error.message : 'Unknown error',\n      duration: Date.now() - Date.now(),\n    });\n  }\n\n  // Test 2: Update Profile\n  try {\n    const updateStart = Date.now();\n    const { data: user } = await supabase.auth.getUser();\n    \n    if (!user.user) {\n      throw new Error('User not authenticated');\n    }\n\n    const { data, error } = await supabase\n      .from('profiles')\n      .update({\n        name: 'Test User Updated',\n      })\n      .eq('id', user.user.id)\n      .select()\n      .single();\n\n    if (error) throw error;\n\n    results.push({\n      operation: 'UPDATE Profile',\n      success: true,\n      data: data,\n      duration: Date.now() - updateStart,\n    });\n  } catch (error) {\n    results.push({\n      operation: 'UPDATE Profile',\n      success: false,\n      error: error instanceof Error ? error.message : 'Unknown error',\n      duration: Date.now() - Date.now(),\n    });\n  }\n\n  // Test 3: List All Profiles (for user search)\n  try {\n    const listStart = Date.now();\n    const { data, error } = await supabase\n      .from('profiles')\n      .select('id, email, name')\n      .limit(10);\n\n    if (error) throw error;\n\n    results.push({\n      operation: 'LIST Profiles',\n      success: true,\n      data: { count: data.length },\n      duration: Date.now() - listStart,\n    });\n  } catch (error) {\n    results.push({\n      operation: 'LIST Profiles',\n      success: false,\n      error: error instanceof Error ? error.message : 'Unknown error',\n      duration: Date.now() - Date.now(),\n    });\n  }\n\n  const totalDuration = Date.now() - startTime;\n  const passed = results.filter(r => r.success).length;\n  const failed = results.filter(r => !r.success).length;\n\n  return {\n    suiteName: 'Profile CRUD Operations',\n    results,\n    totalDuration,\n    passed,\n    failed,\n  };\n};\n\n/**\n * Test data validation constraints\n */\nexport const testValidationConstraints = async (): Promise<TestSuite> => {\n  const results: TestResult[] = [];\n  const startTime = Date.now();\n\n  console.log('🧪 Starting Validation Constraint Tests...');\n\n  // Test 1: Invalid Email Format\n  try {\n    const testStart = Date.now();\n    const { data: user } = await supabase.auth.getUser();\n    \n    if (!user.user) {\n      throw new Error('User not authenticated');\n    }\n\n    const { error } = await supabase\n      .from('profiles')\n      .update({ email: 'invalid-email' })\n      .eq('id', user.user.id);\n\n    if (error) {\n      // This should fail, so error is expected\n      results.push({\n        operation: 'VALIDATE Email Format (should fail)',\n        success: true,\n        data: { constraintWorking: true },\n        duration: Date.now() - testStart,\n      });\n    } else {\n      // This should not succeed\n      results.push({\n        operation: 'VALIDATE Email Format (should fail)',\n        success: false,\n        error: 'Constraint not working - invalid email was accepted',\n        duration: Date.now() - testStart,\n      });\n    }\n  } catch (error) {\n    results.push({\n      operation: 'VALIDATE Email Format (should fail)',\n      success: false,\n      error: error instanceof Error ? error.message : 'Unknown error',\n      duration: Date.now() - Date.now(),\n    });\n  }\n\n  // Test 2: Invalid Task Title Length\n  try {\n    const testStart = Date.now();\n    const { data: user } = await supabase.auth.getUser();\n    \n    if (!user.user) {\n      throw new Error('User not authenticated');\n    }\n\n    const { error } = await supabase\n      .from('tasks')\n      .insert({\n        title: 'This title is way too long and should be rejected by the database constraint',\n        owner_id: user.user.id,\n      });\n\n    if (error) {\n      // This should fail, so error is expected\n      results.push({\n        operation: 'VALIDATE Task Title Length (should fail)',\n        success: true,\n        data: { constraintWorking: true },\n        duration: Date.now() - testStart,\n      });\n    } else {\n      // This should not succeed\n      results.push({\n        operation: 'VALIDATE Task Title Length (should fail)',\n        success: false,\n        error: 'Constraint not working - long title was accepted',\n        duration: Date.now() - testStart,\n      });\n    }\n  } catch (error) {\n    results.push({\n      operation: 'VALIDATE Task Title Length (should fail)',\n      success: false,\n      error: error instanceof Error ? error.message : 'Unknown error',\n      duration: Date.now() - Date.now(),\n    });\n  }\n\n  const totalDuration = Date.now() - startTime;\n  const passed = results.filter(r => r.success).length;\n  const failed = results.filter(r => !r.success).length;\n\n  return {\n    suiteName: 'Validation Constraints',\n    results,\n    totalDuration,\n    passed,\n    failed,\n  };\n};\n\n/**\n * Run all CRUD tests\n */\nexport const runAllCRUDTests = async (): Promise<TestSuite[]> => {\n  console.log('🚀 Starting Comprehensive CRUD Testing...');\n  toast.info('Running database tests...');\n\n  const suites: TestSuite[] = [];\n\n  try {\n    // Run all test suites\n    const taskSuite = await testTaskCRUD();\n    const profileSuite = await testProfileCRUD();\n    const validationSuite = await testValidationConstraints();\n\n    suites.push(taskSuite, profileSuite, validationSuite);\n\n    // Log results\n    suites.forEach(suite => {\n      console.log(`\\n📊 ${suite.suiteName}:`);\n      console.log(`   ✅ Passed: ${suite.passed}`);\n      console.log(`   ❌ Failed: ${suite.failed}`);\n      console.log(`   ⏱️ Duration: ${suite.totalDuration}ms`);\n      \n      suite.results.forEach(result => {\n        const status = result.success ? '✅' : '❌';\n        console.log(`   ${status} ${result.operation} (${result.duration}ms)`);\n        if (result.error) {\n          console.log(`      Error: ${result.error}`);\n        }\n      });\n    });\n\n    const totalPassed = suites.reduce((sum, suite) => sum + suite.passed, 0);\n    const totalFailed = suites.reduce((sum, suite) => sum + suite.failed, 0);\n    const totalDuration = suites.reduce((sum, suite) => sum + suite.totalDuration, 0);\n\n    console.log(`\\n🏁 Test Summary:`);\n    console.log(`   ✅ Total Passed: ${totalPassed}`);\n    console.log(`   ❌ Total Failed: ${totalFailed}`);\n    console.log(`   ⏱️ Total Duration: ${totalDuration}ms`);\n\n    if (totalFailed === 0) {\n      toast.success(`All tests passed! (${totalPassed}/${totalPassed})`);\n    } else {\n      toast.error(`Some tests failed (${totalPassed}/${totalPassed + totalFailed})`);\n    }\n\n  } catch (error) {\n    console.error('❌ Test execution failed:', error);\n    toast.error('Test execution failed');\n  }\n\n  return suites;\n};\n","usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app/task-beacon-app-cursor/task-beacon-app/src/lib/toast.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app/task-beacon-app-cursor/task-beacon-app/src/lib/toggle-variants.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app/task-beacon-app-cursor/task-beacon-app/src/lib/uiUtils.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app/task-beacon-app-cursor/task-beacon-app/src/lib/utils.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app/task-beacon-app-cursor/task-beacon-app/src/lib/utils/core.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":19,"column":46,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":19,"endColumn":49,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[467,470],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[467,470],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":19,"column":56,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":19,"endColumn":59,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[477,480],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[477,480],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":41,"column":46,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":41,"endColumn":49,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1007,1010],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1007,1010],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":41,"column":56,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":41,"endColumn":59,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1017,1020],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1017,1020],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Core utility functions that don't fit into specific domains\n */\n\n/**\n * Generates a UUID v4 string\n */\nexport function generateUUID(): string {\n  return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {\n    const r = (Math.random() * 16) | 0;\n    const v = c === 'x' ? r : (r & 0x3) | 0x8;\n    return v.toString(16);\n  });\n}\n\n/**\n * Debounces a function to limit how often it can be called\n */\nexport function debounce<T extends (...args: any[]) => any>(\n  func: T,\n  wait: number\n): (...args: Parameters<T>) => void {\n  let timeout: ReturnType<typeof setTimeout> | null = null;\n\n  return function (...args: Parameters<T>): void {\n    const later = () => {\n      timeout = null;\n      func(...args);\n    };\n\n    if (timeout !== null) {\n      clearTimeout(timeout);\n    }\n    timeout = setTimeout(later, wait);\n  };\n}\n\n/**\n * Creates a throttled function that only invokes the provided function at most once per specified interval\n */\nexport function throttle<T extends (...args: any[]) => any>(\n  func: T,\n  limit: number\n): (...args: Parameters<T>) => void {\n  let inThrottle = false;\n\n  return function (...args: Parameters<T>): void {\n    if (!inThrottle) {\n      func(...args);\n      inThrottle = true;\n      setTimeout(() => {\n        inThrottle = false;\n      }, limit);\n    }\n  };\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app/task-beacon-app-cursor/task-beacon-app/src/lib/utils/data.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app/task-beacon-app-cursor/task-beacon-app/src/lib/utils/date.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app/task-beacon-app-cursor/task-beacon-app/src/lib/utils/format.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app/task-beacon-app-cursor/task-beacon-app/src/lib/utils/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app/task-beacon-app-cursor/task-beacon-app/src/lib/utils/navbarColors.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app/task-beacon-app-cursor/task-beacon-app/src/lib/utils/navbarGeometry.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app/task-beacon-app-cursor/task-beacon-app/src/lib/utils/ui.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app/task-beacon-app-cursor/task-beacon-app/src/lib/utils/validation.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app/task-beacon-app-cursor/task-beacon-app/src/lib/validation/databaseValidation.ts","messages":[{"ruleId":"unused-imports/no-unused-imports","severity":2,"message":"'supabase' is defined but never used.","line":2,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":2,"endColumn":18,"fix":{"range":[1,61],"text":"\n"}}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":1,"fixableWarningCount":0,"source":"\nimport { supabase } from '@/integrations/supabase/client';\n\n/**\n * Database-level validation utilities\n * These functions validate data before sending to the database\n */\n\nexport interface ValidationResult {\n  isValid: boolean;\n  errors: string[];\n  warnings: string[];\n}\n\n/**\n * Validate email format using the same regex as database\n */\nexport const validateEmail = (email: string): ValidationResult => {\n  const errors: string[] = [];\n  const warnings: string[] = [];\n\n  if (!email || email.trim().length === 0) {\n    errors.push('Email is required');\n  } else {\n    const emailRegex = /^[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\\.[A-Za-z]{2,}$/;\n    if (!emailRegex.test(email)) {\n      errors.push('Invalid email format');\n    }\n  }\n\n  return {\n    isValid: errors.length === 0,\n    errors,\n    warnings,\n  };\n};\n\n/**\n * Validate URL format using the same logic as database\n */\nexport const validateUrl = (url: string | null | undefined): ValidationResult => {\n  const errors: string[] = [];\n  const warnings: string[] = [];\n\n  // Allow empty/null URLs\n  if (!url || url.trim() === '') {\n    return { isValid: true, errors, warnings };\n  }\n\n  const urlRegex = /^https?:\\/\\/[^\\s/$.?#].[^\\s]*$/;\n  if (!urlRegex.test(url)) {\n    errors.push('Invalid URL format. Must start with http:// or https://');\n  }\n\n  return {\n    isValid: errors.length === 0,\n    errors,\n    warnings,\n  };\n};\n\n/**\n * Validate task title according to database constraints\n */\nexport const validateTaskTitle = (title: string): ValidationResult => {\n  const errors: string[] = [];\n  const warnings: string[] = [];\n\n  if (!title || title.trim().length === 0) {\n    errors.push('Task title is required');\n  } else {\n    const trimmedTitle = title.trim();\n    if (trimmedTitle.length < 1) {\n      errors.push('Task title must be at least 1 character');\n    } else if (trimmedTitle.length > 22) {\n      errors.push('Task title cannot exceed 22 characters');\n    } else if (trimmedTitle.length > 18) {\n      warnings.push('Task title is getting long');\n    }\n  }\n\n  return {\n    isValid: errors.length === 0,\n    errors,\n    warnings,\n  };\n};\n\n/**\n * Validate task description according to database constraints\n */\nexport const validateTaskDescription = (description: string | null | undefined): ValidationResult => {\n  const errors: string[] = [];\n  const warnings: string[] = [];\n\n  if (description && description.length > 500) {\n    errors.push('Description cannot exceed 500 characters');\n  } else if (description && description.length > 400) {\n    warnings.push('Description is getting long');\n  }\n\n  return {\n    isValid: errors.length === 0,\n    errors,\n    warnings,\n  };\n};\n\n/**\n * Validate user name according to database constraints\n */\nexport const validateUserName = (name: string | null | undefined): ValidationResult => {\n  const errors: string[] = [];\n  const warnings: string[] = [];\n\n  if (name !== null && name !== undefined) {\n    const trimmedName = name.trim();\n    if (trimmedName.length === 0) {\n      errors.push('Name cannot be empty if provided');\n    } else if (trimmedName.length > 100) {\n      errors.push('Name cannot exceed 100 characters');\n    } else if (trimmedName.length > 80) {\n      warnings.push('Name is getting long');\n    }\n  }\n\n  return {\n    isValid: errors.length === 0,\n    errors,\n    warnings,\n  };\n};\n\n/**\n * Validate due date to ensure it's not in the past\n */\nexport const validateDueDate = (dueDate: string | null | undefined): ValidationResult => {\n  const errors: string[] = [];\n  const warnings: string[] = [];\n\n  if (dueDate) {\n    const date = new Date(dueDate);\n    const now = new Date();\n    \n    if (isNaN(date.getTime())) {\n      errors.push('Invalid date format');\n    } else if (date < now) {\n      errors.push('Due date cannot be in the past');\n    } else {\n      const timeDiff = date.getTime() - now.getTime();\n      const hoursDiff = timeDiff / (1000 * 60 * 60);\n      \n      if (hoursDiff < 24) {\n        warnings.push('Due date is within 24 hours');\n      }\n    }\n  }\n\n  return {\n    isValid: errors.length === 0,\n    errors,\n    warnings,\n  };\n};\n\n/**\n * Comprehensive task validation\n */\nexport const validateTaskData = (taskData: {\n  title: string;\n  description?: string | null;\n  url_link?: string | null;\n  due_date?: string | null;\n}): ValidationResult => {\n  const allErrors: string[] = [];\n  const allWarnings: string[] = [];\n\n  // Validate each field\n  const titleResult = validateTaskTitle(taskData.title);\n  const descResult = validateTaskDescription(taskData.description);\n  const urlResult = validateUrl(taskData.url_link);\n  const dateResult = validateDueDate(taskData.due_date);\n\n  // Combine results\n  allErrors.push(...titleResult.errors, ...descResult.errors, ...urlResult.errors, ...dateResult.errors);\n  allWarnings.push(...titleResult.warnings, ...descResult.warnings, ...urlResult.warnings, ...dateResult.warnings);\n\n  return {\n    isValid: allErrors.length === 0,\n    errors: allErrors,\n    warnings: allWarnings,\n  };\n};\n\n/**\n * Comprehensive profile validation\n */\nexport const validateProfileData = (profileData: {\n  email: string;\n  name?: string | null;\n}): ValidationResult => {\n  const allErrors: string[] = [];\n  const allWarnings: string[] = [];\n\n  // Validate each field\n  const emailResult = validateEmail(profileData.email);\n  const nameResult = validateUserName(profileData.name);\n\n  // Combine results\n  allErrors.push(...emailResult.errors, ...nameResult.errors);\n  allWarnings.push(...emailResult.warnings, ...nameResult.warnings);\n\n  return {\n    isValid: allErrors.length === 0,\n    errors: allErrors,\n    warnings: allWarnings,\n  };\n};\n","usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app/task-beacon-app-cursor/task-beacon-app/src/main.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app/task-beacon-app-cursor/task-beacon-app/src/pages/AuthPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app/task-beacon-app-cursor/task-beacon-app/src/pages/CreateTaskPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app/task-beacon-app-cursor/task-beacon-app/src/pages/DatabaseTestPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app/task-beacon-app-cursor/task-beacon-app/src/pages/FollowUpTaskPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app/task-beacon-app-cursor/task-beacon-app/src/pages/Index.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app/task-beacon-app-cursor/task-beacon-app/src/pages/NotFound.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app/task-beacon-app-cursor/task-beacon-app/src/pages/TaskDetailsPage.tsx","messages":[{"ruleId":"unused-imports/no-unused-imports","severity":2,"message":"'useState' is defined but never used.","line":1,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":1,"endColumn":18,"fix":{"range":[8,18],"text":""}},{"ruleId":"unused-imports/no-unused-imports","severity":2,"message":"'useEffect' is defined but never used.","line":1,"column":20,"nodeType":null,"messageId":"unusedVar","endLine":1,"endColumn":29,"fix":{"range":[17,28],"text":""}},{"ruleId":"unused-imports/no-unused-vars","severity":2,"message":"'setIsPinned' is assigned a value but never used.","line":15,"column":43,"nodeType":null,"messageId":"unusedVar","endLine":15,"endColumn":54}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":2,"fixableWarningCount":0,"source":"import { useState, useEffect } from 'react';\nimport { useParams, useNavigate } from 'react-router-dom';\nimport { Button } from '@/components/ui/button';\nimport { ArrowLeft, Calendar1, ExternalLink } from 'lucide-react';\nimport { formatDate } from '@/lib/dateUtils';\nimport CountdownTimer from '@/features/tasks/components/CountdownTimer';\nimport { getTaskStatus } from '@/features/tasks/utils/taskUiUtils';\nimport TaskActions from '@/features/tasks/components/TaskActions';\nimport { Skeleton } from '@/components/ui/skeleton';\nimport { useTaskDetails } from '@/features/tasks/hooks/useTaskDetails';\n\nconst TaskDetailsPage = () => {\n  const { id } = useParams<{ id: string }>();\n  const navigate = useNavigate();\n  const { task, loading, error, isPinned, setIsPinned } = useTaskDetails(id);\n\n  if (loading) {\n    return (\n      <div className=\"container space-y-6 py-8\">\n        <Button\n          variant=\"ghost\"\n          size=\"sm\"\n          onClick={() => navigate(-1)}\n          className=\"mb-4\"\n        >\n          <ArrowLeft size={16} className=\"mr-2\" /> Back\n        </Button>\n        <div className=\"animate-pulse space-y-4\">\n          <Skeleton className=\"h-10 w-3/4\" />\n          <Skeleton className=\"h-6 w-1/2\" />\n          <Skeleton className=\"h-24 w-full\" />\n        </div>\n      </div>\n    );\n  }\n\n  if (error || !task) {\n    return (\n      <div className=\"container py-8\">\n        <Button\n          variant=\"ghost\"\n          size=\"sm\"\n          onClick={() => navigate(-1)}\n          className=\"mb-4\"\n        >\n          <ArrowLeft size={16} className=\"mr-2\" /> Back\n        </Button>\n        <div className=\"rounded-lg bg-red-50 p-4 text-red-600\">\n          {error || 'Task not found'}\n        </div>\n      </div>\n    );\n  }\n\n  const status = getTaskStatus(task);\n\n  return (\n    <div className=\"container mx-auto max-w-2xl py-8\">\n      <Button\n        variant=\"ghost\"\n        size=\"sm\"\n        onClick={() => navigate(-1)}\n        className=\"mb-6\"\n      >\n        <ArrowLeft size={16} className=\"mr-2\" /> Back\n      </Button>\n\n      <div className=\"space-y-6 rounded-xl bg-white p-6 shadow-sm\">\n        <div className=\"flex items-start gap-4\">\n          <div className=\"shrink-0\">\n            <CountdownTimer dueDate={task.due_date} status={status} />\n          </div>\n          <div>\n            <h1 className=\"mb-2 text-2xl font-bold\">{task.title}</h1>\n            {task.description && (\n              <p className=\"mb-4 text-gray-600\">{task.description}</p>\n            )}\n          </div>\n        </div>\n\n        <div className=\"border-t pt-4\">\n          <div className=\"mb-3 flex items-center gap-3\">\n            <Calendar1 size={18} className=\"text-gray-500\" />\n            <span>\n              {task.due_date ? formatDate(task.due_date) : 'No due date'}\n            </span>\n          </div>\n\n          {task.url_link && (\n            <div className=\"mb-3 flex items-center gap-2\">\n              <ExternalLink size={18} className=\"text-primary\" />\n              <a\n                href={task.url_link}\n                target=\"_blank\"\n                rel=\"noopener noreferrer\"\n                className=\"text-primary hover:underline\"\n              >\n                {task.url_link}\n              </a>\n            </div>\n          )}\n        </div>\n\n        {task.photo_url && (\n          <div className=\"border-t pt-4\">\n            <h3 className=\"mb-3 text-lg font-medium\">Attachment</h3>\n            <img\n              src={task.photo_url}\n              alt=\"Task attachment\"\n              className=\"max-h-60 rounded-lg bg-gray-50 object-contain\"\n            />\n          </div>\n        )}\n\n        {task.parent_task && (\n          <div className=\"border-t pt-4\">\n            <h3 className=\"mb-3 text-lg font-medium\">Follows Up On</h3>\n            <div className=\"rounded-lg bg-gray-50 p-4\">\n              <h4 className=\"font-medium\">{task.parent_task.title}</h4>\n              {task.parent_task.description && (\n                <p className=\"mt-2 text-gray-600\">\n                  {task.parent_task.description}\n                </p>\n              )}\n              <Button\n                variant=\"ghost\"\n                size=\"sm\"\n                className=\"mt-3\"\n                onClick={() => navigate(`/tasks/${task.parent_task_id}`)}\n              >\n                <ExternalLink size={14} className=\"mr-2\" />\n                View Original Task\n              </Button>\n            </div>\n          </div>\n        )}\n\n        <div className=\"border-t pt-4\">\n          <TaskActions task={{ ...task, pinned: isPinned }} detailView />\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default TaskDetailsPage;\n","usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app/task-beacon-app-cursor/task-beacon-app/src/schemas/commonValidation.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app/task-beacon-app-cursor/task-beacon-app/src/test/setup.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":24,"column":6,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":24,"endColumn":9,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[552,555],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[552,555],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":32,"column":6,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":32,"endColumn":9,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[702,705],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[702,705],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import '@testing-library/jest-dom';\n\n// Mock window.matchMedia for tests\nObject.defineProperty(window, 'matchMedia', {\n  writable: true,\n  value: (query: string) => ({\n    matches: false,\n    media: query,\n    onchange: null,\n    addListener: () => {},\n    removeListener: () => {},\n    addEventListener: () => {},\n    removeEventListener: () => {},\n    dispatchEvent: () => {},\n  }),\n});\n\n// Mock IntersectionObserver\nglobal.IntersectionObserver = class IntersectionObserver {\n  constructor() {}\n  observe() {}\n  unobserve() {}\n  disconnect() {}\n} as any;\n\n// Mock ResizeObserver\nglobal.ResizeObserver = class ResizeObserver {\n  constructor() {}\n  observe() {}\n  unobserve() {}\n  disconnect() {}\n} as any;\n","usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app/task-beacon-app-cursor/task-beacon-app/src/types/api.types.ts","messages":[{"ruleId":"unused-imports/no-unused-imports","severity":2,"message":"'User' is defined but never used.","line":1,"column":28,"nodeType":null,"messageId":"unusedVar","endLine":1,"endColumn":32,"fix":{"range":[25,31],"text":""}},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":16,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":16,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[316,319],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[316,319],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":70,"column":13,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":70,"endColumn":16,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1388,1391],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1388,1391],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":1,"fixableWarningCount":0,"source":"import { Task, TaskStatus, User } from './shared.types';\n\n// API response types\nexport interface ApiResponse<T> {\n  data: T | null;\n  error: Error | null;\n  isLoading: boolean;\n}\n\nexport interface ApiError {\n  message: string;\n  name: string;\n  code?: string;\n  details?: unknown;\n  hint?: string;\n  originalError?: any;\n}\n\nexport interface TablesResponse<T> {\n  data: T | null;\n  error: ApiError | null;\n}\n\nexport interface TaskListResponse {\n  tasks: Task[];\n  pagination: {\n    currentPage: number;\n    totalPages: number;\n    totalCount: number;\n    hasNextPage: boolean;\n    hasPreviousPage: boolean;\n  };\n}\n\nexport interface TaskCreateParams {\n  title: string;\n  description?: string;\n  dueDate?: string;\n  photoUrl?: string | null;\n  urlLink?: string | null;\n  assigneeId?: string | null;\n  parentTaskId?: string | null;\n  pinned?: boolean;\n}\n\nexport interface TaskUpdateParams {\n  title?: string;\n  description?: string;\n  dueDate?: string;\n  photoUrl?: string | null;\n  urlLink?: string | null;\n  assigneeId?: string | null;\n  pinned?: boolean;\n  status?: TaskStatus;\n}\n\nexport interface TaskQueryParams {\n  status?: TaskStatus | 'all';\n  assignedToMe?: boolean;\n  page?: number;\n  pageSize?: number;\n  sortBy?: 'dueDate' | 'createdAt' | 'title';\n  sortDirection?: 'asc' | 'desc';\n  search?: string;\n}\n\nexport interface TaskError {\n  message: string;\n  code: string;\n  details?: any;\n}\n\nexport interface TaskActionResult<T = void> {\n  data: T | null;\n  error: TaskError | null;\n  isSuccess: boolean;\n}\n\n// Table types for Supabase integration\nexport interface TaskRow {\n  id: string;\n  title: string;\n  description: string | null;\n  due_date: string | null;\n  photo_url: string | null;\n  url_link: string | null;\n  owner_id: string;\n  parent_task_id: string | null;\n  pinned: boolean;\n  status: 'pending' | 'complete' | 'overdue';\n  assignee_id: string | null;\n  created_at: string;\n  updated_at: string;\n}\n\nexport interface UserRow {\n  id: string;\n  email: string;\n  name?: string;\n  avatar_url?: string;\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app/task-beacon-app-cursor/task-beacon-app/src/types/form.types.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app/task-beacon-app-cursor/task-beacon-app/src/types/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app/task-beacon-app-cursor/task-beacon-app/src/types/shared.types.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app/task-beacon-app-cursor/task-beacon-app/src/vite-env.d.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app/task-beacon-app-cursor/task-beacon-app/src/workers/imageProcessorWorker.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app/task-beacon-app-cursor/task-beacon-app/tailwind.config.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app/task-beacon-app-cursor/task-beacon-app/vite.config.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]}]