[{"filePath":"/Users/lukemckenzie/task-beacon-app-cursor/knip.config.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app-cursor/src/App.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app-cursor/src/components/form/AutocompleteUserInput.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app-cursor/src/components/form/ParentTaskReference.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app-cursor/src/components/form/ReferenceCard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app-cursor/src/components/form/SimplePhotoUpload.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app-cursor/src/components/form/SimplePhotoUploadModal.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app-cursor/src/components/form/UrlInputModal.tsx","messages":[],"suppressedMessages":[{"ruleId":"jsx-a11y/no-autofocus","severity":2,"message":"The autoFocus prop should not be used, as it can reduce usability and accessibility for users.","line":108,"column":17,"nodeType":"JSXAttribute","endLine":108,"endColumn":26,"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app-cursor/src/components/form/UserSearchModal.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app-cursor/src/components/form/autocomplete/AutocompleteStatusIcon.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app-cursor/src/components/form/autocomplete/AutocompleteUserTag.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app-cursor/src/components/form/autocomplete/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app-cursor/src/components/form/autocomplete/types.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app-cursor/src/components/form/autocomplete/useAutocompleteLogic.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app-cursor/src/components/form/autocomplete/utils.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app-cursor/src/components/form/components/ActionButton.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app-cursor/src/components/form/components/DatePickerButton.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app-cursor/src/components/form/components/SubmitButton.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app-cursor/src/components/form/hooks/useUnifiedPhotoUpload.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app-cursor/src/components/layout/AuthenticatedApp.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app-cursor/src/components/layout/TaskDashboardHeader.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app-cursor/src/components/providers/AppProviders.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app-cursor/src/components/ui/GenericPagination.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app-cursor/src/components/ui/ImageErrorFallback.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app-cursor/src/components/ui/ImageLoadingState.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app-cursor/src/components/ui/LazyImage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app-cursor/src/components/ui/OptimizedImage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app-cursor/src/components/ui/UnifiedErrorBoundary.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app-cursor/src/components/ui/auth/FloatingInput.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app-cursor/src/components/ui/auth/ModernAuthForm.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app-cursor/src/components/ui/auth/PasswordStrengthIndicator.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app-cursor/src/components/ui/auth/components/AuthFormFields.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app-cursor/src/components/ui/auth/components/AuthFormHeader.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app-cursor/src/components/ui/auth/components/AuthModeToggle.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app-cursor/src/components/ui/auth/components/AuthSubmitButton.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app-cursor/src/components/ui/auth/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app-cursor/src/components/ui/avatar.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app-cursor/src/components/ui/button/Button.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app-cursor/src/components/ui/button/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app-cursor/src/components/ui/button/variants.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app-cursor/src/components/ui/calendar.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app-cursor/src/components/ui/card.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app-cursor/src/components/ui/dialog.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app-cursor/src/components/ui/form/AnimatedCharacterCount.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app-cursor/src/components/ui/form/FloatingInput.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app-cursor/src/components/ui/form/FloatingTextarea.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app-cursor/src/components/ui/input.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app-cursor/src/components/ui/loading/UnifiedLoadingStates.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app-cursor/src/components/ui/navbar/utils/navbarColors.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app-cursor/src/components/ui/navbar/utils/navbarGeometry.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app-cursor/src/components/ui/pagination.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app-cursor/src/components/ui/popover.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app-cursor/src/components/ui/simple-navbar.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app-cursor/src/components/ui/skeleton.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app-cursor/src/components/ui/textarea.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app-cursor/src/components/ui/tooltip.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app-cursor/src/contexts/ThemeContext.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app-cursor/src/features/auth/integration/authFlow.integration.test.tsx","messages":[{"ruleId":"promise/prefer-await-to-callbacks","severity":1,"message":"Avoid callbacks. Prefer Async/Await.","line":98,"column":28,"nodeType":"Identifier","messageId":"error","endLine":98,"endColumn":30},{"ruleId":"promise/prefer-await-to-callbacks","severity":1,"message":"Avoid callbacks. Prefer Async/Await.","line":250,"column":28,"nodeType":"Identifier","messageId":"error","endLine":250,"endColumn":30}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { QueryClient, QueryClientProvider } from '@tanstack/react-query';\nimport { waitFor, renderHook, act } from '@testing-library/react';\nimport { ReactNode } from 'react';\nimport { describe, it, expect, beforeEach, afterEach, vi } from 'vitest';\n\n// === INTERNAL UTILITIES ===\nimport { useAuth } from '@/hooks/core/auth';\nimport * as supabaseClient from '@/integrations/supabase/client';\nimport * as api from '@/lib/api/auth';\nimport { setupIntegrationTest } from '@/test/integration/setup';\nimport type {\n  AuthUser,\n  Session,\n  AuthResponse,\n  ApiResponse,\n  ApiError,\n} from '@/types';\n\n/**\n * Authentication Flow Integration Tests\n *\n * Tests the complete authentication workflow including login, logout,\n * session management, and protected route access.\n */\n\ndescribe('Auth Flow Integration Tests', () => {\n  let cleanup: () => void;\n  let queryClient: QueryClient;\n\n  beforeEach(() => {\n    cleanup = setupIntegrationTest();\n    queryClient = new QueryClient({\n      defaultOptions: {\n        queries: { retry: false, gcTime: 0 },\n        mutations: { retry: false },\n      },\n    });\n  });\n\n  afterEach(() => {\n    cleanup();\n    queryClient.clear();\n    vi.restoreAllMocks();\n  });\n\n  const wrapper = ({ children }: { children: ReactNode }) => (\n    <QueryClientProvider client={queryClient}>{children}</QueryClientProvider>\n  );\n\n  describe('Sign In Workflow', () => {\n    it('should handle successful sign in', async () => {\n      const mockUser: AuthUser = {\n        id: 'test-user-id',\n        email: 'test@example.com',\n        role: 'user',\n        app_metadata: {},\n        user_metadata: {},\n        aud: 'authenticated',\n        created_at: '2024-01-01T00:00:00Z',\n        updated_at: '2024-01-01T00:00:00Z',\n      };\n\n      const mockSession: Session = {\n        access_token: 'test-token',\n        refresh_token: 'test-refresh-token',\n        expires_at: Date.now() + 3600000,\n        expires_in: 3600,\n        token_type: 'bearer',\n        user: mockUser,\n      };\n\n      const mockAuthResponse: AuthResponse = {\n        user: mockUser,\n        session: mockSession,\n        emailConfirmed: true,\n      };\n\n      // Mock successful sign in with proper typing\n      const signInSpy = vi.spyOn(api, 'signIn').mockResolvedValue({\n        success: true,\n        data: mockAuthResponse,\n        error: null,\n      } as ApiResponse<AuthResponse>);\n\n      // Update supabase.auth.getSession to return the new session after sign in\n      vi.spyOn(supabaseClient.supabase.auth, 'getSession').mockResolvedValue({\n        data: { session: mockSession },\n        error: null,\n      });\n\n      // Patch: Capture and manually trigger the onAuthStateChange callback\n      let authStateChangeCb:\n        | ((event: string, session: Session | null) => void)\n        | undefined;\n      vi.spyOn(\n        supabaseClient.supabase.auth,\n        'onAuthStateChange'\n      ).mockImplementation(cb => {\n        authStateChangeCb = cb;\n        return {\n          data: {\n            subscription: {\n              id: 'test-id',\n              callback: cb,\n              unsubscribe: vi.fn(),\n            },\n          },\n        };\n      });\n\n      const { result } = renderHook(() => useAuth(), { wrapper });\n\n      // Act: Execute sign in\n      await act(async () => {\n        await result.current.signIn('test@example.com', 'password123');\n      });\n\n      // Patch: Simulate the auth state change event\n      await act(async () => {\n        if (authStateChangeCb) authStateChangeCb('SIGNED_IN', mockSession);\n      });\n\n      // Assert: Verify sign in completed successfully\n      await waitFor(() => {\n        expect(result.current.user).toEqual(mockUser);\n        expect(result.current.session).toEqual(mockSession);\n      });\n      expect(signInSpy).toHaveBeenCalledWith('test@example.com', 'password123');\n    });\n\n    it('should handle sign in validation failures', async () => {\n      // Act: Attempt sign in with invalid data\n      const { result } = renderHook(() => useAuth(), { wrapper });\n      await act(async () => {\n        try {\n          await result.current.signIn('', '');\n        } catch {\n          // Expected to fail validation\n        }\n      });\n      // Wait for error to be set (if async)\n      await waitFor(() => {\n        expect(result.current.error?.message ?? '').toBe('');\n      });\n    });\n\n    it('should handle API errors during sign in', async () => {\n      // Mock API failure with proper ApiError structure\n      const mockApiError: ApiError = {\n        message: 'Invalid credentials',\n        code: 'AUTH_ERROR',\n        name: 'AuthError',\n      };\n\n      const signInSpy = vi.spyOn(api, 'signIn').mockResolvedValue({\n        success: false,\n        data: null,\n        error: mockApiError,\n      });\n\n      // Act: Attempt sign in with API failure\n      const response = await api.signIn('test@example.com', 'wrong-password');\n\n      // Assert: Sign in should handle error gracefully\n      expect(response.success).toBe(false);\n      expect(response.error?.message).toContain('Invalid credentials');\n      expect(signInSpy).toHaveBeenCalled();\n    });\n  });\n\n  describe('Sign Up Workflow', () => {\n    it('should handle successful sign up', async () => {\n      const mockUser: AuthUser = {\n        id: 'new-user-id',\n        email: 'new@example.com',\n        role: 'user',\n        app_metadata: {},\n        user_metadata: {},\n        aud: 'authenticated',\n        created_at: '2024-01-01T00:00:00Z',\n        updated_at: '2024-01-01T00:00:00Z',\n      };\n\n      const mockAuthResponse: AuthResponse = {\n        user: mockUser,\n        session: null,\n        emailConfirmed: false,\n      };\n\n      // Mock successful sign up with proper typing\n      const signUpSpy = vi.spyOn(api, 'signUp').mockResolvedValue({\n        success: true,\n        data: mockAuthResponse,\n        error: null,\n      } as ApiResponse<AuthResponse>);\n\n      // Act: Execute sign up\n      const response = await api.signUp('new@example.com', 'password123');\n\n      // Assert: Verify sign up completed successfully\n      expect(response.success).toBe(true);\n      expect(response.data?.user).toEqual(mockUser);\n      expect(response.data?.emailConfirmed).toBe(false);\n      expect(signUpSpy).toHaveBeenCalledWith('new@example.com', 'password123');\n    });\n  });\n\n  describe('Session Management', () => {\n    it('should handle session refresh', async () => {\n      const mockUser: AuthUser = {\n        id: 'test-user-id',\n        email: 'test@example.com',\n        role: 'user',\n        app_metadata: {},\n        user_metadata: {},\n        aud: 'authenticated',\n        created_at: '2024-01-01T00:00:00Z',\n        updated_at: '2024-01-01T00:00:00Z',\n      };\n\n      const mockSession: Session = {\n        access_token: 'new-test-token',\n        refresh_token: 'new-test-refresh-token',\n        expires_at: Date.now() + 3600000,\n        expires_in: 3600,\n        token_type: 'bearer',\n        user: mockUser,\n      };\n\n      // Mock successful session refresh with proper typing\n      const _refreshSpy = vi.spyOn(api, 'refreshSession').mockResolvedValue({\n        success: true,\n        data: { user: mockUser, session: mockSession },\n        error: null,\n      } as ApiResponse<{ user: AuthUser; session: Session }>);\n\n      // Update supabase.auth.getSession to return the refreshed session after refresh\n      vi.spyOn(supabaseClient.supabase.auth, 'getSession').mockResolvedValue({\n        data: { session: mockSession },\n        error: null,\n      });\n\n      // Patch: Capture and manually trigger the onAuthStateChange callback\n      let authStateChangeCb:\n        | ((event: string, session: Session | null) => void)\n        | undefined;\n      vi.spyOn(\n        supabaseClient.supabase.auth,\n        'onAuthStateChange'\n      ).mockImplementation(cb => {\n        authStateChangeCb = cb;\n        return {\n          data: {\n            subscription: {\n              id: 'test-id',\n              callback: cb,\n              unsubscribe: vi.fn(),\n            },\n          },\n        };\n      });\n\n      const { result } = renderHook(() => useAuth(), { wrapper });\n\n      // Act: Refresh session\n      await act(async () => {\n        await result.current.refreshSession();\n      });\n\n      // Patch: Simulate the auth state change event\n      await act(async () => {\n        if (authStateChangeCb)\n          authStateChangeCb('TOKEN_REFRESHED', mockSession);\n      });\n\n      // Assert: Verify session was refreshed\n      await waitFor(() => {\n        expect(result.current.user).toEqual(mockUser);\n        expect(result.current.session).toEqual(mockSession);\n      });\n    });\n\n    it('should handle sign out', async () => {\n      const { result } = renderHook(() => useAuth(), { wrapper });\n\n      // Act: Sign out\n      await act(async () => {\n        await result.current.signOut();\n      });\n\n      // Assert: Verify user is signed out\n      await waitFor(() => {\n        expect(result.current.user).toBeNull();\n        expect(result.current.session).toBeNull();\n      });\n    });\n  });\n});\n","usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app-cursor/src/features/tasks/components/CountdownTimer.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app-cursor/src/features/tasks/components/ImagePreviewModal.tsx","messages":[],"suppressedMessages":[{"ruleId":"jsx-a11y/click-events-have-key-events","severity":2,"message":"Visible, non-interactive elements with click handlers must have at least one keyboard listener.","line":36,"column":5,"nodeType":"JSXOpeningElement","endLine":43,"endColumn":6,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"jsx-a11y/no-static-element-interactions","severity":2,"message":"Avoid non-native interactive elements. If using native HTML is not possible, add an appropriate role and support for tabbing, mouse, keyboard, and touch inputs to an interactive content element.","line":36,"column":5,"nodeType":"JSXOpeningElement","endLine":43,"endColumn":6,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"jsx-a11y/click-events-have-key-events","severity":2,"message":"Visible, non-interactive elements with click handlers must have at least one keyboard listener.","line":57,"column":7,"nodeType":"JSXOpeningElement","endLine":62,"endColumn":8,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"jsx-a11y/no-static-element-interactions","severity":2,"message":"Avoid non-native interactive elements. If using native HTML is not possible, add an appropriate role and support for tabbing, mouse, keyboard, and touch inputs to an interactive content element.","line":57,"column":7,"nodeType":"JSXOpeningElement","endLine":62,"endColumn":8,"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app-cursor/src/features/tasks/components/TaskExpandButton.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app-cursor/src/features/tasks/components/TaskFilterNavbar.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app-cursor/src/features/tasks/components/TaskPagination.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app-cursor/src/features/tasks/components/TimerTooltip.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app-cursor/src/features/tasks/components/__tests__/CountdownTimer.test.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app-cursor/src/features/tasks/components/__tests__/TaskDetailsContent.test.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app-cursor/src/features/tasks/components/__tests__/TaskImageGallery.test.tsx","messages":[{"ruleId":"promise/prefer-await-to-callbacks","severity":1,"message":"Avoid callbacks. Prefer Async/Await.","line":21,"column":17,"nodeType":"Identifier","messageId":"error","endLine":21,"endColumn":25},{"ruleId":"promise/prefer-await-to-callbacks","severity":1,"message":"Avoid callbacks. Prefer Async/Await.","line":23,"column":24,"nodeType":"CallExpression","messageId":"error","endLine":23,"endColumn":60}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { render, screen } from '@testing-library/react';\nimport { describe, it, expect, vi, beforeAll, afterAll } from 'vitest';\n\nimport type { Task } from '@/types';\n\nimport { TaskImageGallery } from '../display/TaskImageGallery';\n\n// Mock the image preview hook\nvi.mock('../hooks/useImagePreview', () => ({\n  useImagePreview: () => ({\n    isPreviewOpen: false,\n    previewImageUrl: null,\n    openPreview: vi.fn(),\n    closePreview: vi.fn(),\n  }),\n}));\n\n// Mock IntersectionObserver to always intersect\nbeforeAll(() => {\n  class MockIntersectionObserver {\n    constructor(callback) {\n      // Immediately call the callback with isIntersecting: true\n      setTimeout(() => callback([{ isIntersecting: true }]), 0);\n    }\n    observe() {}\n    unobserve() {}\n    disconnect() {}\n    takeRecords() {\n      return [];\n    }\n  }\n  Object.defineProperty(global, 'IntersectionObserver', {\n    writable: true,\n    configurable: true,\n    value: MockIntersectionObserver,\n  });\n});\n\nafterAll(() => {\n  delete global.IntersectionObserver;\n});\n\ndescribe('TaskImageGallery', () => {\n  const mockTask: Task = {\n    id: 'test-id',\n    title: 'Test Task',\n    description: 'Test Description',\n    status: 'pending',\n    photo_url: 'https://example.com/image.jpg',\n    url_link: null,\n    due_date: null,\n    owner_id: 'user-1',\n    assignee_id: null,\n    parent_task_id: null,\n    parent_task: null,\n    created_at: '2024-01-01T00:00:00Z',\n    updated_at: '2024-01-01T00:00:00Z',\n  };\n\n  it('renders image when photo_url is provided', async () => {\n    render(<TaskImageGallery task={mockTask} />);\n\n    const image = await screen.findByAltText('Task image');\n    expect(image).toBeInTheDocument();\n    expect(image).toHaveAttribute('src', 'https://example.com/image.jpg');\n  });\n\n  it('does not render when no photo_url is provided', () => {\n    const taskWithoutImage = { ...mockTask, photo_url: null };\n    const { container } = render(<TaskImageGallery task={taskWithoutImage} />);\n\n    expect(container.firstChild).toBeNull();\n  });\n\n  it('applies correct accessibility attributes', () => {\n    render(<TaskImageGallery task={mockTask} />);\n\n    const button = screen.getByRole('button', { name: /view task image/i });\n    expect(button).toBeInTheDocument();\n    expect(button).toHaveAttribute('aria-label', 'View task image');\n  });\n});\n","usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app-cursor/src/features/tasks/components/actions/FabButton.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app-cursor/src/features/tasks/components/actions/TaskActions.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app-cursor/src/features/tasks/components/actions/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app-cursor/src/features/tasks/components/cards/TaskCard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app-cursor/src/features/tasks/components/cards/TaskCardContent.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app-cursor/src/features/tasks/components/cards/TaskCardHeader.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app-cursor/src/features/tasks/components/cards/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app-cursor/src/features/tasks/components/display/TaskDetails.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app-cursor/src/features/tasks/components/display/TaskDetailsContent.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app-cursor/src/features/tasks/components/display/TaskHeader.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app-cursor/src/features/tasks/components/display/TaskImageGallery.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app-cursor/src/features/tasks/components/display/TaskStatus.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app-cursor/src/features/tasks/components/forms/QuickActionBar.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app-cursor/src/features/tasks/components/forms/UnifiedTaskForm.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app-cursor/src/features/tasks/components/lists/TaskDashboard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app-cursor/src/features/tasks/components/lists/TaskList.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app-cursor/src/features/tasks/components/timer/TimerDisplay.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app-cursor/src/features/tasks/components/timer/TimerRing.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app-cursor/src/features/tasks/context/TaskDataContext.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app-cursor/src/features/tasks/context/TaskUIContext.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app-cursor/src/features/tasks/forms/CreateTaskForm.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app-cursor/src/features/tasks/forms/FollowUpTaskForm.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app-cursor/src/features/tasks/hooks/useCountdown.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app-cursor/src/features/tasks/hooks/useImagePreview.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app-cursor/src/features/tasks/hooks/useTaskAnimation.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app-cursor/src/features/tasks/hooks/useTaskCard.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app-cursor/src/features/tasks/hooks/useTaskForm.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app-cursor/src/features/tasks/hooks/useTaskFormValidation.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app-cursor/src/features/tasks/hooks/useTaskQuery.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app-cursor/src/features/tasks/hooks/useTaskSubmission.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app-cursor/src/features/tasks/hooks/useTaskSubmission.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app-cursor/src/features/tasks/hooks/useTasksFilter.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app-cursor/src/features/tasks/hooks/useTasksQuery.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app-cursor/src/features/tasks/providers/TaskProviders.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app-cursor/src/features/tasks/types.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app-cursor/src/features/tasks/utils/taskUiUtils.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app-cursor/src/features/users/hooks/useProfileValidation.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app-cursor/src/features/users/hooks/useProfileValidation.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app-cursor/src/features/users/hooks/useUsersQuery.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app-cursor/src/hooks/core/auth.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app-cursor/src/hooks/ui/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app-cursor/src/hooks/ui/navbar.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app-cursor/src/hooks/useMotionPreferences.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app-cursor/src/hooks/usePagination.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app-cursor/src/integrations/supabase/client.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app-cursor/src/integrations/supabase/types.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app-cursor/src/lib/__tests__/logger.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app-cursor/src/lib/api/auth.ts","messages":[{"ruleId":"promise/prefer-await-to-callbacks","severity":1,"message":"Avoid callbacks. Prefer Async/Await.","line":347,"column":3,"nodeType":"Identifier","messageId":"error","endLine":347,"endColumn":61}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Unified Auth Functions\n *\n * Provides all authentication functionality as simple, standalone functions.\n * Replaces the class-based AuthService.\n */\n\nimport type { User, Session } from '@supabase/supabase-js';\n\nimport { supabase } from '@/integrations/supabase/client';\nimport type {\n  ApiResponse,\n  ServiceResult,\n  ApiError,\n  AuthResponse,\n} from '@/types';\n\n// === HELPER FUNCTIONS ===\nfunction createApiError(message: string, code?: string): ApiError {\n  return {\n    message,\n    name: 'AuthError',\n    code: code ?? 'AUTH_ERROR',\n  };\n}\n\n// === CORE AUTHENTICATION OPERATIONS ===\n\n/**\n * Sign in user with email and password\n */\nexport async function signIn(\n  email: string,\n  password: string\n): Promise<ApiResponse<AuthResponse>> {\n  try {\n    const { data, error } = await supabase.auth.signInWithPassword({\n      email,\n      password,\n    });\n\n    if (error) {\n      return {\n        success: false,\n        error: createApiError(error.message),\n        data: null,\n      };\n    }\n\n    if (!data.user) {\n      return {\n        success: false,\n        error: createApiError('Sign in failed - no user returned'),\n        data: null,\n      };\n    }\n\n    const authResponse: AuthResponse = {\n      user: data.user,\n      session: data.session,\n      emailConfirmed: !!data.user.email_confirmed_at,\n    };\n\n    return {\n      success: true,\n      error: null,\n      data: authResponse,\n    };\n  } catch (error) {\n    return {\n      success: false,\n      error: createApiError(\n        error instanceof Error ? error.message : 'Unknown error'\n      ),\n      data: null,\n    };\n  }\n}\n\n/**\n * Sign up user with email and password\n */\nexport async function signUp(\n  email: string,\n  password: string,\n  options?: unknown\n): Promise<ApiResponse<AuthResponse>> {\n  try {\n    const { data, error } = await supabase.auth.signUp({\n      email,\n      password,\n      options,\n    });\n\n    if (error) {\n      return {\n        success: false,\n        error: createApiError(error.message),\n        data: null,\n      };\n    }\n\n    if (!data.user) {\n      return {\n        success: false,\n        error: createApiError('Sign up failed - no user returned'),\n        data: null,\n      };\n    }\n\n    const authResponse: AuthResponse = {\n      user: data.user,\n      session: data.session,\n      emailConfirmed: !!data.user.email_confirmed_at,\n    };\n\n    return {\n      success: true,\n      error: null,\n      data: authResponse,\n    };\n  } catch (error) {\n    return {\n      success: false,\n      error: createApiError(\n        error instanceof Error ? error.message : 'Unknown error'\n      ),\n      data: null,\n    };\n  }\n}\n\n/**\n * Sign out current user\n */\nexport async function signOut(): Promise<ApiResponse<void>> {\n  try {\n    const { error } = await supabase.auth.signOut();\n\n    if (error) {\n      return {\n        success: false,\n        error: createApiError(error.message),\n        data: null,\n      };\n    }\n\n    return {\n      success: true,\n      error: null,\n      data: null,\n    };\n  } catch (error) {\n    return {\n      success: false,\n      error: createApiError(\n        error instanceof Error ? error.message : 'Unknown error'\n      ),\n      data: null,\n    };\n  }\n}\n\n// === SESSION MANAGEMENT ===\n\n/**\n * Get current session\n */\nexport async function getCurrentSession(): Promise<ServiceResult<Session>> {\n  try {\n    const {\n      data: { session },\n      error,\n    } = await supabase.auth.getSession();\n\n    if (error) {\n      return {\n        success: false,\n        error: createApiError(error.message),\n        data: null,\n      };\n    }\n\n    return {\n      success: true,\n      error: null,\n      data: session,\n    };\n  } catch (error) {\n    return {\n      success: false,\n      error: createApiError(\n        error instanceof Error ? error.message : 'Unknown error'\n      ),\n      data: null,\n    };\n  }\n}\n\n/**\n * Get current user\n */\nexport async function getCurrentUser(): Promise<ServiceResult<User>> {\n  try {\n    const {\n      data: { user },\n      error,\n    } = await supabase.auth.getUser();\n\n    if (error) {\n      return {\n        success: false,\n        error: createApiError(error.message),\n        data: null,\n      };\n    }\n\n    if (!user) {\n      return {\n        success: false,\n        error: createApiError('No authenticated user'),\n        data: null,\n      };\n    }\n\n    return {\n      success: true,\n      error: null,\n      data: user,\n    };\n  } catch (error) {\n    return {\n      success: false,\n      error: createApiError(\n        error instanceof Error ? error.message : 'Unknown error'\n      ),\n      data: null,\n    };\n  }\n}\n\n/**\n * Get current user ID\n */\nexport async function getCurrentUserId(): Promise<ServiceResult<string>> {\n  try {\n    const {\n      data: { user },\n      error,\n    } = await supabase.auth.getUser();\n\n    if (error) {\n      return {\n        success: false,\n        error: createApiError(error.message),\n        data: null,\n      };\n    }\n\n    if (!user) {\n      return {\n        success: false,\n        error: createApiError('No authenticated user'),\n        data: null,\n      };\n    }\n\n    return {\n      success: true,\n      error: null,\n      data: user.id,\n    };\n  } catch (error) {\n    return {\n      success: false,\n      error: createApiError(\n        error instanceof Error ? error.message : 'Unknown error'\n      ),\n      data: null,\n    };\n  }\n}\n\n/**\n * Check if a user is currently authenticated.\n */\nexport async function isAuthenticated(): Promise<boolean> {\n  const {\n    data: { session },\n  } = await supabase.auth.getSession();\n  return !!session;\n}\n\n/**\n * Refresh the current session\n *\n * Note: Supabase client automatically refreshes the token. This is for manual refreshing.\n */\nexport async function refreshSession(): Promise<\n  ApiResponse<{ user: User; session: Session }>\n> {\n  try {\n    const { data, error } = await supabase.auth.refreshSession();\n\n    if (error) {\n      return {\n        success: false,\n        error: createApiError(error.message),\n        data: null,\n      };\n    }\n\n    if (!data.user || !data.session) {\n      return {\n        success: false,\n        error: createApiError('Session refresh failed'),\n        data: null,\n      };\n    }\n\n    return {\n      success: true,\n      error: null,\n      data: {\n        user: data.user,\n        session: data.session,\n      },\n    };\n  } catch (error) {\n    return {\n      success: false,\n      error: createApiError(\n        error instanceof Error ? error.message : 'Unknown error'\n      ),\n      data: null,\n    };\n  }\n}\n\n/**\n * Set up a listener for authentication state changes.\n *\n * @param callback - The function to call when auth state changes.\n * @returns An object with a `unsubscribe` method.\n */\nexport function onAuthStateChange(\n  callback: (event: string, session: Session | null) => void\n) {\n  const {\n    data: { subscription },\n  } = supabase.auth.onAuthStateChange(callback);\n  return subscription;\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app-cursor/src/lib/api/standardized-api.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app-cursor/src/lib/api/tasks/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app-cursor/src/lib/api/users.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app-cursor/src/lib/auth-utils.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app-cursor/src/lib/config/app.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app-cursor/src/lib/logger.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app-cursor/src/lib/query-client.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app-cursor/src/lib/testing/__tests__/context-helpers.test.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app-cursor/src/lib/testing/context-helpers.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app-cursor/src/lib/utils/animation.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app-cursor/src/lib/utils/async.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app-cursor/src/lib/utils/core.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app-cursor/src/lib/utils/createContext.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app-cursor/src/lib/utils/data.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app-cursor/src/lib/utils/date.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app-cursor/src/lib/utils/format.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app-cursor/src/lib/utils/image/conversion.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app-cursor/src/lib/utils/image/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app-cursor/src/lib/utils/image/metadata.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app-cursor/src/lib/utils/image/processing.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app-cursor/src/lib/utils/image/types.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app-cursor/src/lib/utils/image/utils.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app-cursor/src/lib/utils/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app-cursor/src/lib/utils/pagination.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app-cursor/src/lib/utils/patterns.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app-cursor/src/lib/utils/ui.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app-cursor/src/lib/validation/messages.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app-cursor/src/lib/validation/schemas.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app-cursor/src/main.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app-cursor/src/pages/AuthPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app-cursor/src/pages/CreateTaskPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app-cursor/src/pages/FollowUpTaskPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app-cursor/src/pages/NotFound.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app-cursor/src/pages/TaskDetailsPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app-cursor/src/test/integration/setup.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app-cursor/src/test/setup.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app-cursor/src/test/test-utils.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app-cursor/src/types/api.types.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app-cursor/src/types/async-state.types.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app-cursor/src/types/auth.types.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app-cursor/src/types/database.d.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app-cursor/src/types/feature-types/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app-cursor/src/types/feature-types/task.types.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app-cursor/src/types/feature-types/user.types.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app-cursor/src/types/form.types.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app-cursor/src/types/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app-cursor/src/types/pagination.types.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app-cursor/src/types/shared/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app-cursor/src/types/utility.types.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app-cursor/src/vite-env.d.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app-cursor/tailwind.config.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app-cursor/vite.config.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]}]