
> vite_react_shadcn_ts@0.0.0 lint
> eslint . --format=json

[{"filePath":"/Users/lukemckenzie/task-beacon-app/task-beacon-app-cursor/task-beacon-app/eslint.config.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app/task-beacon-app-cursor/task-beacon-app/postcss.config.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app/task-beacon-app-cursor/task-beacon-app/src/App.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app/task-beacon-app-cursor/task-beacon-app/src/components/ErrorBoundary.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app/task-beacon-app-cursor/task-beacon-app/src/components/OptimizedComponents.tsx","messages":[{"ruleId":"react-hooks/rules-of-hooks","severity":2,"message":"React Hook \"useRenderTracking\" is called conditionally. React Hooks must be called in the exact same order in every component render.","line":33,"column":7,"nodeType":"Identifier","endLine":33,"endColumn":24},{"ruleId":"react-hooks/rules-of-hooks","severity":2,"message":"React Hook \"useMemo\" is called conditionally. React Hooks must be called in the exact same order in every component render.","line":49,"column":7,"nodeType":"Identifier","endLine":49,"endColumn":14},{"ruleId":"react-refresh/only-export-components","severity":1,"message":"Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.","line":83,"column":17,"nodeType":"Identifier","messageId":"namedExport","endLine":83,"endColumn":33},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":90,"column":33,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":90,"endColumn":36,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2397,2400],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2397,2400],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"react-refresh/only-export-components","severity":1,"message":"Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.","line":265,"column":17,"nodeType":"Identifier","messageId":"namedExport","endLine":265,"endColumn":37},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":265,"column":73,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":265,"endColumn":76,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6591,6594],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6591,6594],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":265,"column":83,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":265,"endColumn":86,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6601,6604],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6601,6604],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback received a function whose dependencies are unknown. Pass an inline function instead.","line":273,"column":43,"nodeType":"Identifier","endLine":273,"endColumn":54},{"ruleId":"react-hooks/rules-of-hooks","severity":2,"message":"React Hook \"useCallback\" cannot be called inside a callback. React Hooks must be called in a React function component or a custom React Hook function.","line":273,"column":43,"nodeType":"Identifier","endLine":273,"endColumn":54},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useMemo was passed a dependency list that is not an array literal. This means we can't statically verify whether you've passed the correct dependencies.","line":280,"column":6,"nodeType":"Identifier","endLine":280,"endColumn":10},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useMemo has missing dependencies: 'deps' and 'handlers'. Either include them or remove the dependency array.","line":280,"column":6,"nodeType":"Identifier","endLine":280,"endColumn":10,"suggestions":[{"desc":"Update the dependencies array to be: [deps, handlers]","fix":{"range":[6946,6950],"text":"[deps, handlers]"}}]}],"suppressedMessages":[],"errorCount":6,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { memo, useMemo, useCallback, Suspense, ComponentType, ReactNode } from 'react';\nimport { ErrorBoundary } from './ErrorBoundary';\nimport { DataErrorBoundary } from './error-boundaries/DataErrorBoundary';\nimport { useRenderTracking } from '@/hooks/useOptimizedMemo';\nimport { memoryOptimizer } from '@/lib/utils/performance';\nimport { Skeleton } from './ui/skeleton';\n\n/**\n * High-performance component wrapper with automatic optimizations\n */\ninterface OptimizedComponentProps {\n  children: ReactNode;\n  name: string;\n  enableTracking?: boolean;\n  enableMemo?: boolean;\n  fallback?: ReactNode;\n  errorBoundary?: boolean;\n}\n\n/**\n * Wrapper component that applies performance optimizations automatically\n */\nexport const OptimizedComponent = memo<OptimizedComponentProps>(({\n  children,\n  name,\n  enableTracking = true,\n  enableMemo = true,\n  fallback,\n  errorBoundary = true,\n}) => {\n  // Track render performance if enabled\n  const { renderCount, markRenderComplete } = enableTracking \n    ? useRenderTracking(name)\n    : { renderCount: 0, markRenderComplete: () => {} };\n\n  // Cleanup on unmount\n  React.useEffect(() => {\n    return () => {\n      memoryOptimizer.cleanupComponent(name);\n    };\n  }, [name]);\n\n  // Mark render complete\n  React.useEffect(() => {\n    markRenderComplete();\n  });\n\n  const optimizedChildren = enableMemo \n    ? useMemo(() => children, [children])\n    : children;\n\n  const content = (\n    <Suspense fallback={fallback || <OptimizedSkeleton />}>\n      {optimizedChildren}\n    </Suspense>\n  );\n\n  if (errorBoundary) {\n    return (\n      <DataErrorBoundary dataType={name}>\n        {content}\n      </DataErrorBoundary>\n    );\n  }\n\n  return content;\n}, (prevProps, nextProps) => {\n  // Custom comparison for better performance\n  return (\n    prevProps.name === nextProps.name &&\n    prevProps.enableTracking === nextProps.enableTracking &&\n    prevProps.enableMemo === nextProps.enableMemo &&\n    prevProps.errorBoundary === nextProps.errorBoundary &&\n    prevProps.children === nextProps.children\n  );\n});\n\nOptimizedComponent.displayName = 'OptimizedComponent';\n\n/**\n * HOC for creating performance-optimized components\n */\nexport function withOptimization<P extends object>(\n  Component: ComponentType<P>,\n  options?: {\n    name?: string;\n    enableTracking?: boolean;\n    enableMemo?: boolean;\n    errorBoundary?: boolean;\n    preloadData?: () => Promise<any>;\n  }\n) {\n  const {\n    name = Component.displayName || Component.name || 'Unknown',\n    enableTracking = true,\n    enableMemo = true,\n    errorBoundary = true,\n    preloadData,\n  } = options || {};\n\n  const OptimizedWrappedComponent = memo<P>((props) => {\n    // Preload data if specified\n    React.useEffect(() => {\n      if (preloadData) {\n        preloadData().catch(console.debug);\n      }\n    }, []);\n\n    return (\n      <OptimizedComponent\n        name={name}\n        enableTracking={enableTracking}\n        enableMemo={enableMemo}\n        errorBoundary={errorBoundary}\n      >\n        <Component {...props} />\n      </OptimizedComponent>\n    );\n  });\n\n  OptimizedWrappedComponent.displayName = `Optimized(${name})`;\n\n  return OptimizedWrappedComponent;\n}\n\n/**\n * Optimized skeleton component for loading states\n */\nconst OptimizedSkeleton = memo(() => (\n  <div className=\"space-y-4 p-4\">\n    <Skeleton className=\"h-6 w-3/4\" />\n    <Skeleton className=\"h-4 w-1/2\" />\n    <Skeleton className=\"h-20 w-full\" />\n  </div>\n));\n\nOptimizedSkeleton.displayName = 'OptimizedSkeleton';\n\n/**\n * Optimized list component for rendering large datasets\n */\ninterface OptimizedListProps<T> {\n  items: T[];\n  renderItem: (item: T, index: number) => ReactNode;\n  keyExtractor: (item: T, index: number) => string | number;\n  chunkSize?: number;\n  loadMoreThreshold?: number;\n  onLoadMore?: () => void;\n  loading?: boolean;\n  error?: string | null;\n  emptyState?: ReactNode;\n  className?: string;\n}\n\nexport function OptimizedList<T>({\n  items,\n  renderItem,\n  keyExtractor,\n  chunkSize = 50,\n  loadMoreThreshold = 10,\n  onLoadMore,\n  loading = false,\n  error = null,\n  emptyState,\n  className = '',\n}: OptimizedListProps<T>) {\n  const [visibleItems, setVisibleItems] = React.useState(Math.min(chunkSize, items.length));\n\n  // Load more items when scrolling near the end\n  const loadMoreRef = React.useRef<HTMLDivElement>(null);\n\n  React.useEffect(() => {\n    const observer = new IntersectionObserver(\n      (entries) => {\n        if (entries[0].isIntersecting && !loading) {\n          if (visibleItems < items.length) {\n            setVisibleItems(prev => Math.min(prev + chunkSize, items.length));\n          } else if (onLoadMore) {\n            onLoadMore();\n          }\n        }\n      },\n      { threshold: 0.1 }\n    );\n\n    if (loadMoreRef.current) {\n      observer.observe(loadMoreRef.current);\n    }\n\n    return () => observer.disconnect();\n  }, [visibleItems, items.length, loading, onLoadMore, chunkSize]);\n\n  const memoizedItems = useMemo(\n    () => items.slice(0, visibleItems),\n    [items, visibleItems]\n  );\n\n  if (error) {\n    return (\n      <div className=\"text-center py-8 text-red-600\">\n        Error loading items: {error}\n      </div>\n    );\n  }\n\n  if (items.length === 0 && !loading) {\n    return emptyState || (\n      <div className=\"text-center py-8 text-gray-500\">\n        No items to display\n      </div>\n    );\n  }\n\n  return (\n    <div className={className}>\n      {memoizedItems.map((item, index) => (\n        <OptimizedListItem\n          key={keyExtractor(item, index)}\n          item={item}\n          index={index}\n          renderItem={renderItem}\n        />\n      ))}\n      \n      {/* Load more trigger */}\n      {(visibleItems < items.length || loading) && (\n        <div\n          ref={loadMoreRef}\n          className=\"flex justify-center py-4\"\n        >\n          {loading ? (\n            <OptimizedSkeleton />\n          ) : (\n            <div className=\"h-4\" />\n          )}\n        </div>\n      )}\n    </div>\n  );\n}\n\n/**\n * Optimized list item component with memo\n */\ninterface OptimizedListItemProps<T> {\n  item: T;\n  index: number;\n  renderItem: (item: T, index: number) => ReactNode;\n}\n\nconst OptimizedListItem = memo(<T,>({\n  item,\n  index,\n  renderItem,\n}: OptimizedListItemProps<T>) => (\n  <>{renderItem(item, index)}</>\n), (prevProps, nextProps) => {\n  // Only re-render if the item actually changed\n  return prevProps.item === nextProps.item && prevProps.index === nextProps.index;\n}) as <T>(props: OptimizedListItemProps<T>) => JSX.Element;\n\n/**\n * Hook for optimized event handlers\n */\nexport function useOptimizedHandlers<T extends Record<string, (...args: any[]) => any>>(\n  handlers: T,\n  deps: React.DependencyList\n): T {\n  return useMemo(() => {\n    const optimizedHandlers = {} as T;\n    \n    Object.keys(handlers).forEach((key) => {\n      optimizedHandlers[key as keyof T] = useCallback(\n        handlers[key as keyof T],\n        deps\n      ) as T[keyof T];\n    });\n    \n    return optimizedHandlers;\n  }, deps);\n}\n\n/**\n * Optimized data fetching component\n */\ninterface OptimizedDataFetcherProps<T> {\n  fetchData: () => Promise<T>;\n  children: (data: T) => ReactNode;\n  loadingFallback?: ReactNode;\n  errorFallback?: (error: Error) => ReactNode;\n  cacheKey?: string;\n  refetchInterval?: number;\n}\n\nexport function OptimizedDataFetcher<T>({\n  fetchData,\n  children,\n  loadingFallback,\n  errorFallback,\n  cacheKey,\n  refetchInterval,\n}: OptimizedDataFetcherProps<T>) {\n  const [state, setState] = React.useState<{\n    data: T | null;\n    loading: boolean;\n    error: Error | null;\n  }>({\n    data: null,\n    loading: true,\n    error: null,\n  });\n\n  const fetchDataCallback = useCallback(async () => {\n    setState(prev => ({ ...prev, loading: true, error: null }));\n    \n    try {\n      const data = await fetchData();\n      setState({ data, loading: false, error: null });\n    } catch (error) {\n      setState({ data: null, loading: false, error: error as Error });\n    }\n  }, [fetchData]);\n\n  React.useEffect(() => {\n    fetchDataCallback();\n  }, [fetchDataCallback]);\n\n  // Set up refetch interval if specified\n  React.useEffect(() => {\n    if (refetchInterval && refetchInterval > 0) {\n      const interval = setInterval(fetchDataCallback, refetchInterval);\n      return () => clearInterval(interval);\n    }\n  }, [fetchDataCallback, refetchInterval]);\n\n  if (state.loading && !state.data) {\n    return <>{loadingFallback || <OptimizedSkeleton />}</>;\n  }\n\n  if (state.error) {\n    return <>{errorFallback ? errorFallback(state.error) : `Error: ${state.error.message}`}</>;\n  }\n\n  if (!state.data) {\n    return <>No data available</>;\n  }\n\n  return <>{children(state.data)}</>;\n} ","usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app/task-beacon-app-cursor/task-beacon-app/src/components/__tests__/ErrorBoundary.test.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app/task-beacon-app-cursor/task-beacon-app/src/components/business/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app/task-beacon-app-cursor/task-beacon-app/src/components/error-boundaries/DataErrorBoundary.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":87,"column":38,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":87,"endColumn":41,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2150,2153],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2150,2153],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { Component, ReactNode } from 'react';\nimport { AlertTriangle, RefreshCw, ArrowLeft, Database } from 'lucide-react';\nimport { logger } from '@/lib/logger';\n\ninterface DataErrorBoundaryState {\n  hasError: boolean;\n  error?: Error;\n  errorInfo?: string;\n}\n\ninterface DataErrorBoundaryProps {\n  children: ReactNode;\n  fallback?: ReactNode;\n  onError?: (error: Error, errorInfo: string) => void;\n  onRetry?: () => void;\n  onGoBack?: () => void;\n  dataType?: string; // e.g., \"tasks\", \"users\", \"projects\"\n  showGoBack?: boolean;\n  showRefresh?: boolean;\n}\n\n/**\n * Generic data error boundary for API and data loading errors\n * \n * Provides common recovery options:\n * - Retry the failed operation\n * - Go back to previous page\n * - Refresh the page\n * - Clear cached data\n */\nexport class DataErrorBoundary extends Component<\n  DataErrorBoundaryProps,\n  DataErrorBoundaryState\n> {\n  state: DataErrorBoundaryState = { hasError: false };\n\n  static getDerivedStateFromError(error: Error): DataErrorBoundaryState {\n    return { \n      hasError: true, \n      error \n    };\n  }\n\n  componentDidCatch(error: Error, errorInfo: React.ErrorInfo) {\n    const errorDetails = `${error.message}\\n${error.stack}\\n${errorInfo.componentStack}`;\n    \n    // Use centralized logger\n    logger.error('Data Loading Error', error, {\n      feature: 'data',\n      dataType: this.props.dataType || 'unknown',\n      errorInfo: errorDetails,\n      timestamp: new Date().toISOString(),\n    });\n\n    this.setState({\n      error,\n      errorInfo: errorDetails,\n    });\n\n    if (this.props.onError) {\n      this.props.onError(error, errorDetails);\n    }\n  }\n\n  private handleRetry = () => {\n    if (this.props.onRetry) {\n      this.props.onRetry();\n    }\n    this.setState({ hasError: false, error: undefined, errorInfo: undefined });\n  };\n\n  private handleGoBack = () => {\n    if (this.props.onGoBack) {\n      this.props.onGoBack();\n    } else {\n      window.history.back();\n    }\n  };\n\n  private handleRefresh = () => {\n    window.location.reload();\n  };\n\n  private handleClearCache = () => {\n    // Clear React Query cache\n    try {\n      const queryClient = (window as any).__REACT_QUERY_CLIENT__;\n      if (queryClient && this.props.dataType) {\n        queryClient.removeQueries({ queryKey: [this.props.dataType] });\n      }\n    } catch (e) {\n      logger.warn('Failed to clear query cache', { error: (e as Error).message });\n    }\n\n    this.handleRetry();\n  };\n\n  render() {\n    if (this.state.hasError) {\n      if (this.props.fallback) {\n        return this.props.fallback;\n      }\n\n      const { dataType = 'data', showGoBack = true, showRefresh = true } = this.props;\n\n      return (\n        <div className=\"flex min-h-[400px] items-center justify-center p-6\">\n          <div className=\"max-w-md text-center space-y-6\">\n            <div className=\"flex justify-center\">\n              <div className=\"flex h-12 w-12 items-center justify-center rounded-full bg-red-100 dark:bg-red-900/20\">\n                <Database className=\"h-6 w-6 text-red-600 dark:text-red-400\" />\n              </div>\n            </div>\n            \n            <div className=\"space-y-2\">\n              <h2 className=\"text-xl font-semibold text-gray-900 dark:text-gray-100\">\n                Unable to Load {dataType.charAt(0).toUpperCase() + dataType.slice(1)}\n              </h2>\n              <p className=\"text-sm text-gray-600 dark:text-gray-400\">\n                There was a problem loading the {dataType}. This might be due to a \n                network issue, server problem, or corrupted data.\n              </p>\n            </div>\n            \n            <div className=\"space-y-3\">\n              <button\n                onClick={this.handleRetry}\n                className=\"flex w-full items-center justify-center gap-2 rounded-md bg-blue-600 px-4 py-2 text-sm font-medium text-white hover:bg-blue-700 transition-colors\"\n              >\n                <RefreshCw className=\"h-4 w-4\" />\n                Try Again\n              </button>\n              \n              <div className=\"grid grid-cols-2 gap-2\">\n                {showGoBack && (\n                  <button\n                    onClick={this.handleGoBack}\n                    className=\"flex items-center justify-center gap-2 rounded-md border border-gray-300 bg-white px-3 py-2 text-sm font-medium text-gray-700 hover:bg-gray-50 dark:border-gray-600 dark:bg-gray-800 dark:text-gray-300 dark:hover:bg-gray-700 transition-colors\"\n                  >\n                    <ArrowLeft className=\"h-4 w-4\" />\n                    Go Back\n                  </button>\n                )}\n                \n                {showRefresh && (\n                  <button\n                    onClick={this.handleRefresh}\n                    className=\"flex items-center justify-center gap-2 rounded-md border border-gray-300 bg-white px-3 py-2 text-sm font-medium text-gray-700 hover:bg-gray-50 dark:border-gray-600 dark:bg-gray-800 dark:text-gray-300 dark:hover:bg-gray-700 transition-colors\"\n                  >\n                    <RefreshCw className=\"h-4 w-4\" />\n                    Refresh\n                  </button>\n                )}\n              </div>\n\n              <button\n                onClick={this.handleClearCache}\n                className=\"flex w-full items-center justify-center gap-2 rounded-md border border-gray-300 bg-white px-3 py-2 text-sm font-medium text-gray-700 hover:bg-gray-50 dark:border-gray-600 dark:bg-gray-800 dark:text-gray-300 dark:hover:bg-gray-700 transition-colors\"\n              >\n                <Database className=\"h-4 w-4\" />\n                Clear Cache & Retry\n              </button>\n            </div>\n\n            {/* Development error details */}\n            {process.env.NODE_ENV === 'development' && this.state.error && (\n              <details className=\"mt-4 text-left\">\n                <summary className=\"cursor-pointer text-sm font-medium text-gray-600 hover:text-gray-900 dark:text-gray-400 dark:hover:text-gray-100\">\n                  Error Details (Dev)\n                </summary>\n                <div className=\"mt-2 p-3 bg-gray-100 dark:bg-gray-800 rounded-md text-xs font-mono text-gray-600 dark:text-gray-400 whitespace-pre-wrap break-all max-h-32 overflow-y-auto\">\n                  {this.state.error.message}\n                  {this.state.errorInfo && (\n                    <>\n                      {'\\n\\nStack:'}\n                      {this.state.errorInfo}\n                    </>\n                  )}\n                </div>\n              </details>\n            )}\n          </div>\n        </div>\n      );\n    }\n\n    return this.props.children;\n  }\n} ","usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app/task-beacon-app-cursor/task-beacon-app/src/components/error-boundaries/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app/task-beacon-app-cursor/task-beacon-app/src/components/form/BaseTaskForm.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app/task-beacon-app-cursor/task-beacon-app/src/components/form/DatePickerField.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app/task-beacon-app-cursor/task-beacon-app/src/components/form/EnhancedDatePicker.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app/task-beacon-app-cursor/task-beacon-app/src/components/form/EnhancedFormActions.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app/task-beacon-app-cursor/task-beacon-app/src/components/form/EnhancedPhotoUpload.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app/task-beacon-app-cursor/task-beacon-app/src/components/form/EnhancedUserSearch.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app/task-beacon-app-cursor/task-beacon-app/src/components/form/FormActions.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app/task-beacon-app-cursor/task-beacon-app/src/components/form/ParentTaskReference.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app/task-beacon-app-cursor/task-beacon-app/src/components/form/PhotoUploadField.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app/task-beacon-app-cursor/task-beacon-app/src/components/form/ProgressiveFieldContainer.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app/task-beacon-app-cursor/task-beacon-app/src/components/form/QuickActionBar.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app/task-beacon-app-cursor/task-beacon-app/src/components/form/ReferenceCard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app/task-beacon-app-cursor/task-beacon-app/src/components/form/UrlField.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app/task-beacon-app-cursor/task-beacon-app/src/components/form/UrlInputModal.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app/task-beacon-app-cursor/task-beacon-app/src/components/form/UserSearchField.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app/task-beacon-app-cursor/task-beacon-app/src/components/form/UserSearchModal.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app/task-beacon-app-cursor/task-beacon-app/src/components/form/form-utils.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app/task-beacon-app-cursor/task-beacon-app/src/components/form/hooks/useFormState.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app/task-beacon-app-cursor/task-beacon-app/src/components/form/hooks/usePhotoUpload.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app/task-beacon-app-cursor/task-beacon-app/src/components/form/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app/task-beacon-app-cursor/task-beacon-app/src/components/hoc/withPerformanceTracking.tsx","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: Unexpected token. Did you mean `{'>'}` or `&gt;`?","line":202,"column":48}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { ComponentType, memo, forwardRef, useEffect, useRef } from 'react';\nimport { performanceMonitor } from '@/lib/utils/performance';\nimport { useRenderTracking } from '@/hooks/useOptimizedMemo';\n\ninterface PerformanceTrackingOptions {\n  componentName?: string;\n  trackRenders?: boolean;\n  trackProps?: boolean;\n  warnOnSlowRenders?: boolean;\n  slowRenderThreshold?: number;\n}\n\n/**\n * Higher-order component that adds automatic performance tracking to any React component\n * \n * Features:\n * - Automatic render time tracking\n * - Props change detection\n * - Slow render warnings\n * - Memory usage monitoring\n * - Component lifecycle tracking\n */\nexport function withPerformanceTracking<P extends Record<string, any>>(\n  WrappedComponent: ComponentType<P>,\n  options: PerformanceTrackingOptions = {}\n) {\n  const {\n    componentName = WrappedComponent.displayName || WrappedComponent.name || 'UnknownComponent',\n    trackRenders = true,\n    trackProps = true,\n    warnOnSlowRenders = true,\n    slowRenderThreshold = 16, // ms\n  } = options;\n\n  const PerformanceTrackedComponent = forwardRef<any, P>((props, ref) => {\n    const mountTimeRef = useRef<number>(0);\n    const renderCountRef = useRef<number>(0);\n    const lastPropsRef = useRef<P | null>(null);\n\n    // Use our optimized render tracking hook\n    const { renderCount, markRenderComplete } = useRenderTracking(\n      componentName,\n      trackProps ? props : undefined\n    );\n\n    // Track component mount and unmount\n    useEffect(() => {\n      mountTimeRef.current = performance.now();\n      performanceMonitor.start(`${componentName}-mount`);\n\n      return () => {\n        const mountDuration = performance.now() - mountTimeRef.current;\n        performanceMonitor.end(`${componentName}-mount`);\n        \n        // Log component lifecycle metrics\n        if (process.env.NODE_ENV === 'development') {\n          console.debug(`📊 Component ${componentName} lifecycle:`, {\n            totalMountTime: `${mountDuration.toFixed(2)}ms`,\n            totalRenders: renderCountRef.current,\n            averageRenderTime: renderCountRef.current > 0 \n              ? `${(mountDuration / renderCountRef.current).toFixed(2)}ms`\n              : '0ms'\n          });\n        }\n      };\n    }, []);\n\n    // Track individual renders\n    useEffect(() => {\n      if (!trackRenders) return;\n\n      const renderStartTime = performance.now();\n      renderCountRef.current++;\n\n      // Check for props changes\n      let propsChanged = false;\n      if (trackProps && lastPropsRef.current) {\n        propsChanged = JSON.stringify(props) !== JSON.stringify(lastPropsRef.current);\n      }\n      lastPropsRef.current = props;\n\n      // Use RAF to measure actual render completion\n      requestAnimationFrame(() => {\n        const renderDuration = performance.now() - renderStartTime;\n        \n        // Track render performance\n        performanceMonitor.trackComponentRender(componentName, renderDuration, propsChanged);\n        \n        // Warn about slow renders\n        if (warnOnSlowRenders && renderDuration > slowRenderThreshold) {\n          console.warn(`🐌 Slow render in ${componentName}: ${renderDuration.toFixed(2)}ms`, {\n            renderCount: renderCountRef.current,\n            propsChanged,\n            renderDuration\n          });\n        }\n\n        markRenderComplete();\n      });\n    });\n\n    return <WrappedComponent {...props} ref={ref} />;\n  });\n\n  PerformanceTrackedComponent.displayName = `withPerformanceTracking(${componentName})`;\n\n  // Return memoized component to prevent unnecessary re-renders\n  return memo(PerformanceTrackedComponent);\n}\n\n/**\n * Decorator function for class components (if needed for legacy support)\n */\nexport function performanceTracked(options?: PerformanceTrackingOptions) {\n  return function <P extends Record<string, any>>(target: ComponentType<P>): ComponentType<P> {\n    return withPerformanceTracking(target, options);\n  };\n}\n\n/**\n * Hook version for functional components that prefer hooks over HOCs\n */\nexport function useComponentPerformanceTracking(\n  componentName: string,\n  props?: Record<string, any>,\n  options: Omit<PerformanceTrackingOptions, 'componentName'> = {}\n) {\n  const {\n    trackRenders = true,\n    trackProps = true,\n    warnOnSlowRenders = true,\n    slowRenderThreshold = 16,\n  } = options;\n\n  const renderStartRef = useRef<number>(0);\n  const mountTimeRef = useRef<number>(0);\n\n  // Track render start\n  if (trackRenders) {\n    renderStartRef.current = performance.now();\n  }\n\n  // Use optimized render tracking\n  const { renderCount, markRenderComplete } = useRenderTracking(\n    componentName,\n    trackProps ? props : undefined\n  );\n\n  // Track mount\n  useEffect(() => {\n    mountTimeRef.current = performance.now();\n    performanceMonitor.start(`${componentName}-mount`);\n\n    return () => {\n      performanceMonitor.end(`${componentName}-mount`);\n    };\n  }, [componentName]);\n\n  // Track render completion\n  useEffect(() => {\n    if (!trackRenders) return;\n\n    requestAnimationFrame(() => {\n      const renderDuration = performance.now() - renderStartRef.current;\n      \n      if (warnOnSlowRenders && renderDuration > slowRenderThreshold) {\n        console.warn(`🐌 Slow render in ${componentName}: ${renderDuration.toFixed(2)}ms`);\n      }\n\n      markRenderComplete();\n    });\n  });\n\n  return {\n    renderCount,\n    markRenderComplete,\n    componentName,\n  };\n}\n\n/**\n * Performance tracking utilities for manual instrumentation\n */\nexport const performanceUtils = {\n  /**\n   * Mark the start of a performance-critical operation\n   */\n  startOperation: (name: string, metadata?: Record<string, any>) => {\n    performanceMonitor.start(name, metadata);\n  },\n\n  /**\n   * Mark the end of a performance-critical operation\n   */\n  endOperation: (name: string) => {\n    return performanceMonitor.end(name);\n  },\n\n  /**\n   * Measure a synchronous operation\n   */\n  measureSync: <T>(name: string, operation: () => T, metadata?: Record<string, any>): T => {\n    return performanceMonitor.measure(name, operation, metadata);\n  },\n\n  /**\n   * Measure an asynchronous operation\n   */\n  measureAsync: async <T>(\n    name: string, \n    operation: () => Promise<T>,\n    metadata?: Record<string, any>\n  ): Promise<T> => {\n    performanceMonitor.start(name, metadata);\n    try {\n      const result = await operation();\n      performanceMonitor.end(name);\n      return result;\n    } catch (error) {\n      performanceMonitor.end(name);\n      throw error;\n    }\n  },\n}; ","usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app/task-beacon-app-cursor/task-beacon-app/src/components/layout/AuthenticatedApp.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app/task-beacon-app-cursor/task-beacon-app/src/components/layout/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app/task-beacon-app-cursor/task-beacon-app/src/components/monitoring/PerformanceDashboard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app/task-beacon-app-cursor/task-beacon-app/src/components/monitoring/PerformanceMonitor.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app/task-beacon-app-cursor/task-beacon-app/src/components/optimization/OptimizationAnalyzer.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":32,"column":40,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":32,"endColumn":43,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1090,1093],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1090,1093],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":211,"column":88,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":211,"endColumn":91,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7942,7945],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7942,7945],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":235,"column":91,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":235,"endColumn":94,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[9155,9158],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[9155,9158],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":253,"column":81,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":253,"endColumn":84,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[10047,10050],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[10047,10050],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\nimport { componentAnalyzer } from '@/lib/utils/componentOptimization';\nimport { performanceMonitor } from '@/lib/utils/performance';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Badge } from '@/components/ui/badge';\nimport { Button } from '@/components/ui/button';\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';\nimport { Alert, AlertDescription } from '@/components/ui/alert';\nimport { Progress } from '@/components/ui/progress';\nimport { \n  Activity, \n  Zap, \n  TrendingUp, \n  AlertTriangle, \n  CheckCircle, \n  RefreshCw,\n  Eye,\n  EyeOff\n} from 'lucide-react';\n\ninterface OptimizationAnalyzerProps {\n  showInProduction?: boolean;\n}\n\n/**\n * Development tool for analyzing component performance and providing optimization suggestions\n */\nexport const OptimizationAnalyzer: React.FC<OptimizationAnalyzerProps> = ({ \n  showInProduction = false \n}) => {\n  const [isVisible, setIsVisible] = useState(false);\n  const [report, setReport] = useState<any>(null);\n  const [autoRefresh, setAutoRefresh] = useState(true);\n  const [selectedTab, setSelectedTab] = useState('overview');\n\n  // Only show in development unless explicitly enabled\n  const shouldShow = process.env.NODE_ENV === 'development' || showInProduction;\n\n  useEffect(() => {\n    if (!shouldShow) return;\n\n    const updateReport = () => {\n      const componentReport = componentAnalyzer.getReport();\n      const performanceReport = performanceMonitor.getReport();\n      \n      setReport({\n        components: componentReport,\n        performance: performanceReport,\n        timestamp: Date.now()\n      });\n    };\n\n    updateReport();\n\n    let interval: NodeJS.Timeout;\n    if (autoRefresh) {\n      interval = setInterval(updateReport, 5000);\n    }\n\n    return () => {\n      if (interval) clearInterval(interval);\n    };\n  }, [shouldShow, autoRefresh]);\n\n  if (!shouldShow) return null;\n\n  const handleClearData = () => {\n    componentAnalyzer.clear();\n    performanceMonitor.clear();\n    setReport(null);\n  };\n\n  const getOptimizationScore = () => {\n    if (!report?.components) return 0;\n    \n    const { totalComponents, optimizationCandidates } = report.components;\n    if (totalComponents === 0) return 100;\n    \n    const score = Math.max(0, 100 - (optimizationCandidates.length / totalComponents) * 100);\n    return Math.round(score);\n  };\n\n  const optimizationScore = getOptimizationScore();\n\n  return (\n    <div className=\"fixed bottom-4 left-4 z-50 max-w-md\">\n      {/* Toggle Button */}\n      <Button\n        onClick={() => setIsVisible(!isVisible)}\n        size=\"sm\"\n        variant=\"outline\"\n        className=\"mb-2 bg-white shadow-lg hover:bg-gray-50\"\n      >\n        <Activity className=\"h-4 w-4 mr-1\" />\n        Optimization Analyzer\n        {report?.components?.optimizationCandidates?.length > 0 && (\n          <Badge variant=\"destructive\" className=\"ml-2\">\n            {report.components.optimizationCandidates.length}\n          </Badge>\n        )}\n      </Button>\n\n      {/* Analyzer Panel */}\n      {isVisible && report && (\n        <Card className=\"w-96 max-h-[600px] overflow-hidden bg-white shadow-xl border\">\n          <CardHeader className=\"pb-3\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <CardTitle className=\"text-lg flex items-center\">\n                  <Zap className=\"h-5 w-5 mr-2 text-yellow-500\" />\n                  Optimization Analyzer\n                </CardTitle>\n                <CardDescription>\n                  Component performance insights\n                </CardDescription>\n              </div>\n              <div className=\"flex gap-1\">\n                <Button\n                  onClick={() => setAutoRefresh(!autoRefresh)}\n                  size=\"sm\"\n                  variant={autoRefresh ? \"default\" : \"outline\"}\n                  className=\"h-8 w-8 p-0\"\n                >\n                  <RefreshCw className={`h-4 w-4 ${autoRefresh ? 'animate-spin' : ''}`} />\n                </Button>\n                <Button\n                  onClick={() => setIsVisible(false)}\n                  size=\"sm\"\n                  variant=\"outline\"\n                  className=\"h-8 w-8 p-0\"\n                >\n                  <EyeOff className=\"h-4 w-4\" />\n                </Button>\n              </div>\n            </div>\n\n            {/* Optimization Score */}\n            <div className=\"mt-4\">\n              <div className=\"flex items-center justify-between mb-2\">\n                <span className=\"text-sm font-medium\">Optimization Score</span>\n                <span className={`text-sm font-bold ${\n                  optimizationScore >= 80 ? 'text-green-600' :\n                  optimizationScore >= 60 ? 'text-yellow-600' : 'text-red-600'\n                }`}>\n                  {optimizationScore}%\n                </span>\n              </div>\n              <Progress \n                value={optimizationScore} \n                className=\"h-2\"\n              />\n            </div>\n          </CardHeader>\n\n          <CardContent className=\"p-0\">\n            <Tabs value={selectedTab} onValueChange={setSelectedTab}>\n              <TabsList className=\"grid w-full grid-cols-3 mx-4 mb-4\">\n                <TabsTrigger value=\"overview\">Overview</TabsTrigger>\n                <TabsTrigger value=\"components\">Components</TabsTrigger>\n                <TabsTrigger value=\"suggestions\">Suggestions</TabsTrigger>\n              </TabsList>\n\n              <div className=\"px-4 pb-4 max-h-96 overflow-y-auto\">\n                {/* Overview Tab */}\n                <TabsContent value=\"overview\" className=\"mt-0 space-y-4\">\n                  <div className=\"grid grid-cols-2 gap-4\">\n                    <div className=\"bg-muted/50 p-3 rounded-lg\">\n                      <div className=\"text-2xl font-bold text-primary\">\n                        {report.components.totalComponents}\n                      </div>\n                      <div className=\"text-xs text-muted-foreground\">\n                        Total Components\n                      </div>\n                    </div>\n                    <div className=\"bg-muted/50 p-3 rounded-lg\">\n                      <div className=\"text-2xl font-bold text-destructive\">\n                        {report.components.optimizationCandidates.length}\n                      </div>\n                      <div className=\"text-xs text-muted-foreground\">\n                        Need Optimization\n                      </div>\n                    </div>\n                  </div>\n\n                  {/* Performance Summary */}\n                  {Object.keys(report.performance.webVitals).length > 0 && (\n                    <div>\n                      <h4 className=\"font-medium mb-2\">Web Vitals</h4>\n                      <div className=\"space-y-2\">\n                        {Object.entries(report.performance.webVitals).map(([metric, value]) => (\n                          <div key={metric} className=\"flex justify-between text-sm\">\n                            <span>{metric}:</span>\n                            <Badge variant={Number(value) > 1000 ? \"destructive\" : \"secondary\"}>\n                              {Math.round(Number(value))}ms\n                            </Badge>\n                          </div>\n                        ))}\n                      </div>\n                    </div>\n                  )}\n                </TabsContent>\n\n                {/* Components Tab */}\n                <TabsContent value=\"components\" className=\"mt-0 space-y-3\">\n                  <div>\n                    <h4 className=\"font-medium mb-2 flex items-center\">\n                      <TrendingUp className=\"h-4 w-4 mr-1\" />\n                      Slowest Components\n                    </h4>\n                    <div className=\"space-y-2\">\n                      {report.components.slowestComponents.slice(0, 5).map((component: any) => (\n                        <div key={component.name} className=\"flex justify-between items-center text-sm p-2 bg-muted/50 rounded\">\n                          <div>\n                            <div className=\"font-medium truncate max-w-32\">\n                              {component.name}\n                            </div>\n                            <div className=\"text-xs text-muted-foreground\">\n                              {component.totalRenders} renders\n                            </div>\n                          </div>\n                          <Badge variant={component.averageRenderTime > 16 ? \"destructive\" : \"secondary\"}>\n                            {component.averageRenderTime.toFixed(1)}ms\n                          </Badge>\n                        </div>\n                      ))}\n                    </div>\n                  </div>\n\n                  <div>\n                    <h4 className=\"font-medium mb-2 flex items-center\">\n                      <Activity className=\"h-4 w-4 mr-1\" />\n                      Most Active\n                    </h4>\n                    <div className=\"space-y-2\">\n                      {report.components.mostActiveComponents.slice(0, 5).map((component: any) => (\n                        <div key={component.name} className=\"flex justify-between items-center text-sm p-2 bg-muted/50 rounded\">\n                          <div className=\"font-medium truncate max-w-40\">\n                            {component.name}\n                          </div>\n                          <Badge variant=\"outline\">\n                            {component.totalRenders}\n                          </Badge>\n                        </div>\n                      ))}\n                    </div>\n                  </div>\n                </TabsContent>\n\n                {/* Suggestions Tab */}\n                <TabsContent value=\"suggestions\" className=\"mt-0 space-y-3\">\n                  {report.components.optimizationCandidates.length > 0 ? (\n                    <div className=\"space-y-3\">\n                      {report.components.optimizationCandidates.map((component: any) => (\n                        <Alert key={component.name}>\n                          <AlertTriangle className=\"h-4 w-4\" />\n                          <AlertDescription>\n                            <div className=\"font-medium\">{component.name}</div>\n                            <div className=\"text-xs mt-1\">\n                              Avg: {component.averageRenderTime.toFixed(1)}ms • \n                              Renders: {component.totalRenders} • \n                              Slow: {Math.round((component.slowRenders / component.totalRenders) * 100)}%\n                            </div>\n                            <div className=\"text-xs mt-2 text-muted-foreground\">\n                              💡 Consider using React.memo() or optimizing render logic\n                            </div>\n                          </AlertDescription>\n                        </Alert>\n                      ))}\n                    </div>\n                  ) : (\n                    <Alert>\n                      <CheckCircle className=\"h-4 w-4\" />\n                      <AlertDescription>\n                        <div className=\"font-medium\">All components optimized!</div>\n                        <div className=\"text-xs mt-1\">\n                          No performance issues detected. Great job! 🎉\n                        </div>\n                      </AlertDescription>\n                    </Alert>\n                  )}\n\n                  {/* General Tips */}\n                  <div className=\"mt-4 pt-4 border-t\">\n                    <h4 className=\"font-medium mb-2\">Optimization Tips</h4>\n                    <div className=\"text-xs text-muted-foreground space-y-1\">\n                      <div>• Use React.memo() for components with stable props</div>\n                      <div>• Memoize expensive calculations with useMemo()</div>\n                      <div>• Use useCallback() for event handlers</div>\n                      <div>• Avoid creating objects/arrays in render</div>\n                      <div>• Consider code splitting for large components</div>\n                    </div>\n                  </div>\n                </TabsContent>\n              </div>\n            </Tabs>\n\n            {/* Footer Actions */}\n            <div className=\"border-t p-4\">\n              <div className=\"flex justify-between\">\n                <Button\n                  onClick={handleClearData}\n                  size=\"sm\"\n                  variant=\"outline\"\n                >\n                  Clear Data\n                </Button>\n                <div className=\"text-xs text-muted-foreground\">\n                  Updated {new Date(report.timestamp).toLocaleTimeString()}\n                </div>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      )}\n    </div>\n  );\n}; ","usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app/task-beacon-app-cursor/task-beacon-app/src/components/providers/AppProviders.tsx","messages":[{"ruleId":"react-refresh/only-export-components","severity":1,"message":"Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.","line":118,"column":17,"nodeType":"Identifier","messageId":"namedExport","endLine":118,"endColumn":31}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\nimport { QueryClient, QueryClientProvider } from '@tanstack/react-query';\nimport { BrowserRouter } from 'react-router-dom';\nimport { Toaster } from '@/components/ui/sonner';\nimport { TooltipProvider } from '@/components/ui/tooltip';\nimport { LoadingSpinner } from '@/components/ui/layout';\nimport { AuthProvider } from '@/contexts/AuthContext';\nimport { ThemeProvider } from '@/contexts/ThemeContext';\nimport { getCacheConfig, getApiConfig } from '@/lib/config/app';\n\n// Create optimized query client using centralized configuration\nconst cacheConfig = getCacheConfig();\nconst apiConfig = getApiConfig();\n\nconst queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      retry: apiConfig.retryAttempts,\n      staleTime: cacheConfig.staleTime,\n      refetchOnWindowFocus: true,\n      refetchInterval: cacheConfig.refetchInterval,\n    },\n  },\n});\n\ninterface ErrorBoundaryState {\n  hasError: boolean;\n  error?: Error;\n}\n\n/**\n * Error boundary component using React class component pattern\n */\nclass AppErrorBoundary extends React.Component<\n  { children: React.ReactNode },\n  ErrorBoundaryState\n> {\n  constructor(props: { children: React.ReactNode }) {\n    super(props);\n    this.state = { hasError: false };\n  }\n\n  static getDerivedStateFromError(error: Error): ErrorBoundaryState {\n    return { hasError: true, error };\n  }\n\n  componentDidCatch(error: Error, errorInfo: React.ErrorInfo) {\n    console.error('App Error Boundary:', error, errorInfo);\n    // Add error reporting here (e.g., Sentry)\n  }\n\n  render() {\n    if (this.state.hasError) {\n      return (\n        <div className=\"flex h-screen items-center justify-center\">\n          <div className=\"text-center\">\n            <h1 className=\"text-2xl font-bold text-red-600 mb-4\">\n              Something went wrong\n            </h1>\n            <p className=\"text-gray-600 mb-4\">\n              Please refresh the page or try again later.\n            </p>\n            <button\n              onClick={() => window.location.reload()}\n              className=\"px-4 py-2 bg-blue-600 text-white rounded hover:bg-blue-700\"\n            >\n              Reload Page\n            </button>\n          </div>\n        </div>\n      );\n    }\n\n    return this.props.children;\n  }\n}\n\ninterface AppProvidersProps {\n  children: React.ReactNode;\n}\n\n/**\n * Centralized provider composition following the recommended hierarchy\n * \n * Hierarchy (outer to inner):\n * 1. Error handling\n * 2. Theme/styling\n * 3. Data/caching\n * 4. Authentication\n * 5. UI infrastructure\n * 6. Routing\n */\nexport function AppProviders({ children }: AppProvidersProps) {\n  return (\n    <AppErrorBoundary>\n      <ThemeProvider>\n        <QueryClientProvider client={queryClient}>\n          <AuthProvider>\n            <TooltipProvider>\n              <BrowserRouter>\n                <React.Suspense fallback={<LoadingSpinner />}>\n                  {children}\n                  <Toaster />\n                </React.Suspense>\n              </BrowserRouter>\n            </TooltipProvider>\n          </AuthProvider>\n        </QueryClientProvider>\n      </ThemeProvider>\n    </AppErrorBoundary>\n  );\n}\n\n/**\n * Hook to access the query client instance\n * Useful for programmatic query operations\n */\nexport function useQueryClient() {\n  return queryClient;\n} ","usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app/task-beacon-app-cursor/task-beacon-app/src/components/ui/__tests__/SimpleNavbar.test.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app/task-beacon-app-cursor/task-beacon-app/src/components/ui/accordion.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app/task-beacon-app-cursor/task-beacon-app/src/components/ui/alert-dialog.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app/task-beacon-app-cursor/task-beacon-app/src/components/ui/alert.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app/task-beacon-app-cursor/task-beacon-app/src/components/ui/aspect-ratio.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app/task-beacon-app-cursor/task-beacon-app/src/components/ui/auth/FloatingInput.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app/task-beacon-app-cursor/task-beacon-app/src/components/ui/auth/ModernAuthForm.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'focusFirstInput'. Either include it or remove the dependency array.","line":213,"column":6,"nodeType":"ArrayExpression","endLine":213,"endColumn":12,"suggestions":[{"desc":"Update the dependencies array to be: [focusFirstInput, mode]","fix":{"range":[6895,6901],"text":"[focusFirstInput, mode]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect, useRef } from 'react';\nimport { Button } from '@/components/ui/button';\nimport { Card, CardContent } from '@/components/ui/card';\nimport { FloatingInput } from './FloatingInput';\nimport { PasswordStrengthIndicator } from './PasswordStrengthIndicator';\nimport { AuthService } from '@/lib/api';\nimport { toast } from '@/lib/toast';\nimport { isValidEmail } from '@/lib/utils/validation';\nimport { Eye, EyeOff, Loader2 } from 'lucide-react';\n\ntype AuthMode = 'signin' | 'signup';\n\nconst ModernAuthForm: React.FC = () => {\n  const [mode, setMode] = useState<AuthMode>('signin');\n  const [email, setEmail] = useState('');\n  const [password, setPassword] = useState('');\n  const [name, setName] = useState('');\n  const [showPassword, setShowPassword] = useState(false);\n  const [loading, setLoading] = useState(false);\n  const [errors, setErrors] = useState<{\n    email?: string;\n    password?: string;\n    name?: string;\n  }>({});\n\n  const nameInputRef = useRef<HTMLInputElement>(null);\n  const emailInputRef = useRef<HTMLInputElement>(null);\n\n  // Clean up auth state utility\n  const cleanupAuthState = () => {\n    Object.keys(localStorage).forEach((key) => {\n      if (key.startsWith('supabase.auth.') || key.includes('sb-')) {\n        localStorage.removeItem(key);\n      }\n    });\n    Object.keys(sessionStorage || {}).forEach((key) => {\n      if (key.startsWith('supabase.auth.') || key.includes('sb-')) {\n        sessionStorage.removeItem(key);\n      }\n    });\n  };\n\n  const validateEmail = (value: string) => {\n    if (!value) return 'Email is required';\n    if (!isValidEmail(value)) return 'Please enter a valid email address';\n    return '';\n  };\n\n  const validatePassword = (value: string) => {\n    if (!value) return 'Password is required';\n    if (value.length < 8) return 'Password must be at least 8 characters';\n    return '';\n  };\n\n  const validateName = (value: string) => {\n    if (!value) return 'Name is required';\n    if (value.length < 2) return 'Name must be at least 2 characters';\n    return '';\n  };\n\n  const handleEmailChange = (value: string) => {\n    setEmail(value);\n    if (errors.email) {\n      const error = validateEmail(value);\n      setErrors((prev) => ({ ...prev, email: error }));\n    }\n  };\n\n  const handlePasswordChange = (value: string) => {\n    setPassword(value);\n    if (errors.password) {\n      const error = validatePassword(value);\n      setErrors((prev) => ({ ...prev, password: error }));\n    }\n  };\n\n  const handleNameChange = (value: string) => {\n    setName(value);\n    if (errors.name) {\n      const error = validateName(value);\n      setErrors((prev) => ({ ...prev, name: error }));\n    }\n  };\n\n  const validateForm = () => {\n    const emailError = validateEmail(email);\n    const passwordError = validatePassword(password);\n    const nameError = mode === 'signup' ? validateName(name) : '';\n\n    setErrors({\n      email: emailError,\n      password: passwordError,\n      name: nameError,\n    });\n\n    return !emailError && !passwordError && !nameError;\n  };\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n\n    if (!validateForm()) {\n      toast.error('Please fix the errors before continuing');\n      return;\n    }\n\n    setLoading(true);\n\n    try {\n      // Clean up existing state before any auth operation\n      cleanupAuthState();\n\n      // Attempt global sign out first using AuthService\n      try {\n        await AuthService.signOut();\n      } catch (err) {\n        console.warn('Pre-auth cleanup sign out failed, continuing:', err);\n      }\n\n      if (mode === 'signin') {\n        const response = await AuthService.signIn(email, password);\n\n        if (!response.success) {\n          throw new Error(response.error?.message || 'Sign in failed');\n        }\n\n        if (response.data?.user) {\n          toast.success('Welcome back! Redirecting to your dashboard...');\n          // Force page reload for clean state\n          setTimeout(() => {\n            window.location.href = '/';\n          }, 1000);\n        }\n      } else {\n        const response = await AuthService.signUp(email, password, {\n          data: {\n            full_name: name,\n            name: name,\n          },\n        });\n\n        if (!response.success) {\n          throw new Error(response.error?.message || 'Sign up failed');\n        }\n\n        if (response.data?.user) {\n          if (response.data.emailConfirmed) {\n            toast.success('Account created successfully! Redirecting...');\n            setTimeout(() => {\n              window.location.href = '/';\n            }, 1500);\n          } else {\n            toast.success(\n              'Account created! Please check your email for verification.'\n            );\n          }\n        }\n      }\n    } catch (error: unknown) {\n      console.error('Auth error:', error);\n\n      if (error instanceof Error) {\n        // Handle specific auth errors based on message content\n        const errorMessage = error.message;\n        \n        if (errorMessage.includes('Invalid login credentials') || errorMessage.includes('invalid_credentials')) {\n          toast.error('Invalid email or password. Please try again.');\n        } else if (errorMessage.includes('User already registered') || errorMessage.includes('already_registered')) {\n          toast.error(\n            'An account with this email already exists. Try signing in instead.'\n          );\n        } else if (errorMessage.includes('Email not confirmed') || errorMessage.includes('email_not_confirmed')) {\n          toast.error(\n            'Please check your email and confirm your account before signing in.'\n          );\n        } else if (errorMessage.includes('Signup not allowed') || errorMessage.includes('signup_disabled')) {\n          toast.error('Account creation is currently disabled. Please contact support.');\n        } else if (errorMessage.includes('Password should be at least')) {\n          toast.error('Password does not meet the minimum requirements.');\n        } else if (errorMessage.includes('Unable to validate email address')) {\n          toast.error('Please enter a valid email address.');\n        } else {\n          toast.error(errorMessage || 'An authentication error occurred');\n        }\n      } else {\n        toast.error('An unexpected error occurred');\n      }\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const toggleMode = () => {\n    setMode((prevMode) => (prevMode === 'signin' ? 'signup' : 'signin'));\n    setErrors({});\n    setEmail('');\n    setPassword('');\n    setName('');\n    setShowPassword(false);\n  };\n\n  const focusFirstInput = () => {\n    if (mode === 'signup' && nameInputRef.current) {\n      nameInputRef.current.focus();\n    } else if (emailInputRef.current) {\n      emailInputRef.current.focus();\n    }\n  };\n\n  useEffect(() => {\n    const timer = setTimeout(focusFirstInput, 100);\n    return () => clearTimeout(timer);\n  }, [mode]);\n\n  return (\n    <div className=\"flex min-h-screen items-center justify-center bg-gradient-to-br from-blue-50 via-white to-blue-50 p-4\">\n      <Card className=\"w-full max-w-md border-0 bg-white/80 shadow-2xl backdrop-blur-sm\">\n        <CardContent className=\"p-8\">\n          <div className=\"mb-8 text-center\">\n            <h1 className=\"mb-2 text-3xl font-bold tracking-tight text-gray-900\">\n              {mode === 'signin' ? 'Welcome back' : 'Create account'}\n            </h1>\n            <p className=\"text-sm text-gray-600\">\n              {mode === 'signin'\n                ? 'Sign in to your account to continue'\n                : 'Sign up to get started with our platform'}\n            </p>\n          </div>\n\n          <form onSubmit={handleSubmit} className=\"space-y-6\">\n            {mode === 'signup' && (\n              <FloatingInput\n                ref={nameInputRef}\n                id=\"name\"\n                type=\"text\"\n                label=\"Full Name\"\n                value={name}\n                onChange={handleNameChange}\n                error={errors.name}\n                disabled={loading}\n                autoComplete=\"name\"\n              />\n            )}\n\n            <FloatingInput\n              ref={emailInputRef}\n              id=\"email\"\n              type=\"email\"\n              label=\"Email Address\"\n              value={email}\n              onChange={handleEmailChange}\n              error={errors.email}\n              disabled={loading}\n              autoComplete={mode === 'signin' ? 'username' : 'email'}\n            />\n\n            <div className=\"relative\">\n              <FloatingInput\n                id=\"password\"\n                type={showPassword ? 'text' : 'password'}\n                label=\"Password\"\n                value={password}\n                onChange={handlePasswordChange}\n                error={errors.password}\n                disabled={loading}\n                autoComplete={mode === 'signin' ? 'current-password' : 'new-password'}\n              />\n              <button\n                type=\"button\"\n                onClick={() => setShowPassword(!showPassword)}\n                className=\"absolute right-3 top-1/2 -translate-y-1/2 text-gray-400 hover:text-gray-600 focus:outline-none\"\n                disabled={loading}\n                tabIndex={-1}\n              >\n                {showPassword ? (\n                  <EyeOff className=\"h-4 w-4\" />\n                ) : (\n                  <Eye className=\"h-4 w-4\" />\n                )}\n              </button>\n            </div>\n\n            {mode === 'signup' && password && (\n              <PasswordStrengthIndicator password={password} show={password.length > 0} />\n            )}\n\n            <Button\n              type=\"submit\"\n              className=\"h-12 w-full bg-gradient-to-r from-blue-600 to-blue-700 text-base font-semibold text-white shadow-lg transition-all duration-200 hover:from-blue-700 hover:to-blue-800 hover:shadow-xl focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 disabled:from-gray-400 disabled:to-gray-500\"\n              disabled={loading}\n            >\n              {loading ? (\n                <div className=\"flex items-center justify-center space-x-2\">\n                  <Loader2 className=\"h-4 w-4 animate-spin\" />\n                  <span>\n                    {mode === 'signin' ? 'Signing in...' : 'Creating account...'}\n                  </span>\n                </div>\n              ) : (\n                <span>\n                  {mode === 'signin' ? 'Sign in' : 'Create account'}\n                </span>\n              )}\n            </Button>\n          </form>\n\n          <div className=\"mt-8 text-center\">\n            <p className=\"text-sm text-gray-600\">\n              {mode === 'signin'\n                ? \"Don't have an account? \"\n                : 'Already have an account? '}\n              <button\n                type=\"button\"\n                onClick={toggleMode}\n                className=\"font-medium text-blue-600 transition-colors hover:text-blue-500 focus:outline-none focus:underline\"\n                disabled={loading}\n              >\n                {mode === 'signin' ? 'Sign up' : 'Sign in'}\n              </button>\n            </p>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n};\n\nexport default ModernAuthForm;\n","usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app/task-beacon-app-cursor/task-beacon-app/src/components/ui/auth/PasswordStrengthIndicator.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app/task-beacon-app-cursor/task-beacon-app/src/components/ui/auth/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app/task-beacon-app-cursor/task-beacon-app/src/components/ui/avatar.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app/task-beacon-app-cursor/task-beacon-app/src/components/ui/badge.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app/task-beacon-app-cursor/task-beacon-app/src/components/ui/breadcrumb.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app/task-beacon-app-cursor/task-beacon-app/src/components/ui/button.tsx","messages":[{"ruleId":"react-refresh/only-export-components","severity":1,"message":"Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.","line":32,"column":18,"nodeType":"Identifier","messageId":"namedExport","endLine":32,"endColumn":32}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import * as React from 'react';\nimport { Slot } from '@radix-ui/react-slot';\nimport { type VariantProps } from 'class-variance-authority';\n\nimport { cn } from '@/lib/utils';\nimport { buttonVariants } from '@/lib/button-variants';\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean;\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : 'button';\n\n    return (\n      <Comp\n        className={cn(\n          buttonVariants({ variant, size, className }),\n          'shadow-sm transition-all hover:shadow-md'\n        )}\n        ref={ref}\n        {...props}\n      />\n    );\n  }\n);\nButton.displayName = 'Button';\n\nexport { Button, buttonVariants };\n","usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app/task-beacon-app-cursor/task-beacon-app/src/components/ui/calendar.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app/task-beacon-app-cursor/task-beacon-app/src/components/ui/card.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app/task-beacon-app-cursor/task-beacon-app/src/components/ui/carousel.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app/task-beacon-app-cursor/task-beacon-app/src/components/ui/checkbox.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app/task-beacon-app-cursor/task-beacon-app/src/components/ui/collapsible.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app/task-beacon-app-cursor/task-beacon-app/src/components/ui/command.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app/task-beacon-app-cursor/task-beacon-app/src/components/ui/context-menu.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app/task-beacon-app-cursor/task-beacon-app/src/components/ui/dialog.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app/task-beacon-app-cursor/task-beacon-app/src/components/ui/drawer.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app/task-beacon-app-cursor/task-beacon-app/src/components/ui/dropdown-menu.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app/task-beacon-app-cursor/task-beacon-app/src/components/ui/form.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app/task-beacon-app-cursor/task-beacon-app/src/components/ui/form/AnimatedCharacterCount.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app/task-beacon-app-cursor/task-beacon-app/src/components/ui/form/FloatingInput.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app/task-beacon-app-cursor/task-beacon-app/src/components/ui/form/FloatingTextarea.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app/task-beacon-app-cursor/task-beacon-app/src/components/ui/form/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app/task-beacon-app-cursor/task-beacon-app/src/components/ui/form/useFormSubmission.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app/task-beacon-app-cursor/task-beacon-app/src/components/ui/form/useFormWithZod.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app/task-beacon-app-cursor/task-beacon-app/src/components/ui/hover-card.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app/task-beacon-app-cursor/task-beacon-app/src/components/ui/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app/task-beacon-app-cursor/task-beacon-app/src/components/ui/input-otp.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app/task-beacon-app-cursor/task-beacon-app/src/components/ui/input.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app/task-beacon-app-cursor/task-beacon-app/src/components/ui/label.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app/task-beacon-app-cursor/task-beacon-app/src/components/ui/layout/LoadingSpinner.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app/task-beacon-app-cursor/task-beacon-app/src/components/ui/layout/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app/task-beacon-app-cursor/task-beacon-app/src/components/ui/menubar.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app/task-beacon-app-cursor/task-beacon-app/src/components/ui/navigation-menu.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app/task-beacon-app-cursor/task-beacon-app/src/components/ui/pagination.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app/task-beacon-app-cursor/task-beacon-app/src/components/ui/popover.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app/task-beacon-app-cursor/task-beacon-app/src/components/ui/progress.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app/task-beacon-app-cursor/task-beacon-app/src/components/ui/radio-group.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app/task-beacon-app-cursor/task-beacon-app/src/components/ui/resizable.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app/task-beacon-app-cursor/task-beacon-app/src/components/ui/scroll-area.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app/task-beacon-app-cursor/task-beacon-app/src/components/ui/select.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app/task-beacon-app-cursor/task-beacon-app/src/components/ui/separator.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app/task-beacon-app-cursor/task-beacon-app/src/components/ui/sheet.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app/task-beacon-app-cursor/task-beacon-app/src/components/ui/sidebar.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app/task-beacon-app-cursor/task-beacon-app/src/components/ui/simple-navbar.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app/task-beacon-app-cursor/task-beacon-app/src/components/ui/skeleton.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app/task-beacon-app-cursor/task-beacon-app/src/components/ui/slider.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app/task-beacon-app-cursor/task-beacon-app/src/components/ui/sonner.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app/task-beacon-app-cursor/task-beacon-app/src/components/ui/switch.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app/task-beacon-app-cursor/task-beacon-app/src/components/ui/table.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app/task-beacon-app-cursor/task-beacon-app/src/components/ui/tabs.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app/task-beacon-app-cursor/task-beacon-app/src/components/ui/textarea.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app/task-beacon-app-cursor/task-beacon-app/src/components/ui/theme-toggle.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app/task-beacon-app-cursor/task-beacon-app/src/components/ui/toast.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app/task-beacon-app-cursor/task-beacon-app/src/components/ui/toaster.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app/task-beacon-app-cursor/task-beacon-app/src/components/ui/toggle-group.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app/task-beacon-app-cursor/task-beacon-app/src/components/ui/toggle.tsx","messages":[{"ruleId":"react-refresh/only-export-components","severity":1,"message":"Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.","line":8,"column":14,"nodeType":"Identifier","messageId":"namedExport","endLine":8,"endColumn":28}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// src/components/ui/toggle.tsx\nimport * as React from 'react';\nimport * as TogglePrimitive from '@radix-ui/react-toggle';\nimport { cva, type VariantProps } from 'class-variance-authority';\n\nimport { cn } from '@/lib/utils';\n\nexport const toggleVariants = cva(\n  'inline-flex items-center justify-center rounded-full text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground',\n  {\n    variants: {\n      variant: {\n        default: 'bg-transparent',\n        outline:\n          'border border-input bg-transparent hover:bg-accent hover:text-accent-foreground',\n      },\n      size: {\n        default: 'h-10 px-3',\n        sm: 'h-9 px-2.5',\n        lg: 'h-11 px-5',\n      },\n    },\n    defaultVariants: {\n      variant: 'default',\n      size: 'default',\n    },\n  }\n);\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n));\n\nToggle.displayName = TogglePrimitive.Root.displayName;\n\nexport { Toggle };\n","usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app/task-beacon-app-cursor/task-beacon-app/src/components/ui/tooltip.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app/task-beacon-app-cursor/task-beacon-app/src/components/ui/use-toast.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app/task-beacon-app-cursor/task-beacon-app/src/contexts/AuthContext.tsx","messages":[{"ruleId":"react-refresh/only-export-components","severity":1,"message":"Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.","line":210,"column":17,"nodeType":"Identifier","messageId":"namedExport","endLine":210,"endColumn":24}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import {\n  createContext,\n  useContext,\n  useState,\n  useEffect,\n  ReactNode,\n} from 'react';\nimport { supabase } from '@/integrations/supabase/client';\nimport { AuthService } from '@/lib/api';\nimport { toast } from '@/lib/toast';\nimport { authLogger } from '@/lib/logger';\n\n// Clean imports from organized type system\nimport type { User, Session, AuthContextType } from '@/types/shared';\n\ninterface AuthProviderProps {\n  children: ReactNode;\n}\n\nconst AuthContext = createContext<AuthContextType | undefined>(undefined);\n\nexport function AuthProvider({ children }: AuthProviderProps) {\n  const [user, setUser] = useState<User | null>(null);\n  const [session, setSession] = useState<Session | null>(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState<Error | null>(null);\n\n  // Clean up auth state utility\n  const cleanupAuthState = () => {\n    Object.keys(localStorage).forEach((key) => {\n      if (key.startsWith('supabase.auth.') || key.includes('sb-')) {\n        localStorage.removeItem(key);\n      }\n    });\n    Object.keys(sessionStorage || {}).forEach((key) => {\n      if (key.startsWith('supabase.auth.') || key.includes('sb-')) {\n        sessionStorage.removeItem(key);\n      }\n    });\n  };\n\n  // Refresh session function using AuthService\n  const refreshSession = async () => {\n    try {\n      const response = await AuthService.refreshSession();\n      \n      if (response.success) {\n        setSession(response.data?.session ?? null);\n        setUser(response.data?.user ?? null);\n        authLogger.info('Session refreshed successfully via AuthService');\n      } else {\n        authLogger.warn('AuthService refresh failed, attempting direct refresh', { error: response.error?.message });\n        // Fallback to direct Supabase refresh\n        const { data, error } = await supabase.auth.refreshSession();\n        if (error) throw error;\n\n        setSession(data.session);\n        setUser(data.session?.user ?? null);\n        authLogger.info('Session refreshed successfully via fallback');\n      }\n    } catch (error: unknown) {\n      authLogger.error('Session refresh failed', error as Error);\n      if (error instanceof Error) {\n        setError(error);\n      }\n    }\n  };\n\n  // Sign out function with enhanced cleanup using AuthService\n  const signOut = async () => {\n    try {\n      setLoading(true);\n      authLogger.info('Starting sign out process');\n\n      // Clean up auth state first\n      cleanupAuthState();\n\n      // Use AuthService for sign out\n      const response = await AuthService.signOut();\n      \n      if (response.success) {\n        authLogger.info('Sign out completed via AuthService');\n      } else {\n        authLogger.warn('AuthService sign out failed, attempting direct sign out', { error: response.error?.message });\n        // Fallback to direct sign out\n        await supabase.auth.signOut({ scope: 'global' });\n      }\n\n      // Clear local state\n      setUser(null);\n      setSession(null);\n      setError(null);\n\n      toast.success('Signed out successfully');\n      authLogger.info('Sign out completed successfully');\n\n      // Force page reload for clean state\n      setTimeout(() => {\n        window.location.href = '/auth';\n      }, 500);\n    } catch (error: unknown) {\n      authLogger.error('Sign out failed', error as Error);\n      toast.error('Failed to sign out');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  useEffect(() => {\n    let mounted = true;\n\n    // Set up auth state listener FIRST\n    const {\n      data: { subscription },\n    } = supabase.auth.onAuthStateChange(async (event, session) => {\n      authLogger.debug('Auth state change detected', { \n        event, \n        userId: session?.user?.id,\n        hasSession: !!session \n      });\n\n      if (!mounted) return;\n\n      // Update session and user state\n      setSession(session);\n      setUser(session?.user ?? null);\n\n      // Handle different auth events\n      if (event === 'SIGNED_IN' && session?.user) {\n        // Defer any additional data fetching to prevent deadlocks\n        setTimeout(() => {\n          if (mounted) {\n            setError(null);\n            setLoading(false);\n            authLogger.info('User signed in successfully', { userId: session.user.id });\n          }\n        }, 0);\n      } else if (event === 'SIGNED_OUT') {\n        setUser(null);\n        setSession(null);\n        setError(null);\n        setLoading(false);\n        authLogger.info('User signed out');\n      } else if (event === 'TOKEN_REFRESHED') {\n        authLogger.debug('Auth token refreshed');\n      }\n    });\n\n    // THEN check for existing session\n    const initializeAuth = async () => {\n      try {\n        authLogger.debug('Initializing auth state');\n        const {\n          data: { session },\n          error,\n        } = await supabase.auth.getSession();\n\n        if (error) {\n          authLogger.error('Error getting session', error);\n          setError(error);\n        }\n\n        if (mounted) {\n          setSession(session);\n          setUser(session?.user ?? null);\n          if (session?.user) {\n            authLogger.info('Existing session found', { userId: session.user.id });\n          } else {\n            authLogger.debug('No existing session found');\n          }\n        }\n      } catch (error: unknown) {\n        authLogger.error('Auth initialization failed', error as Error);\n        if (mounted && error instanceof Error) {\n          setError(error);\n        }\n      } finally {\n        if (mounted) {\n          setLoading(false);\n          authLogger.debug('Auth initialization completed');\n        }\n      }\n    };\n\n    initializeAuth();\n\n    return () => {\n      mounted = false;\n      subscription.unsubscribe();\n      authLogger.debug('Auth context cleanup completed');\n    };\n  }, []);\n\n  return (\n    <AuthContext.Provider\n      value={{\n        user,\n        session,\n        loading,\n        error,\n        signOut,\n        refreshSession,\n      }}\n    >\n      {children}\n    </AuthContext.Provider>\n  );\n}\n\nexport function useAuth() {\n  const context = useContext(AuthContext);\n  if (context === undefined) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app/task-beacon-app-cursor/task-beacon-app/src/contexts/ThemeContext.tsx","messages":[{"ruleId":"react-refresh/only-export-components","severity":1,"message":"Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.","line":77,"column":17,"nodeType":"Identifier","messageId":"namedExport","endLine":77,"endColumn":25}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { createContext, useContext, useEffect, useState } from 'react';\n\ntype Theme = 'dark' | 'light' | 'system';\n\ninterface ThemeContextType {\n  theme: Theme;\n  setTheme: (theme: Theme) => void;\n  actualTheme: 'dark' | 'light';\n}\n\nconst ThemeContext = createContext<ThemeContextType | undefined>(undefined);\n\nexport function ThemeProvider({ children }: { children: React.ReactNode }) {\n  const [theme, setTheme] = useState<Theme>('dark'); // Default to dark\n  const [actualTheme, setActualTheme] = useState<'dark' | 'light'>('dark');\n\n  useEffect(() => {\n    // Get stored theme preference or default to dark\n    const storedTheme = localStorage.getItem('theme') as Theme;\n    if (storedTheme) {\n      setTheme(storedTheme);\n    } else {\n      // Set dark as default and store it\n      localStorage.setItem('theme', 'dark');\n    }\n  }, []);\n\n  useEffect(() => {\n    const root = window.document.documentElement;\n\n    // Remove existing theme classes\n    root.classList.remove('light', 'dark');\n\n    let effectiveTheme: 'dark' | 'light';\n\n    if (theme === 'system') {\n      effectiveTheme = window.matchMedia('(prefers-color-scheme: dark)').matches\n        ? 'dark'\n        : 'light';\n    } else {\n      effectiveTheme = theme;\n    }\n\n    // Apply the theme class\n    root.classList.add(effectiveTheme);\n    setActualTheme(effectiveTheme);\n\n    // Store the preference\n    localStorage.setItem('theme', theme);\n  }, [theme]);\n\n  // Listen for system theme changes when using system preference\n  useEffect(() => {\n    if (theme !== 'system') return;\n\n    const mediaQuery = window.matchMedia('(prefers-color-scheme: dark)');\n    const handleChange = () => {\n      const root = window.document.documentElement;\n      root.classList.remove('light', 'dark');\n\n      const effectiveTheme = mediaQuery.matches ? 'dark' : 'light';\n      root.classList.add(effectiveTheme);\n      setActualTheme(effectiveTheme);\n    };\n\n    mediaQuery.addEventListener('change', handleChange);\n    return () => mediaQuery.removeEventListener('change', handleChange);\n  }, [theme]);\n\n  return (\n    <ThemeContext.Provider value={{ theme, setTheme, actualTheme }}>\n      {children}\n    </ThemeContext.Provider>\n  );\n}\n\nexport function useTheme() {\n  const context = useContext(ThemeContext);\n  if (context === undefined) {\n    throw new Error('useTheme must be used within a ThemeProvider');\n  }\n  return context;\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app/task-beacon-app-cursor/task-beacon-app/src/features/auth/components/AuthErrorBoundary.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app/task-beacon-app-cursor/task-beacon-app/src/features/auth/integration/authFlow.integration.test.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app/task-beacon-app-cursor/task-beacon-app/src/features/tasks/components/CountdownTimer.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app/task-beacon-app-cursor/task-beacon-app/src/features/tasks/components/FabButton.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app/task-beacon-app-cursor/task-beacon-app/src/features/tasks/components/OptimizedTaskCard.tsx","messages":[{"ruleId":"react-refresh/only-export-components","severity":1,"message":"Fast refresh only works when a file only exports components. Move your component(s) to a separate file.","line":24,"column":7,"nodeType":"Identifier","messageId":"localComponents","endLine":24,"endColumn":24},{"ruleId":"react-refresh/only-export-components","severity":1,"message":"Fast refresh can't handle anonymous components. Add a name to your export.","line":223,"column":16,"nodeType":"CallExpression","messageId":"anonymousExport","endLine":223,"endColumn":60}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { memo, useMemo, useCallback } from 'react';\nimport { optimizedMemo, useSmartMemo, trackComponentPerformance } from '@/lib/utils/componentOptimization';\nimport { useOptimizedCallback, useRenderTracking } from '@/hooks/useOptimizedMemo';\nimport { Card } from '@/components/ui/card';\nimport { Badge } from '@/components/ui/badge';\nimport { Button } from '@/components/ui/button';\nimport { Clock, Pin, MoreHorizontal } from 'lucide-react';\nimport type { Task } from '@/types';\nimport { useTaskMutations } from '../hooks/useTaskMutations';\nimport { formatDistanceToNow } from 'date-fns';\n\ninterface OptimizedTaskCardProps {\n  task: Task;\n  onClick?: (task: Task) => void;\n  onPin?: (task: Task) => void;\n  onComplete?: (task: Task) => void;\n  showMetadata?: boolean;\n  compact?: boolean;\n}\n\n/**\n * Highly optimized TaskCard component with performance tracking and memoization\n */\nconst OptimizedTaskCard = memo<OptimizedTaskCardProps>(({\n  task,\n  onClick,\n  onPin,\n  onComplete,\n  showMetadata = true,\n  compact = false\n}) => {\n  // Track render performance\n  const { renderCount, markRenderComplete } = useRenderTracking('OptimizedTaskCard', {\n    taskId: task.id,\n    status: task.status,\n    pinned: task.pinned\n  });\n\n  // Use task mutations with optimization\n  const { toggleTaskComplete, toggleTaskPin } = useTaskMutations();\n\n  // Memoize expensive computations\n  const formattedDate = useSmartMemo(\n    () => task.created_at ? formatDistanceToNow(new Date(task.created_at), { addSuffix: true }) : '',\n    [task.created_at],\n    { name: 'formatted-date', ttl: 60000 } // Cache for 1 minute\n  );\n\n  const statusConfig = useSmartMemo(\n    () => ({\n      complete: { variant: 'default' as const, label: 'Complete', color: 'text-green-600' },\n      pending: { variant: 'secondary' as const, label: 'Pending', color: 'text-yellow-600' },\n      overdue: { variant: 'destructive' as const, label: 'Overdue', color: 'text-red-600' }\n    }[task.status] || { variant: 'outline' as const, label: 'Unknown', color: 'text-gray-600' }),\n    [task.status],\n    { name: 'status-config' }\n  );\n\n  const priorityConfig = useSmartMemo(\n    () => ({\n      high: { color: 'border-red-200', bg: 'bg-red-50' },\n      medium: { color: 'border-yellow-200', bg: 'bg-yellow-50' },\n      low: { color: 'border-green-200', bg: 'bg-green-50' }\n    }[task.priority] || { color: 'border-gray-200', bg: 'bg-gray-50' }),\n    [task.priority],\n    { name: 'priority-config' }\n  );\n\n  // Optimized event handlers\n  const handleClick = useOptimizedCallback(() => {\n    onClick?.(task);\n  }, [onClick, task.id], { name: 'task-card-click' });\n\n  const handlePin = useOptimizedCallback(async (e: React.MouseEvent) => {\n    e.stopPropagation();\n    try {\n      await toggleTaskPin(task);\n      onPin?.(task);\n    } catch (error) {\n      console.error('Failed to pin task:', error);\n    }\n  }, [toggleTaskPin, task.id, task.pinned, onPin], { name: 'task-pin' });\n\n  const handleComplete = useOptimizedCallback(async (e: React.MouseEvent) => {\n    e.stopPropagation();\n    try {\n      await toggleTaskComplete(task);\n      onComplete?.(task);\n    } catch (error) {\n      console.error('Failed to complete task:', error);\n    }\n  }, [toggleTaskComplete, task.id, task.status, onComplete], { name: 'task-complete' });\n\n  // Memoize render content\n  const cardContent = useMemo(() => (\n    <>\n      {/* Header */}\n      <div className=\"flex items-start justify-between mb-3\">\n        <div className=\"flex-1 min-w-0\">\n          <h3 className={`font-medium truncate ${\n            task.status === 'complete' ? 'line-through text-muted-foreground' : 'text-foreground'\n          }`}>\n            {task.title}\n          </h3>\n          {task.description && !compact && (\n            <p className=\"text-sm text-muted-foreground mt-1 line-clamp-2\">\n              {task.description}\n            </p>\n          )}\n        </div>\n        \n        {task.pinned && (\n          <Pin className=\"w-4 h-4 text-primary flex-shrink-0 ml-2\" fill=\"currentColor\" />\n        )}\n      </div>\n\n      {/* Metadata */}\n      {showMetadata && (\n        <div className=\"flex items-center justify-between text-xs text-muted-foreground mb-4\">\n          <div className=\"flex items-center space-x-3\">\n            {formattedDate && (\n              <div className=\"flex items-center\">\n                <Clock className=\"w-3 h-3 mr-1\" />\n                {formattedDate}\n              </div>\n            )}\n            {task.priority && (\n              <Badge variant=\"outline\" className=\"text-xs\">\n                {task.priority}\n              </Badge>\n            )}\n          </div>\n          <Badge variant={statusConfig.variant}>\n            {statusConfig.label}\n          </Badge>\n        </div>\n      )}\n\n      {/* Actions */}\n      <div className=\"flex items-center justify-between pt-2 border-t border-border\">\n        <div className=\"flex space-x-2\">\n          <Button\n            variant={task.status === 'complete' ? 'outline' : 'default'}\n            size=\"sm\"\n            onClick={handleComplete}\n            className=\"button-optimized\"\n          >\n            {task.status === 'complete' ? 'Undo' : 'Complete'}\n          </Button>\n          <Button\n            variant=\"outline\"\n            size=\"sm\"\n            onClick={handlePin}\n            className=\"button-optimized\"\n          >\n            {task.pinned ? 'Unpin' : 'Pin'}\n          </Button>\n        </div>\n        \n        <Button variant=\"ghost\" size=\"sm\" className=\"button-optimized\">\n          <MoreHorizontal className=\"w-4 h-4\" />\n        </Button>\n      </div>\n    </>\n  ), [\n    task.title,\n    task.description,\n    task.status,\n    task.pinned,\n    task.priority,\n    formattedDate,\n    statusConfig,\n    compact,\n    showMetadata,\n    handleComplete,\n    handlePin\n  ]);\n\n  // Mark render completion\n  React.useEffect(() => {\n    markRenderComplete();\n  });\n\n  return (\n    <Card \n      className={`\n        task-card-optimized\n        interactive-element\n        cursor-pointer\n        transition-all\n        duration-150\n        ${priorityConfig.bg}\n        ${priorityConfig.color}\n        ${compact ? 'p-4' : 'p-6'}\n        hover:shadow-md\n        focus-ring\n      `}\n      onClick={handleClick}\n      tabIndex={0}\n      role=\"button\"\n      aria-label={`Task: ${task.title}`}\n    >\n      {cardContent}\n    </Card>\n  );\n}, (prevProps, nextProps) => {\n  // Custom comparison for optimal re-rendering\n  return (\n    prevProps.task.id === nextProps.task.id &&\n    prevProps.task.title === nextProps.task.title &&\n    prevProps.task.status === nextProps.task.status &&\n    prevProps.task.pinned === nextProps.task.pinned &&\n    prevProps.task.priority === nextProps.task.priority &&\n    prevProps.task.updated_at === nextProps.task.updated_at &&\n    prevProps.showMetadata === nextProps.showMetadata &&\n    prevProps.compact === nextProps.compact\n  );\n});\n\nOptimizedTaskCard.displayName = 'OptimizedTaskCard';\n\n// Apply performance tracking HOC\nexport default trackComponentPerformance(OptimizedTaskCard); ","usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app/task-beacon-app-cursor/task-beacon-app/src/features/tasks/components/ParentTaskInfo.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app/task-beacon-app-cursor/task-beacon-app/src/features/tasks/components/RealtimeUpdateIndicator.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app/task-beacon-app-cursor/task-beacon-app/src/features/tasks/components/TaskActions.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app/task-beacon-app-cursor/task-beacon-app/src/features/tasks/components/TaskCard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app/task-beacon-app-cursor/task-beacon-app/src/features/tasks/components/TaskCardContent.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app/task-beacon-app-cursor/task-beacon-app/src/features/tasks/components/TaskCardHeader.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app/task-beacon-app-cursor/task-beacon-app/src/features/tasks/components/TaskDashboard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app/task-beacon-app-cursor/task-beacon-app/src/features/tasks/components/TaskDashboardHeader.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app/task-beacon-app-cursor/task-beacon-app/src/features/tasks/components/TaskDetails.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app/task-beacon-app-cursor/task-beacon-app/src/features/tasks/components/TaskErrorBoundary.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":74,"column":38,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":74,"endColumn":41,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1884,1887],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1884,1887],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { Component, ReactNode } from 'react';\nimport { AlertTriangle, RefreshCw, Home } from 'lucide-react';\nimport { logger } from '@/lib/logger';\n\ninterface TaskErrorBoundaryState {\n  hasError: boolean;\n  error?: Error;\n  errorInfo?: string;\n}\n\ninterface TaskErrorBoundaryProps {\n  children: ReactNode;\n  fallback?: ReactNode;\n  onError?: (error: Error, errorInfo: string) => void;\n  onNavigateHome?: () => void;\n}\n\n/**\n * Feature-specific error boundary for task-related components\n * \n * Provides task-specific error handling with contextual recovery options:\n * - Retry the failed operation\n * - Navigate back to task list\n * - Clear local task data\n */\nexport class TaskErrorBoundary extends Component<\n  TaskErrorBoundaryProps,\n  TaskErrorBoundaryState\n> {\n  state: TaskErrorBoundaryState = { hasError: false };\n\n  static getDerivedStateFromError(error: Error): TaskErrorBoundaryState {\n    return { \n      hasError: true, \n      error \n    };\n  }\n\n  componentDidCatch(error: Error, errorInfo: React.ErrorInfo) {\n    const errorDetails = `${error.message}\\n${error.stack}\\n${errorInfo.componentStack}`;\n    \n    // Use centralized logger\n    logger.error('Task Feature Error', error, {\n      feature: 'tasks',\n      errorInfo: errorDetails,\n      timestamp: new Date().toISOString(),\n    });\n\n    this.setState({\n      error,\n      errorInfo: errorDetails,\n    });\n\n    if (this.props.onError) {\n      this.props.onError(error, errorDetails);\n    }\n  }\n\n  private handleRetry = () => {\n    this.setState({ hasError: false, error: undefined, errorInfo: undefined });\n  };\n\n  private handleNavigateHome = () => {\n    if (this.props.onNavigateHome) {\n      this.props.onNavigateHome();\n    } else {\n      window.location.href = '/';\n    }\n  };\n\n  private handleClearTaskData = () => {\n    // Clear React Query cache for tasks\n    try {\n      const queryClient = (window as any).__REACT_QUERY_CLIENT__;\n      if (queryClient) {\n        queryClient.removeQueries({ queryKey: ['tasks'] });\n        queryClient.removeQueries({ queryKey: ['task'] });\n      }\n    } catch (e) {\n      logger.warn('Failed to clear query cache', { error: (e as Error).message });\n    }\n\n    // Clear local storage\n    try {\n      localStorage.removeItem('task-filter');\n      localStorage.removeItem('task-ui-state');\n    } catch (e) {\n      logger.warn('Failed to clear local storage', { error: (e as Error).message });\n    }\n\n    this.handleRetry();\n  };\n\n  render() {\n    if (this.state.hasError) {\n      if (this.props.fallback) {\n        return this.props.fallback;\n      }\n\n      return (\n        <div className=\"flex min-h-[400px] items-center justify-center p-6\">\n          <div className=\"max-w-md text-center space-y-6\">\n            <div className=\"flex justify-center\">\n              <div className=\"flex h-12 w-12 items-center justify-center rounded-full bg-red-100 dark:bg-red-900/20\">\n                <AlertTriangle className=\"h-6 w-6 text-red-600 dark:text-red-400\" />\n              </div>\n            </div>\n            \n            <div className=\"space-y-2\">\n              <h2 className=\"text-xl font-semibold text-gray-900 dark:text-gray-100\">\n                Task Loading Error\n              </h2>\n              <p className=\"text-sm text-gray-600 dark:text-gray-400\">\n                There was a problem loading your tasks. This might be due to a \n                network issue or temporary server problem.\n              </p>\n            </div>\n            \n            <div className=\"space-y-3\">\n              <button\n                onClick={this.handleRetry}\n                className=\"flex w-full items-center justify-center gap-2 rounded-md bg-blue-600 px-4 py-2 text-sm font-medium text-white hover:bg-blue-700 transition-colors\"\n              >\n                <RefreshCw className=\"h-4 w-4\" />\n                Try Again\n              </button>\n              \n              <div className=\"flex gap-2\">\n                <button\n                  onClick={this.handleNavigateHome}\n                  className=\"flex flex-1 items-center justify-center gap-2 rounded-md border border-gray-300 bg-white px-3 py-2 text-sm font-medium text-gray-700 hover:bg-gray-50 dark:border-gray-600 dark:bg-gray-800 dark:text-gray-300 dark:hover:bg-gray-700 transition-colors\"\n                >\n                  <Home className=\"h-4 w-4\" />\n                  Home\n                </button>\n                \n                <button\n                  onClick={this.handleClearTaskData}\n                  className=\"flex flex-1 items-center justify-center rounded-md border border-gray-300 bg-white px-3 py-2 text-sm font-medium text-gray-700 hover:bg-gray-50 dark:border-gray-600 dark:bg-gray-800 dark:text-gray-300 dark:hover:bg-gray-700 transition-colors\"\n                >\n                  Reset Data\n                </button>\n              </div>\n            </div>\n\n            {/* Development error details */}\n            {process.env.NODE_ENV === 'development' && this.state.error && (\n              <details className=\"mt-4 text-left\">\n                <summary className=\"cursor-pointer text-sm font-medium text-gray-600 hover:text-gray-900 dark:text-gray-400 dark:hover:text-gray-100\">\n                  Error Details (Dev)\n                </summary>\n                <div className=\"mt-2 p-3 bg-gray-100 dark:bg-gray-800 rounded-md text-xs font-mono text-gray-600 dark:text-gray-400 whitespace-pre-wrap break-all max-h-32 overflow-y-auto\">\n                  {this.state.error.message}\n                  {this.state.errorInfo && (\n                    <>\n                      {'\\n\\nStack:'}\n                      {this.state.errorInfo}\n                    </>\n                  )}\n                </div>\n              </details>\n            )}\n          </div>\n        </div>\n      );\n    }\n\n    return this.props.children;\n  }\n} ","usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app/task-beacon-app-cursor/task-beacon-app/src/features/tasks/components/TaskExpandButton.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app/task-beacon-app-cursor/task-beacon-app/src/features/tasks/components/TaskFilterNavbar.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app/task-beacon-app-cursor/task-beacon-app/src/features/tasks/components/TaskHeader.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app/task-beacon-app-cursor/task-beacon-app/src/features/tasks/components/TaskList.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":44,"column":44,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":44,"endColumn":47,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1731,1734],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1731,1734],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { lazy, Suspense, memo, useMemo } from 'react';\nimport { useTaskDataContext } from '@/features/tasks/context/TaskDataContext';\nimport { useTaskFiltering } from '@/features/tasks/providers/TaskProviders';\nimport { useRenderTracking, useOptimizedMemo } from '@/hooks/useOptimizedMemo';\nimport TaskFilterNavbar from './TaskFilterNavbar';\nimport TaskPagination from './TaskPagination';\nimport { Skeleton } from '@/components/ui/skeleton';\nimport { FabButton } from './FabButton';\n\n// Lazy load components that aren't needed on initial render\nconst TaskCard = lazy(() => import('./TaskCard'));\n\n// Skeleton component for lazy-loaded task cards - memoized to prevent recreation\nconst TaskCardSkeleton = memo(() => (\n  <div className=\"animate-pulse rounded-xl border-2 border-border/40 bg-muted/20 p-4 sm:p-5\">\n    <div className=\"flex items-start gap-3\">\n      <div className=\"h-10 w-10 rounded-full bg-muted\" />\n      <div className=\"flex-1 space-y-2\">\n        <Skeleton className=\"h-4 w-3/4\" />\n        <Skeleton className=\"h-3 w-1/2\" />\n      </div>\n    </div>\n  </div>\n));\n\nTaskCardSkeleton.displayName = 'TaskCardSkeleton';\n\n// Optimized loading skeleton grid - memoized with smart key generation\nconst LoadingSkeletonGrid = memo(({ count }: { count: number }) => {\n  const skeletonElements = useOptimizedMemo(\n    () => Array.from({ length: count }, (_, i) => (\n      <TaskCardSkeleton key={`skeleton-${i}`} />\n    )),\n    [count],\n    { name: 'skeleton-grid', warnOnSlowComputation: false }\n  );\n\n  return <div className=\"space-y-6\">{skeletonElements}</div>;\n});\n\nLoadingSkeletonGrid.displayName = 'LoadingSkeletonGrid';\n\n// Optimized task grid with virtualization considerations\nconst TaskGrid = memo(({ tasks }: { tasks: any[] }) => {\n  const taskElements = useOptimizedMemo(\n    () => tasks.map((task) => (\n      <Suspense key={task.id} fallback={<TaskCardSkeleton />}>\n        <TaskCard task={task} />\n      </Suspense>\n    )),\n    [tasks],\n    { \n      name: 'task-grid',\n      warnOnSlowComputation: true,\n      trackDependencyChanges: true\n    }\n  );\n\n  return <div className=\"space-y-6\">{taskElements}</div>;\n});\n\nTaskGrid.displayName = 'TaskGrid';\n\n// Empty state component - memoized since it never changes\nconst EmptyState = memo(() => (\n  <div className=\"flex items-center justify-center rounded-xl border-2 border-dashed border-border/60 bg-muted/20 p-8\">\n    <p className=\"text-muted-foreground\">No tasks found</p>\n  </div>\n));\n\nEmptyState.displayName = 'EmptyState';\n\nfunction TaskList() {\n  // Track component render performance\n  const { renderCount, markRenderComplete } = useRenderTracking('TaskList');\n\n  // Get data context for pagination functionality\n  const {\n    isLoading,\n    isFetching,\n    // Pagination props\n    hasNextPage,\n    hasPreviousPage,\n    goToNextPage,\n    goToPreviousPage,\n    currentPage,\n    totalCount,\n    pageSize,\n  } = useTaskDataContext();\n\n  // Use the new convenience hook for filtering operations\n  const { tasks: filteredTasks, filter, setFilter } = useTaskFiltering();\n\n  // Memoize pagination props to prevent unnecessary re-renders of TaskPagination\n  const paginationProps = useMemo(() => ({\n    currentPage,\n    totalCount,\n    pageSize,\n    hasNextPage,\n    hasPreviousPage,\n    goToNextPage,\n    goToPreviousPage,\n    isFetching,\n    isLoading,\n  }), [\n    currentPage,\n    totalCount,\n    pageSize,\n    hasNextPage,\n    hasPreviousPage,\n    goToNextPage,\n    goToPreviousPage,\n    isFetching,\n    isLoading,\n  ]);\n\n  // Optimize content rendering based on state\n  const taskListContent = useOptimizedMemo(() => {\n    if (isLoading) {\n      return <LoadingSkeletonGrid count={pageSize} />;\n    }\n    \n    if (filteredTasks.length > 0) {\n      return <TaskGrid tasks={filteredTasks} />;\n    }\n    \n    return <EmptyState />;\n  }, [isLoading, filteredTasks, pageSize], { \n    name: 'task-list-content',\n    warnOnSlowComputation: true \n  });\n\n  // Mark render completion for performance tracking\n  markRenderComplete();\n\n  return (\n    <>\n      {/* Navbar Section - Completely isolated */}\n      <div className=\"mb-8 w-full px-4 sm:px-6\">\n        <TaskFilterNavbar filter={filter} onFilterChange={setFilter} />\n      </div>\n\n      {/* Task List Section - Optimized content rendering */}\n      <div className=\"w-full px-4 sm:px-6\">\n        {taskListContent}\n\n        {/* Pagination Controls - Memoized props prevent unnecessary re-renders */}\n        <TaskPagination {...paginationProps} />\n      </div>\n\n      {/* Create Task FAB */}\n      <FabButton />\n    </>\n  );\n}\n\n// Export memoized component with shallow equality check for props\nexport default memo(TaskList);\n","usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app/task-beacon-app-cursor/task-beacon-app/src/features/tasks/components/TaskMetadata.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app/task-beacon-app-cursor/task-beacon-app/src/features/tasks/components/TaskPagination.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app/task-beacon-app-cursor/task-beacon-app/src/features/tasks/components/TaskStatus.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app/task-beacon-app-cursor/task-beacon-app/src/features/tasks/components/TimerTooltip.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app/task-beacon-app-cursor/task-beacon-app/src/features/tasks/components/__tests__/CountdownTimer.test.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app/task-beacon-app-cursor/task-beacon-app/src/features/tasks/components/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app/task-beacon-app-cursor/task-beacon-app/src/features/tasks/components/timer/TimerDisplay.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app/task-beacon-app-cursor/task-beacon-app/src/features/tasks/components/timer/TimerRing.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app/task-beacon-app-cursor/task-beacon-app/src/features/tasks/context/TaskDataContext.tsx","messages":[{"ruleId":"react-refresh/only-export-components","severity":1,"message":"Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.","line":51,"column":10,"nodeType":"Identifier","messageId":"namedExport","endLine":51,"endColumn":28}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { ReactNode } from 'react';\nimport { createStandardContext } from '@/lib/utils/createContext';\n\n// Clean imports from organized type system  \nimport type { Task } from '@/types';\nimport { useTaskQueries } from '@/features/tasks/hooks/useTaskQueries';\n\ninterface TaskDataContextValue {\n  tasks: Task[];\n  isLoading: boolean;\n  isFetching: boolean;\n  error: string | null;\n  totalCount: number;\n  currentPage: number;\n  pageSize: number;\n  hasNextPage: boolean;\n  hasPreviousPage: boolean;\n  goToNextPage: () => void;\n  goToPreviousPage: () => void;\n}\n\n// Create standardized context\nconst { Provider: TaskDataProvider, useContext: useTaskDataContext } = createStandardContext<TaskDataContextValue>({\n  name: 'TaskData',\n  errorMessage: 'useTaskDataContext must be used within a TaskDataContextProvider'\n});\n\ninterface TaskDataContextProviderProps {\n  children: ReactNode;\n}\n\n/**\n * Task Data Context Provider\n * \n * Provides task data state and pagination controls to child components.\n * Uses the standardized context pattern for consistent error handling.\n */\nexport function TaskDataContextProvider({\n  children,\n}: TaskDataContextProviderProps) {\n  const taskQueries = useTaskQueries();\n\n  return (\n    <TaskDataProvider value={taskQueries}>\n      {children}\n    </TaskDataProvider>\n  );\n}\n\n// Export the standardized hook\nexport { useTaskDataContext };\n","usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app/task-beacon-app-cursor/task-beacon-app/src/features/tasks/context/TaskUIContext.tsx","messages":[{"ruleId":"react-refresh/only-export-components","severity":1,"message":"Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.","line":74,"column":17,"nodeType":"Identifier","messageId":"namedExport","endLine":74,"endColumn":33}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import {\n  createContext,\n  useContext,\n  useState,\n  useEffect,\n  useMemo,\n  ReactNode,\n} from 'react';\nimport { TaskFilter } from '../types';\n\n// Define the shape of our UI context\ninterface TaskUIContextType {\n  // UI filters\n  filter: TaskFilter;\n  setFilter: (filter: TaskFilter) => void;\n\n  // Expanded state\n  expandedTaskId: string | null;\n  setExpandedTaskId: (id: string | null) => void;\n\n  // Mobile detection\n  isMobile: boolean;\n}\n\nconst TaskUIContext = createContext<TaskUIContextType | undefined>(undefined);\n\n/**\n * Provider component for task UI-related state\n *\n * Manages UI-only concerns like filters, expanded state, and mobile detection\n *\n * @param children - React components that will consume the context\n */\nexport function TaskUIContextProvider({ children }: { children: ReactNode }) {\n  // UI States\n  const [filter, setFilter] = useState<TaskFilter>('all');\n  const [expandedTaskId, setExpandedTaskId] = useState<string | null>(null);\n  const [isMobile, setIsMobile] = useState(false);\n\n  // Check if the device is mobile on component mount and window resize\n  useEffect(() => {\n    const checkIfMobile = () => {\n      setIsMobile(window.innerWidth < 768);\n    };\n\n    checkIfMobile();\n    window.addEventListener('resize', checkIfMobile);\n\n    return () => window.removeEventListener('resize', checkIfMobile);\n  }, []);\n\n  const value = useMemo(\n    () => ({\n      filter,\n      setFilter,\n      expandedTaskId,\n      setExpandedTaskId,\n      isMobile,\n    }),\n    [filter, expandedTaskId, isMobile]\n  );\n\n  return (\n    <TaskUIContext.Provider value={value}>{children}</TaskUIContext.Provider>\n  );\n}\n\n/**\n * Custom hook for using the task UI context\n *\n * @returns The task UI context value\n * @throws Error if used outside of a TaskUIContextProvider\n */\nexport function useTaskUIContext() {\n  const context = useContext(TaskUIContext);\n  if (context === undefined) {\n    throw new Error(\n      'useTaskUIContext must be used within a TaskUIContextProvider'\n    );\n  }\n  return context;\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app/task-beacon-app-cursor/task-beacon-app/src/features/tasks/forms/CreateTaskForm.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app/task-beacon-app-cursor/task-beacon-app/src/features/tasks/forms/FollowUpTaskForm.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app/task-beacon-app-cursor/task-beacon-app/src/features/tasks/forms/TaskFormExample.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app/task-beacon-app-cursor/task-beacon-app/src/features/tasks/forms/TaskFormWithValidation.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app/task-beacon-app-cursor/task-beacon-app/src/features/tasks/hooks/__tests__/useTaskMutations.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app/task-beacon-app-cursor/task-beacon-app/src/features/tasks/hooks/useCountdown.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app/task-beacon-app-cursor/task-beacon-app/src/features/tasks/hooks/useCreateTask.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app/task-beacon-app-cursor/task-beacon-app/src/features/tasks/hooks/useCreateTaskAPI.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app/task-beacon-app-cursor/task-beacon-app/src/features/tasks/hooks/useCreateTaskPhotoUpload.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app/task-beacon-app-cursor/task-beacon-app/src/features/tasks/hooks/useFilteredTasks.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app/task-beacon-app-cursor/task-beacon-app/src/features/tasks/hooks/useFollowUpTask.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app/task-beacon-app-cursor/task-beacon-app/src/features/tasks/hooks/useRealtimeTaskUpdates.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app/task-beacon-app-cursor/task-beacon-app/src/features/tasks/hooks/useTaskAnimation.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app/task-beacon-app-cursor/task-beacon-app/src/features/tasks/hooks/useTaskCard.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app/task-beacon-app-cursor/task-beacon-app/src/features/tasks/hooks/useTaskDeleteMutations.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app/task-beacon-app-cursor/task-beacon-app/src/features/tasks/hooks/useTaskDetails.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app/task-beacon-app-cursor/task-beacon-app/src/features/tasks/hooks/useTaskError.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app/task-beacon-app-cursor/task-beacon-app/src/features/tasks/hooks/useTaskForm.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app/task-beacon-app-cursor/task-beacon-app/src/features/tasks/hooks/useTaskFormState.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app/task-beacon-app-cursor/task-beacon-app/src/features/tasks/hooks/useTaskFormValidation.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app/task-beacon-app-cursor/task-beacon-app/src/features/tasks/hooks/useTaskMutations.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app/task-beacon-app-cursor/task-beacon-app/src/features/tasks/hooks/useTaskOptimisticUpdates.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app/task-beacon-app-cursor/task-beacon-app/src/features/tasks/hooks/useTaskPhotoUpload.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app/task-beacon-app-cursor/task-beacon-app/src/features/tasks/hooks/useTaskPinMutations.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app/task-beacon-app-cursor/task-beacon-app/src/features/tasks/hooks/useTaskQueries.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app/task-beacon-app-cursor/task-beacon-app/src/features/tasks/hooks/useTaskRealtime.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app/task-beacon-app-cursor/task-beacon-app/src/features/tasks/hooks/useTaskStatusMutations.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app/task-beacon-app-cursor/task-beacon-app/src/features/tasks/hooks/useTaskValidation.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app/task-beacon-app-cursor/task-beacon-app/src/features/tasks/hooks/useTaskWorkflow.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":145,"column":58,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":145,"endColumn":61,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4865,4868],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4865,4868],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"no-case-declarations","severity":2,"message":"Unexpected lexical declaration in case block.","line":152,"column":11,"nodeType":"VariableDeclaration","messageId":"unexpected","endLine":152,"endColumn":77,"suggestions":[{"messageId":"addBrackets","fix":{"range":[5030,5179],"text":"{ const createResult = await createTaskWithWorkflow(operation.data);\n          results.push({ operation: 'create', ...createResult });\n          break; }"},"desc":"Add {} brackets around the case block."}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useCallback, useMemo } from 'react';\nimport { useTaskForm } from './useTaskForm';\nimport { useTaskMutations } from './useTaskMutations';\nimport { useRealtimeTaskUpdates } from './useRealtimeTaskUpdates';\nimport { useTaskFormValidation } from './useTaskFormValidation';\nimport { useCreateTaskAPI } from './useCreateTaskAPI';\nimport { useCreateTaskPhotoUpload } from './useCreateTaskPhotoUpload';\nimport { toast } from '@/lib/toast';\nimport { Task } from '@/types';\nimport { UseTaskFormStateOptions } from './useTaskFormState';\n\ninterface UseTaskWorkflowOptions extends UseTaskFormStateOptions {\n  enableRealtimeSync?: boolean;\n  enableOptimisticUpdates?: boolean;\n  onWorkflowComplete?: (result: { success: boolean; taskId?: string }) => void;\n}\n\n/**\n * Enhanced workflow orchestration hook for task operations\n * \n * Combines multiple task-related hooks into cohesive workflows while maintaining\n * separation of concerns. Provides simplified APIs for complex multi-step operations.\n * \n * @param options - Configuration options for the workflow\n * @returns Combined workflow state and actions\n */\nexport function useTaskWorkflow(options: UseTaskWorkflowOptions = {}) {\n  const {\n    enableRealtimeSync = true,\n    enableOptimisticUpdates = true,\n    onWorkflowComplete,\n    ...formOptions\n  } = options;\n\n  // Initialize all constituent hooks\n  const form = useTaskForm(formOptions);\n  const mutations = useTaskMutations();\n  const realtime = useRealtimeTaskUpdates();\n  const { validateTaskForm } = useTaskFormValidation();\n  const { executeCreateTask } = useCreateTaskAPI();\n  const { uploadPhotoIfPresent } = useCreateTaskPhotoUpload();\n\n  /**\n   * Enhanced task creation workflow\n   * Orchestrates validation, photo upload, API call, and real-time sync\n   */\n  const createTaskWithWorkflow = useCallback(async (formData: {\n    title: string;\n    description: string;\n    dueDate: string;\n    url: string;\n    pinned: boolean;\n    assigneeId: string;\n  }) => {\n    try {\n      // Step 1: Validate form data\n      const validationResult = validateTaskForm(formData);\n      if (!validationResult.isValid) {\n        toast.error('Please fix validation errors');\n        return { success: false, error: 'Validation failed' };\n      }\n\n      form.setLoading(true);\n\n      // Step 2: Upload photo if present\n      const photoUrl = await uploadPhotoIfPresent(form.photo);\n\n      // Step 3: Create task via API\n      const result = await executeCreateTask({\n        ...formData,\n        photoUrl,\n      });\n\n      if (result.success) {\n        // Step 4: Real-time sync (if enabled)\n        // Note: task ID would need to be returned from API for full functionality\n        if (enableRealtimeSync) {\n          // For demo purposes, using a placeholder ID\n          realtime.markTaskAsUpdated('new-task-id');\n        }\n\n        // Step 5: Reset form and notify\n        form.resetForm();\n        toast.success('Task created successfully');\n        onWorkflowComplete?.({ success: true, taskId: 'new-task-id' });\n\n        return { success: true, taskId: 'new-task-id' };\n      } else {\n        toast.error(result.error || 'Failed to create task');\n        return { success: false, error: result.error };\n      }\n    } catch (error) {\n      const message = error instanceof Error ? error.message : 'Unknown error';\n      toast.error(`Task creation failed: ${message}`);\n      return { success: false, error: message };\n    } finally {\n      form.setLoading(false);\n    }\n  }, [\n    form,\n    realtime,\n    validateTaskForm,\n    executeCreateTask,\n    uploadPhotoIfPresent,\n    enableRealtimeSync,\n    onWorkflowComplete,\n  ]);\n\n  /**\n   * Enhanced task update workflow\n   * Handles optimistic updates with rollback capability\n   */\n  const updateTaskWithWorkflow = useCallback(async (\n    task: Task,\n    updates: Partial<Task>\n  ) => {\n    try {\n      // Use optimistic updates if enabled\n      if (enableOptimisticUpdates) {\n        const updatedTask = { ...task, ...updates };\n        const result = await mutations.toggleTaskComplete(updatedTask);\n        \n        if (enableRealtimeSync && result.success) {\n          realtime.markTaskAsUpdated(task.id);\n        }\n\n        return result;\n      } else {\n        // Standard update without optimistic behavior\n        // Implementation would depend on specific update API\n        return { success: true };\n      }\n    } catch (error) {\n      const message = error instanceof Error ? error.message : 'Unknown error';\n      toast.error(`Task update failed: ${message}`);\n      return { success: false, error: message };\n    }\n  }, [mutations, realtime, enableOptimisticUpdates, enableRealtimeSync]);\n\n  /**\n   * Batch operation workflow\n   * Handles multiple task operations with proper coordination\n   */\n  const batchTaskOperations = useCallback(async (\n    operations: Array<{ type: 'create' | 'update'; data: any; task?: Task }>\n  ) => {\n    const results = [];\n    \n    for (const operation of operations) {\n      switch (operation.type) {\n        case 'create':\n          const createResult = await createTaskWithWorkflow(operation.data);\n          results.push({ operation: 'create', ...createResult });\n          break;\n        case 'update':\n          if (operation.task) {\n            const updateResult = await updateTaskWithWorkflow(operation.task, operation.data);\n            results.push({ operation: 'update', ...updateResult });\n          } else {\n            results.push({ operation: 'update', success: false, error: 'Task required for update' });\n          }\n          break;\n        default:\n          results.push({ operation: operation.type, success: false, error: 'Unsupported operation' });\n      }\n    }\n\n    const successCount = results.filter(r => r.success).length;\n    const totalCount = results.length;\n\n    if (successCount === totalCount) {\n      toast.success(`All ${totalCount} operations completed successfully`);\n    } else if (successCount > 0) {\n      toast.info(`${successCount}/${totalCount} operations completed successfully`);\n    } else {\n      toast.error('All operations failed');\n    }\n\n    return { results, successCount, totalCount };\n  }, [createTaskWithWorkflow, updateTaskWithWorkflow]);\n\n  // Compute workflow status\n  const workflowStatus = useMemo(() => ({\n    isFormReady: form.title.trim().length > 0,\n    isLoading: form.loading,\n    isRealtimeConnected: realtime.isSubscribed,\n    hasUnsavedChanges: form.title || form.description || form.url,\n    canSubmit: form.title.trim().length > 0 && !form.loading,\n  }), [form, realtime]);\n\n  return {\n    // Form state and actions\n    ...form,\n    \n    // Workflow-specific actions\n    createTaskWithWorkflow,\n    updateTaskWithWorkflow,\n    batchTaskOperations,\n    \n    // Workflow status\n    workflowStatus,\n    \n    // Real-time information\n    isRealtimeConnected: realtime.isSubscribed,\n    realtimeUpdatedTasks: realtime.updatedTasksCount,\n    \n    // Configuration\n    enableRealtimeSync,\n    enableOptimisticUpdates,\n  };\n} ","usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app/task-beacon-app-cursor/task-beacon-app/src/features/tasks/integration/taskWorkflow.integration.test.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app/task-beacon-app-cursor/task-beacon-app/src/features/tasks/providers/TaskProviders.tsx","messages":[{"ruleId":"react-refresh/only-export-components","severity":1,"message":"Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.","line":38,"column":17,"nodeType":"Identifier","messageId":"namedExport","endLine":38,"endColumn":32},{"ruleId":"react-refresh/only-export-components","severity":1,"message":"Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.","line":54,"column":17,"nodeType":"Identifier","messageId":"namedExport","endLine":54,"endColumn":33},{"ruleId":"react-refresh/only-export-components","severity":1,"message":"Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.","line":74,"column":17,"nodeType":"Identifier","messageId":"namedExport","endLine":74,"endColumn":43},{"ruleId":"react-refresh/only-export-components","severity":1,"message":"Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.","line":88,"column":17,"nodeType":"Identifier","messageId":"namedExport","endLine":88,"endColumn":41},{"ruleId":"react-refresh/only-export-components","severity":1,"message":"Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.","line":102,"column":17,"nodeType":"Identifier","messageId":"namedExport","endLine":102,"endColumn":38},{"ruleId":"react-hooks/rules-of-hooks","severity":2,"message":"React Hook \"useTaskDataContextOptional\" cannot be called inside a callback. React Hooks must be called in a React function component or a custom React Hook function.","line":112,"column":27,"nodeType":"Identifier","endLine":112,"endColumn":53},{"ruleId":"react-hooks/rules-of-hooks","severity":2,"message":"React Hook \"useTaskUIContextOptional\" cannot be called inside a callback. React Hooks must be called in a React function component or a custom React Hook function.","line":113,"column":25,"nodeType":"Identifier","endLine":113,"endColumn":49},{"ruleId":"react-refresh/only-export-components","severity":1,"message":"Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.","line":140,"column":17,"nodeType":"Identifier","messageId":"namedExport","endLine":140,"endColumn":34},{"ruleId":"react-refresh/only-export-components","severity":1,"message":"Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.","line":204,"column":35,"nodeType":"Identifier","messageId":"namedExport","endLine":204,"endColumn":57},{"ruleId":"react-refresh/only-export-components","severity":1,"message":"Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.","line":210,"column":17,"nodeType":"Identifier","messageId":"namedExport","endLine":210,"endColumn":42}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useEffect, useState } from 'react';\nimport { TaskDataContextProvider, useTaskDataContext } from '../context/TaskDataContext';\nimport { TaskUIContextProvider, useTaskUIContext } from '../context/TaskUIContext';\nimport { useFilteredTasks } from '../hooks/useFilteredTasks';\n\ninterface TaskProvidersProps {\n  children: React.ReactNode;\n  debug?: boolean;\n}\n\n/**\n * Feature-specific provider composition for task management\n * \n * Provides both task data and UI state contexts in the correct order.\n * Should be used to wrap task-related routes or components that need\n * access to task state.\n * \n * Provider order:\n * 1. TaskDataContext - Server state and data operations\n * 2. TaskUIContext - Client state and UI preferences\n */\nexport function TaskProviders({ children, debug = false }: TaskProvidersProps) {\n  return (\n    <TaskDataContextProvider>\n      <TaskUIContextProvider>\n        {debug && process.env.NODE_ENV === 'development' && <TaskProviderDebugger />}\n        {children}\n      </TaskUIContextProvider>\n    </TaskDataContextProvider>\n  );\n}\n\n/**\n * Convenience hook for components that need both task contexts\n * \n * @returns Object containing both data and UI context values\n */\nexport function useTaskContexts() {\n  const dataContext = useTaskDataContext();\n  const uiContext = useTaskUIContext();\n  \n  return {\n    data: dataContext,\n    ui: uiContext,\n  };\n}\n\n/**\n * Convenience hook for filtering operations\n * Combines task data, filtering state, and filtered results\n * \n * @returns Object with filtered tasks and filter controls\n */\nexport function useTaskFiltering() {\n  const { tasks } = useTaskDataContext();\n  const { filter, setFilter } = useTaskUIContext();\n  const filteredTasks = useFilteredTasks(tasks, filter);\n  \n  return { \n    tasks: filteredTasks, \n    filter, \n    setFilter,\n    totalCount: tasks.length,\n    filteredCount: filteredTasks.length,\n  };\n}\n\n/**\n * Optional hook for TaskDataContext - doesn't throw if outside provider\n * Useful for components that conditionally use task data\n * \n * @returns TaskDataContext value or null if not available\n */\nexport function useTaskDataContextOptional() {\n  try {\n    return useTaskDataContext();\n  } catch {\n    return null;\n  }\n}\n\n/**\n * Optional hook for TaskUIContext - doesn't throw if outside provider\n * Useful for components that conditionally use task UI state\n * \n * @returns TaskUIContext value or null if not available\n */\nexport function useTaskUIContextOptional() {\n  try {\n    return useTaskUIContext();\n  } catch {\n    return null;\n  }\n}\n\n/**\n * Enhanced hook to check task provider status and readiness\n * Useful for conditional rendering and debugging\n * \n * @returns Object with provider availability status\n */\nexport function useTaskProviderStatus() {\n  const [status, setStatus] = useState({\n    hasDataContext: false,\n    hasUIContext: false,\n    isReady: false,\n    isLoading: true,\n  });\n\n  useEffect(() => {\n    try {\n      const dataContext = useTaskDataContextOptional();\n      const uiContext = useTaskUIContextOptional();\n      \n      setStatus({\n        hasDataContext: !!dataContext,\n        hasUIContext: !!uiContext,\n        isReady: !!dataContext && !!uiContext,\n        isLoading: false,\n      });\n    } catch {\n      setStatus({\n        hasDataContext: false,\n        hasUIContext: false,\n        isReady: false,\n        isLoading: false,\n      });\n    }\n  }, []);\n\n  return status;\n}\n\n/**\n * Higher-order component for wrapping components with task providers\n * \n * @param Component - Component that needs task context\n * @returns Wrapped component with task providers\n */\nexport function withTaskProviders<T extends object>(\n  Component: React.ComponentType<T>\n) {\n  const WrappedComponent = (props: T) => (\n    <TaskProviders>\n      <Component {...props} />\n    </TaskProviders>\n  );\n\n  WrappedComponent.displayName = `withTaskProviders(${Component.displayName || Component.name})`;\n  \n  return WrappedComponent;\n}\n\n/**\n * Development-only debugger component for task providers\n * Shows current context state in development mode\n */\nfunction TaskProviderDebugger() {\n  const dataContext = useTaskDataContextOptional();\n  const uiContext = useTaskUIContextOptional();\n  \n  if (process.env.NODE_ENV !== 'development') {\n    return null;\n  }\n\n  return (\n    <div \n      style={{\n        position: 'fixed',\n        bottom: '10px',\n        right: '10px',\n        background: 'rgba(0,0,0,0.8)',\n        color: 'white',\n        padding: '10px',\n        borderRadius: '4px',\n        fontSize: '12px',\n        zIndex: 9999,\n        maxWidth: '300px',\n        fontFamily: 'monospace',\n      }}\n    >\n      <div><strong>Task Provider Status:</strong></div>\n      <div>Data Context: {dataContext ? '✅' : '❌'}</div>\n      <div>UI Context: {uiContext ? '✅' : '❌'}</div>\n      {dataContext && (\n        <div>\n          <div>Tasks: {dataContext.tasks.length}</div>\n          <div>Loading: {dataContext.isLoading ? '⏳' : '✅'}</div>\n          <div>Page: {dataContext.currentPage}</div>\n        </div>\n      )}\n      {uiContext && (\n        <div>\n          <div>Filter: {uiContext.filter}</div>\n          <div>Mobile: {uiContext.isMobile ? '📱' : '🖥️'}</div>\n          <div>Expanded: {uiContext.expandedTaskId || 'None'}</div>\n        </div>\n      )}\n    </div>\n  );\n}\n\n// Legacy compatibility - keeping the original function for backward compatibility\nexport { useTaskProviderStatus as useTaskProvidersStatus };\n\n/**\n * Hook for performance monitoring of context re-renders\n * Development-only utility for tracking context update frequency\n */\nexport function useTaskContextPerformance() {\n  const [renderCount, setRenderCount] = useState({\n    data: 0,\n    ui: 0,\n    total: 0,\n  });\n\n  const dataContext = useTaskDataContextOptional();\n  const uiContext = useTaskUIContextOptional();\n\n  useEffect(() => {\n    setRenderCount(prev => ({\n      ...prev,\n      data: prev.data + 1,\n      total: prev.total + 1,\n    }));\n  }, [dataContext]);\n\n  useEffect(() => {\n    setRenderCount(prev => ({\n      ...prev,\n      ui: prev.ui + 1,\n      total: prev.total + 1,\n    }));\n  }, [uiContext]);\n\n  return process.env.NODE_ENV === 'development' ? renderCount : null;\n} ","usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app/task-beacon-app-cursor/task-beacon-app/src/features/tasks/schemas/taskSchema.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app/task-beacon-app-cursor/task-beacon-app/src/features/tasks/types.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app/task-beacon-app-cursor/task-beacon-app/src/features/tasks/types/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app/task-beacon-app-cursor/task-beacon-app/src/features/tasks/types/navigator.d.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app/task-beacon-app-cursor/task-beacon-app/src/features/tasks/types/task-api.types.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app/task-beacon-app-cursor/task-beacon-app/src/features/tasks/types/task-form.types.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app/task-beacon-app-cursor/task-beacon-app/src/features/tasks/types/task-ui.types.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app/task-beacon-app-cursor/task-beacon-app/src/features/tasks/utils/taskCardStyles.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app/task-beacon-app-cursor/task-beacon-app/src/features/tasks/utils/taskUiUtils.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app/task-beacon-app-cursor/task-beacon-app/src/features/users/components/EnhancedUserSearch.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app/task-beacon-app-cursor/task-beacon-app/src/features/users/components/UserProfile.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app/task-beacon-app-cursor/task-beacon-app/src/features/users/components/UserSearchInput.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app/task-beacon-app-cursor/task-beacon-app/src/features/users/components/UserSelect.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app/task-beacon-app-cursor/task-beacon-app/src/features/users/components/preferences/NotificationPreferences.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app/task-beacon-app-cursor/task-beacon-app/src/features/users/hooks/useUserFilter.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app/task-beacon-app-cursor/task-beacon-app/src/features/users/hooks/useUserFilter.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app/task-beacon-app-cursor/task-beacon-app/src/features/users/hooks/useUserList.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app/task-beacon-app-cursor/task-beacon-app/src/features/users/hooks/useUserList.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app/task-beacon-app-cursor/task-beacon-app/src/features/users/hooks/useUserProfile.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app/task-beacon-app-cursor/task-beacon-app/src/features/users/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app/task-beacon-app-cursor/task-beacon-app/src/features/users/types/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app/task-beacon-app-cursor/task-beacon-app/src/hooks/dataValidationUtils.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app/task-beacon-app-cursor/task-beacon-app/src/hooks/use-mobile.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app/task-beacon-app-cursor/task-beacon-app/src/hooks/use-toast.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app/task-beacon-app-cursor/task-beacon-app/src/hooks/useMobileViewport.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app/task-beacon-app-cursor/task-beacon-app/src/hooks/useMotionPreferences.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app/task-beacon-app-cursor/task-beacon-app/src/hooks/useNavbar.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app/task-beacon-app-cursor/task-beacon-app/src/hooks/useOptimizedMemo.ts","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useMemo was passed a dependency list that is not an array literal. This means we can't statically verify whether you've passed the correct dependencies.","line":50,"column":6,"nodeType":"Identifier","endLine":50,"endColumn":10},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useMemo has missing dependencies: 'factory', 'name', and 'warnOnSlowComputation'. Either include them or remove the dependency array. If 'factory' changes too often, find the parent component that defines it and wrap that definition in useCallback.","line":50,"column":6,"nodeType":"Identifier","endLine":50,"endColumn":10,"suggestions":[{"desc":"Update the dependencies array to be: [factory, name, warnOnSlowComputation]","fix":{"range":[1627,1631],"text":"[factory, name, warnOnSlowComputation]"}}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":56,"column":58,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":56,"endColumn":61,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1758,1761],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1758,1761],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":56,"column":68,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":56,"endColumn":71,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1768,1771],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1768,1771],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback received a function whose dependencies are unknown. Pass an inline function instead.","line":84,"column":10,"nodeType":"Identifier","endLine":84,"endColumn":21},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":90,"column":81,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":90,"endColumn":84,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2790,2793],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2790,2793],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useMemo was passed a dependency list that is not an array literal. This means we can't statically verify whether you've passed the correct dependencies.","line":179,"column":6,"nodeType":"Identifier","endLine":179,"endColumn":10},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useMemo has missing dependencies: 'deps', 'factory', 'maxCacheSize', 'name', and 'ttl'. Either include them or remove the dependency array. If 'factory' changes too often, find the parent component that defines it and wrap that definition in useCallback.","line":179,"column":6,"nodeType":"Identifier","endLine":179,"endColumn":10,"suggestions":[{"desc":"Update the dependencies array to be: [deps, factory, maxCacheSize, name, ttl]","fix":{"range":[5531,5535],"text":"[deps, factory, maxCacheSize, name, ttl]"}}]}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useCallback, useMemo, useRef, useEffect } from 'react';\nimport { performanceMonitor } from '@/lib/utils/performance';\n\n/**\n * Enhanced useMemo with performance tracking and optimization warnings\n */\nexport function useOptimizedMemo<T>(\n  factory: () => T,\n  deps: React.DependencyList | undefined,\n  options?: {\n    name?: string;\n    warnOnSlowComputation?: boolean;\n    trackDependencyChanges?: boolean;\n  }\n): T {\n  const { name = 'anonymous', warnOnSlowComputation = true, trackDependencyChanges = true } = options || {};\n  const prevDepsRef = useRef<React.DependencyList | undefined>();\n  const computationCountRef = useRef(0);\n\n  // Track dependency changes for optimization insights\n  useEffect(() => {\n    if (trackDependencyChanges && prevDepsRef.current) {\n      const changedDeps = deps?.filter((dep, index) => dep !== prevDepsRef.current?.[index]) || [];\n      if (changedDeps.length > 0) {\n        console.debug(`📊 Memo dependencies changed in ${name}:`, { \n          totalDeps: deps?.length,\n          changedCount: changedDeps.length,\n          computationCount: computationCountRef.current \n        });\n      }\n    }\n    prevDepsRef.current = deps;\n  });\n\n  return useMemo(() => {\n    const startTime = performance.now();\n    computationCountRef.current++;\n    \n    const result = factory();\n    const duration = performance.now() - startTime;\n    \n    if (warnOnSlowComputation && duration > 5) {\n      console.warn(`🐌 Slow memo computation in ${name}: ${duration.toFixed(2)}ms`, {\n        computationCount: computationCountRef.current,\n        duration\n      });\n    }\n    \n    return result;\n  }, deps);\n}\n\n/**\n * Enhanced useCallback with dependency change tracking\n */\nexport function useOptimizedCallback<T extends (...args: any[]) => any>(\n  callback: T,\n  deps: React.DependencyList,\n  options?: {\n    name?: string;\n    trackDependencyChanges?: boolean;\n  }\n): T {\n  const { name = 'anonymous', trackDependencyChanges = true } = options || {};\n  const prevDepsRef = useRef<React.DependencyList>();\n  const recreationCountRef = useRef(0);\n\n  // Track callback recreations\n  useEffect(() => {\n    if (trackDependencyChanges && prevDepsRef.current) {\n      const changedDeps = deps.filter((dep, index) => dep !== prevDepsRef.current?.[index]);\n      if (changedDeps.length > 0) {\n        recreationCountRef.current++;\n        console.debug(`🔄 Callback recreated in ${name}:`, { \n          totalDeps: deps.length,\n          changedCount: changedDeps.length,\n          recreationCount: recreationCountRef.current \n        });\n      }\n    }\n    prevDepsRef.current = deps;\n  });\n\n  return useCallback(callback, deps);\n}\n\n/**\n * Hook for tracking component render performance\n */\nexport function useRenderTracking(componentName: string, props?: Record<string, any>) {\n  const renderCountRef = useRef(0);\n  const lastRenderTimeRef = useRef(0);\n  const propsRef = useRef(props);\n\n  useEffect(() => {\n    const renderTime = performance.now();\n    renderCountRef.current++;\n    \n    // Check if props changed\n    const propsChanged = props && propsRef.current && \n      JSON.stringify(props) !== JSON.stringify(propsRef.current);\n    \n    // Track render performance\n    performanceMonitor.trackComponentRender(componentName, renderTime, !!propsChanged);\n    \n    // Warn about frequent renders\n    if (renderCountRef.current > 5 && renderTime - lastRenderTimeRef.current < 100) {\n      console.warn(`🔄 Frequent renders detected in ${componentName}:`, {\n        renderCount: renderCountRef.current,\n        timeSinceLastRender: renderTime - lastRenderTimeRef.current\n      });\n    }\n    \n    lastRenderTimeRef.current = renderTime;\n    propsRef.current = props;\n  });\n\n  return {\n    renderCount: renderCountRef.current,\n    markRenderComplete: () => {\n      const renderTime = performance.now() - lastRenderTimeRef.current;\n      if (renderTime > 16) { // More than one frame\n        console.warn(`🐌 Slow render in ${componentName}: ${renderTime.toFixed(2)}ms`);\n      }\n    }\n  };\n}\n\n/**\n * Hook for optimizing expensive computations with smart caching\n */\nexport function useSmartMemo<T>(\n  factory: () => T,\n  deps: React.DependencyList,\n  options?: {\n    maxCacheSize?: number;\n    ttl?: number; // Time to live in milliseconds\n    name?: string;\n  }\n): T {\n  const { maxCacheSize = 10, ttl, name = 'smart-memo' } = options || {};\n  const cacheRef = useRef<Map<string, { value: T; timestamp: number }>>(new Map());\n  \n  return useMemo(() => {\n    const key = JSON.stringify(deps);\n    const cache = cacheRef.current;\n    const now = Date.now();\n    \n    // Check if we have a valid cached value\n    const cached = cache.get(key);\n    if (cached) {\n      if (!ttl || (now - cached.timestamp) < ttl) {\n        return cached.value;\n      } else {\n        cache.delete(key); // Remove expired entry\n      }\n    }\n    \n    // Compute new value\n    const startTime = performance.now();\n    const value = factory();\n    const duration = performance.now() - startTime;\n    \n    // Cache the result\n    cache.set(key, { value, timestamp: now });\n    \n    // Cleanup old entries if cache is too large\n    if (cache.size > maxCacheSize) {\n      const entries = Array.from(cache.entries()).sort((a, b) => a[1].timestamp - b[1].timestamp);\n      const entriesToDelete = entries.slice(0, cache.size - maxCacheSize);\n      entriesToDelete.forEach(([k]) => cache.delete(k));\n    }\n    \n    if (duration > 10) {\n      console.debug(`⚡ Computed ${name}: ${duration.toFixed(2)}ms`);\n    }\n    \n    return value;\n  }, deps);\n} ","usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app/task-beacon-app-cursor/task-beacon-app/src/hooks/usePerformanceMonitoring.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app/task-beacon-app-cursor/task-beacon-app/src/hooks/useProfileValidation.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app/task-beacon-app-cursor/task-beacon-app/src/hooks/useProfileValidation.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app/task-beacon-app-cursor/task-beacon-app/src/hooks/useRealtimeEntity.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":135,"column":54,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":135,"endColumn":57,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4043,4046],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4043,4046],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useEffect, useCallback, useState } from 'react';\nimport { useRealtimeSubscription } from './useRealtimeSubscription';\nimport { useQueryClient, useQuery } from '@tanstack/react-query';\nimport { useAuth } from '@/contexts/AuthContext';\nimport { realtimeLogger } from '@/lib/logger';\n\ninterface EntityWithId {\n  id: string;\n}\n\n/**\n * Configuration options for the useRealtimeEntity hook\n */\ninterface UseRealtimeEntityOptions<T extends EntityWithId> {\n  /** The database table to subscribe to */\n  table: string;\n  /** The query key used by React Query for caching */\n  queryKey: string[];\n  /** \n   * Callback fired when a new entity is inserted\n   * @param payload - The realtime payload containing the new entity data\n   */\n  onEntityCreated?: (entity: T) => void;\n  /** \n   * Callback fired when an entity is updated\n   * @param payload - The realtime payload containing old and new entity data\n   */\n  onEntityUpdated?: (entity: T) => void;\n  /** \n   * Callback fired when an entity is deleted\n   * @param payload - The realtime payload containing the deleted entity data\n   */\n  onEntityDeleted?: (entity: T) => void;\n  /** The entity ID to track */\n  entityId: string;\n  /** The function to fetch the entity */\n  fetchFn: (id: string) => Promise<T>;\n  /** Whether the entity is enabled */\n  enabled?: boolean;\n  /** The refetch interval for the entity */\n  refetchInterval?: number;\n}\n\n/**\n * Hook for managing real-time entity updates with automatic query invalidation\n * \n * This hook provides a high-level abstraction over Supabase real-time subscriptions,\n * automatically handling query cache invalidation and providing type-safe callbacks\n * for database changes.\n * \n * @template T - The TypeScript type of the entity being tracked\n * @param options - Configuration options for the real-time subscription\n * @returns Object containing subscription status and manual invalidation function\n * \n * @example\n * ```typescript\n * // Track task updates with custom handlers\n * const { isSubscribed } = useRealtimeEntity<Task>({\n *   table: 'tasks',\n *   queryKey: ['tasks', taskId],\n *   onEntityUpdated: ({ old, new: updated }) => {\n *     if (old.status !== updated.status) {\n *       toast.success('Task status updated!');\n *     }\n *   },\n *   onEntityDeleted: ({ old }) => {\n *     toast.info(`Task \"${old.title}\" was deleted`);\n *   },\n *   entityId: taskId,\n *   fetchFn: getTask,\n *   enabled: true,\n *   refetchInterval: 5000\n * });\n * ```\n * \n * @example\n * ```typescript\n * // Simple subscription without custom handlers\n * const { isSubscribed, invalidateQueries } = useRealtimeEntity<User>({\n *   table: 'profiles',\n *   queryKey: ['users'],\n *   entityId: user.id,\n *   fetchFn: getUser,\n *   enabled: true,\n *   refetchInterval: 5000\n * });\n * \n * // Manually refresh cache when needed\n * const handleRefresh = () => {\n *   invalidateQueries();\n * };\n * ```\n */\nexport function useRealtimeEntity<T extends EntityWithId>({\n  table,\n  queryKey,\n  onEntityCreated,\n  onEntityUpdated,\n  onEntityDeleted,\n  entityId,\n  fetchFn,\n  enabled = true,\n  refetchInterval,\n}: UseRealtimeEntityOptions<T>) {\n  const queryClient = useQueryClient();\n  const { user } = useAuth();\n  const [isConnected, setIsConnected] = useState(false);\n  const [lastUpdate, setLastUpdate] = useState<Date | null>(null);\n\n  /**\n   * Invalidates React Query cache for the specified query key\n   * This triggers a refetch of the data from the server\n   */\n  const invalidateQueries = useCallback(() => {\n    queryClient.invalidateQueries({ queryKey: queryKey });\n  }, [queryClient, queryKey]);\n\n  // Fetch entity data with React Query\n  const {\n    data: entity,\n    isLoading,\n    error,\n    refetch,\n    isRefetching,\n  } = useQuery({\n    queryKey: [...queryKey, entityId],\n    queryFn: () => fetchFn(entityId),\n    enabled: enabled && !!entityId,\n    refetchInterval,\n    retry: 3,\n    retryDelay: attemptIndex => Math.min(1000 * 2 ** attemptIndex, 30000),\n  });\n\n  // Handle real-time updates\n  const handleRealtimeUpdate = useCallback((payload: any) => {\n    const eventType = payload.eventType;\n    const updatedEntity = payload.new;\n    const deletedEntity = payload.old;\n\n    switch (eventType) {\n      case 'INSERT':\n        if (updatedEntity && updatedEntity.id === entityId) {\n          realtimeLogger.debug(`New ${table} entity`, {\n            entityId: updatedEntity.id,\n            table\n          });\n          \n          onEntityCreated?.(updatedEntity);\n          setLastUpdate(new Date());\n        }\n        break;\n\n      case 'UPDATE':\n        if (updatedEntity && updatedEntity.id === entityId) {\n          realtimeLogger.debug(`Updated ${table} entity`, {\n            entityId: updatedEntity.id,\n            table,\n            hasChanges: JSON.stringify(updatedEntity) !== JSON.stringify(deletedEntity)\n          });\n          \n          onEntityUpdated?.(updatedEntity);\n          setLastUpdate(new Date());\n        }\n        break;\n\n      case 'DELETE':\n        if (deletedEntity && deletedEntity.id === entityId) {\n          realtimeLogger.debug(`Deleted ${table} entity`, {\n            entityId: deletedEntity.id,\n            table\n          });\n          \n          onEntityDeleted?.(deletedEntity);\n          setLastUpdate(new Date());\n        }\n        break;\n\n      default:\n        realtimeLogger.warn(`Unknown event type for ${table}`, { eventType, table });\n        break;\n    }\n  }, [entityId, table, onEntityCreated, onEntityUpdated, onEntityDeleted]);\n\n  // Set up real-time subscription\n  const { isSubscribed } = useRealtimeSubscription({\n    table,\n    event: '*',\n    onInsert: handleRealtimeUpdate,\n    onUpdate: handleRealtimeUpdate,\n    onDelete: handleRealtimeUpdate,\n    invalidateQueries: queryKey,\n  });\n\n  // Update connection status\n  useEffect(() => {\n    setIsConnected(isSubscribed);\n  }, [isSubscribed]);\n\n  return {\n    entity,\n    isLoading,\n    error,\n    refetch,\n    isRefetching,\n    isConnected,\n    isSubscribed,\n    lastUpdate,\n  };\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app/task-beacon-app-cursor/task-beacon-app/src/hooks/useRealtimeSubscription.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":12,"column":70,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":12,"endColumn":73,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[539,542],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[539,542],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":13,"column":70,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":13,"endColumn":73,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[624,627],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[624,627],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":14,"column":70,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":14,"endColumn":73,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[709,712],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[709,712],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":63,"column":46,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":63,"endColumn":49,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2034,2037],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2034,2037],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useEffect, useRef, useState } from 'react';\nimport { RealtimeService } from '@/lib/api';\nimport { useQueryClient } from '@tanstack/react-query';\nimport { useAuth } from '@/contexts/AuthContext';\nimport type { RealtimeChannel, RealtimePostgresChangesPayload } from '@supabase/supabase-js';\nimport { realtimeLogger } from '@/lib/logger';\n\ninterface RealtimeSubscriptionOptions {\n  table: string;\n  schema?: string;\n  event?: 'INSERT' | 'UPDATE' | 'DELETE' | '*';\n  onInsert?: (payload: RealtimePostgresChangesPayload<Record<string, any>>) => void;\n  onUpdate?: (payload: RealtimePostgresChangesPayload<Record<string, any>>) => void;\n  onDelete?: (payload: RealtimePostgresChangesPayload<Record<string, any>>) => void;\n  invalidateQueries?: string[];\n}\n\n/**\n * Optimized hook for managing real-time subscriptions with proper cleanup\n * \n * This hook manages Supabase real-time subscriptions for database changes,\n * providing automatic cleanup and query invalidation.\n * \n * @param options - Configuration options for the real-time subscription\n * @returns Object containing subscription status and channel reference\n * \n * @example\n * ```typescript\n * const { isSubscribed } = useRealtimeSubscription({\n *   table: 'tasks',\n *   event: '*',\n *   onUpdate: (payload) => {\n *     realtimeLogger.info('Task updated:', payload.new);\n *   },\n *   invalidateQueries: ['tasks']\n * });\n * ```\n */\nexport function useRealtimeSubscription({\n  table,\n  schema = 'public',\n  event = '*',\n  onInsert,\n  onUpdate,\n  onDelete,\n  invalidateQueries = [],\n}: RealtimeSubscriptionOptions) {\n  const queryClient = useQueryClient();\n  const { user } = useAuth();\n  const channelRef = useRef<RealtimeChannel | null>(null);\n  const [isSubscribed, setIsSubscribed] = useState(false);\n\n  useEffect(() => {\n    // Only subscribe if user is authenticated\n    if (!user) {\n      setIsSubscribed(false);\n      return;\n    }\n\n    realtimeLogger.info(`Setting up real-time subscription for ${table}`);\n\n    try {\n      const handleRealtimeChange = (payload: any) => {\n        realtimeLogger.debug(`Real-time update received for ${table}`, {\n          eventType: payload.eventType,\n          table: payload.table,\n          hasNew: !!payload.new,\n          hasOld: !!payload.old\n        });\n        \n        // Handle different event types with proper typing\n        switch (payload.eventType) {\n          case 'INSERT':\n            onInsert?.(payload);\n            break;\n          case 'UPDATE':\n            onUpdate?.(payload);\n            break;\n          case 'DELETE':\n            onDelete?.(payload);\n            break;\n        }\n\n        // Invalidate specified queries to refresh data\n        if (invalidateQueries.length > 0) {\n          invalidateQueries.forEach(queryKey => {\n            queryClient.invalidateQueries({ queryKey: [queryKey] });\n          });\n        }\n      };\n\n      const channel = RealtimeService.subscribe(table, handleRealtimeChange, event);\n      channelRef.current = channel;\n      setIsSubscribed(true);\n      \n      realtimeLogger.info(`Successfully subscribed to ${table} changes`);\n    } catch (error) {\n      realtimeLogger.error(`Failed to set up real-time subscription for ${table}`, error as Error);\n      setIsSubscribed(false);\n    }\n\n    // Cleanup function\n    return () => {\n      realtimeLogger.debug(`Cleaning up real-time subscription for ${table}`);\n      \n      if (channelRef.current) {\n        RealtimeService.unsubscribe(channelRef.current)\n          .then(() => {\n            setIsSubscribed(false);\n            realtimeLogger.debug(`Successfully cleaned up subscription for ${table}`);\n          })\n          .catch((error) => {\n            realtimeLogger.error('Error cleaning up channel', error as Error, { table });\n          });\n      }\n    };\n  }, [user, table, schema, event, onInsert, onUpdate, onDelete, queryClient, invalidateQueries]);\n\n  return {\n    /** Whether the subscription is currently active */\n    isSubscribed,\n    /** Reference to the Supabase realtime channel */\n    channel: channelRef.current,\n  };\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app/task-beacon-app-cursor/task-beacon-app/src/hooks/useRealtimeSync.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":8,"column":28,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":8,"endColumn":31,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[376,379],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[376,379],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":8,"column":41,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":8,"endColumn":44,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[389,392],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[389,392],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":8,"column":49,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":8,"endColumn":52,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[397,400],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[397,400],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":9,"column":27,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":9,"endColumn":30,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[428,431],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[428,431],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":9,"column":40,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":9,"endColumn":43,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[441,444],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[441,444],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":9,"column":56,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":9,"endColumn":59,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[457,460],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[457,460],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":87,"column":50,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":87,"endColumn":53,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2861,2864],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2861,2864],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":260,"column":54,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":260,"endColumn":57,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8338,8341],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8338,8341],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":8,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useCallback, useRef, useState, useEffect } from 'react';\nimport { useQueryClient } from '@tanstack/react-query';\nimport { useRealtimeSubscription } from './useRealtimeSubscription';\nimport { realtimeLogger } from '@/lib/logger';\n\ninterface ConflictResolutionStrategy {\n  onConflict: 'client-wins' | 'server-wins' | 'merge' | 'prompt-user';\n  mergeStrategy?: (client: any, server: any) => any;\n  onUserPrompt?: (client: any, server: any) => Promise<any>;\n}\n\ninterface RealtimeSyncOptions<T> {\n  /** Database table to synchronize */\n  table: string;\n  /** Query key for cache management */\n  queryKey: string[];\n  /** Conflict resolution strategy */\n  conflictResolution?: ConflictResolutionStrategy;\n  /** Enable optimistic updates */\n  enableOptimistic?: boolean;\n  /** Debounce time for batch updates (ms) */\n  debounceMs?: number;\n  /** Custom entity transformer */\n  transformEntity?: (entity: T) => T;\n  /** Validation function before applying updates */\n  validateUpdate?: (entity: T) => boolean;\n}\n\ninterface SyncState {\n  isConnected: boolean;\n  conflictsCount: number;\n  lastSyncTime: Date | null;\n  pendingOperations: number;\n}\n\n/**\n * Enhanced real-time synchronization hook with conflict resolution\n * \n * Provides automatic bidirectional sync between local cache and server state\n * with configurable conflict resolution strategies and optimistic updates.\n * \n * @template T - Entity type being synchronized\n * @param options - Configuration options for sync behavior\n * @returns Sync state and control functions\n */\nexport function useRealtimeSync<T extends { id: string; updated_at?: string }>(\n  options: RealtimeSyncOptions<T>\n) {\n  const {\n    table,\n    queryKey,\n    conflictResolution = { onConflict: 'server-wins' },\n    enableOptimistic = true,\n    debounceMs = 500,\n    transformEntity,\n    validateUpdate,\n  } = options;\n\n  const queryClient = useQueryClient();\n  const [syncState, setSyncState] = useState<SyncState>({\n    isConnected: false,\n    conflictsCount: 0,\n    lastSyncTime: null,\n    pendingOperations: 0,\n  });\n\n  // Refs for managing debounced operations\n  const pendingUpdatesRef = useRef<Map<string, T>>(new Map());\n  const debounceTimerRef = useRef<NodeJS.Timeout | null>(null);\n  const optimisticUpdatesRef = useRef<Map<string, T>>(new Map());\n\n  /**\n   * Apply entity update to cache with optional optimistic handling\n   */\n  const applyEntityUpdate = useCallback((entity: T, isOptimistic = false) => {\n    if (validateUpdate && !validateUpdate(entity)) {\n      realtimeLogger.warn('Entity update failed validation', { entityId: entity.id, table });\n      return false;\n    }\n\n    const transformedEntity = transformEntity ? transformEntity(entity) : entity;\n\n    if (isOptimistic) {\n      optimisticUpdatesRef.current.set(entity.id, transformedEntity);\n    }\n\n    queryClient.setQueryData(queryKey, (oldData: any) => {\n      if (!oldData) return oldData;\n\n      // Handle different query data structures\n      if (Array.isArray(oldData)) {\n        return oldData.map(item => \n          item.id === entity.id ? transformedEntity : item\n        );\n      } else if (oldData.data && Array.isArray(oldData.data)) {\n        return {\n          ...oldData,\n          data: oldData.data.map(item => \n            item.id === entity.id ? transformedEntity : item\n          )\n        };\n      } else if (oldData.pages) {\n        // Handle infinite query structure\n        return {\n          ...oldData,\n          pages: oldData.pages.map(page => ({\n            ...page,\n            data: page.data.map(item => \n              item.id === entity.id ? transformedEntity : item\n            )\n          }))\n        };\n      }\n\n      return oldData;\n    });\n\n    return true;\n  }, [queryKey, queryClient, transformEntity, validateUpdate, table]);\n\n  /**\n   * Handle conflict resolution between client and server versions\n   */\n  const resolveConflict = useCallback(async (clientEntity: T, serverEntity: T) => {\n    setSyncState(prev => ({ ...prev, conflictsCount: prev.conflictsCount + 1 }));\n\n    switch (conflictResolution.onConflict) {\n      case 'client-wins':\n        realtimeLogger.debug('Conflict resolved: client wins', { entityId: clientEntity.id });\n        return clientEntity;\n      \n      case 'server-wins':\n        realtimeLogger.debug('Conflict resolved: server wins', { entityId: serverEntity.id });\n        return serverEntity;\n      \n      case 'merge':\n        if (conflictResolution.mergeStrategy) {\n          const merged = conflictResolution.mergeStrategy(clientEntity, serverEntity);\n          realtimeLogger.debug('Conflict resolved: merged', { entityId: merged.id });\n          return merged;\n        }\n        // Fallback to server wins if no merge strategy\n        return serverEntity;\n      \n      case 'prompt-user':\n        if (conflictResolution.onUserPrompt) {\n          const resolved = await conflictResolution.onUserPrompt(clientEntity, serverEntity);\n          realtimeLogger.debug('Conflict resolved: user choice', { entityId: resolved.id });\n          return resolved;\n        }\n        // Fallback to server wins if no prompt handler\n        return serverEntity;\n      \n      default:\n        return serverEntity;\n    }\n  }, [conflictResolution]);\n\n  /**\n   * Process incoming real-time update\n   */\n  const handleIncomingUpdate = useCallback(async (serverEntity: T) => {\n    const optimisticEntity = optimisticUpdatesRef.current.get(serverEntity.id);\n    \n    if (optimisticEntity) {\n      // Check for conflicts between optimistic update and server update\n      const hasConflict = optimisticEntity.updated_at !== serverEntity.updated_at;\n      \n      if (hasConflict) {\n        const resolvedEntity = await resolveConflict(optimisticEntity, serverEntity);\n        applyEntityUpdate(resolvedEntity, false);\n      } else {\n        // No conflict, server update matches optimistic update\n        applyEntityUpdate(serverEntity, false);\n      }\n      \n      // Clear optimistic update\n      optimisticUpdatesRef.current.delete(serverEntity.id);\n    } else {\n      // No local changes, apply server update directly\n      applyEntityUpdate(serverEntity, false);\n    }\n\n    setSyncState(prev => ({ ...prev, lastSyncTime: new Date() }));\n  }, [applyEntityUpdate, resolveConflict]);\n\n  /**\n   * Flush pending updates with debouncing\n   */\n  const flushPendingUpdates = useCallback(() => {\n    const updates = Array.from(pendingUpdatesRef.current.values());\n    pendingUpdatesRef.current.clear();\n\n    setSyncState(prev => ({ \n      ...prev, \n      pendingOperations: prev.pendingOperations - updates.length \n    }));\n\n    // Process each update\n    updates.forEach(entity => applyEntityUpdate(entity, false));\n  }, [applyEntityUpdate]);\n\n  /**\n   * Queue an update for processing\n   */\n  const queueUpdate = useCallback((entity: T) => {\n    pendingUpdatesRef.current.set(entity.id, entity);\n    \n    setSyncState(prev => ({ \n      ...prev, \n      pendingOperations: prev.pendingOperations + 1 \n    }));\n\n    // Debounce the flush operation\n    if (debounceTimerRef.current) {\n      clearTimeout(debounceTimerRef.current);\n    }\n\n    debounceTimerRef.current = setTimeout(flushPendingUpdates, debounceMs);\n  }, [flushPendingUpdates, debounceMs]);\n\n  /**\n   * Perform optimistic update\n   */\n  const optimisticUpdate = useCallback((entity: T) => {\n    if (!enableOptimistic) return false;\n    \n    return applyEntityUpdate(entity, true);\n  }, [applyEntityUpdate, enableOptimistic]);\n\n  /**\n   * Rollback optimistic update\n   */\n  const rollbackOptimistic = useCallback((entityId: string) => {\n    optimisticUpdatesRef.current.delete(entityId);\n    \n    // Trigger cache invalidation to get fresh data\n    queryClient.invalidateQueries({ queryKey });\n    \n    realtimeLogger.debug('Optimistic update rolled back', { entityId, table });\n  }, [queryClient, queryKey, table]);\n\n  // Set up real-time subscription\n  const { isSubscribed } = useRealtimeSubscription({\n    table,\n    event: '*',\n    onUpdate: (payload) => {\n      if (payload.new) {\n        handleIncomingUpdate(payload.new as T);\n      }\n    },\n    onInsert: (payload) => {\n      if (payload.new) {\n        queueUpdate(payload.new as T);\n      }\n    },\n    onDelete: (payload) => {\n      if (payload.old) {\n        // Handle deletions by removing from cache\n        queryClient.setQueryData(queryKey, (oldData: any) => {\n          if (!oldData) return oldData;\n          \n          const deletedId = (payload.old as T).id;\n          \n          if (Array.isArray(oldData)) {\n            return oldData.filter(item => item.id !== deletedId);\n          } else if (oldData.data && Array.isArray(oldData.data)) {\n            return {\n              ...oldData,\n              data: oldData.data.filter(item => item.id !== deletedId)\n            };\n          }\n          \n          return oldData;\n        });\n      }\n    },\n  });\n\n  // Update connection state\n  useEffect(() => {\n    setSyncState(prev => ({ ...prev, isConnected: isSubscribed }));\n  }, [isSubscribed]);\n\n  // Cleanup on unmount\n  useEffect(() => {\n    return () => {\n      if (debounceTimerRef.current) {\n        clearTimeout(debounceTimerRef.current);\n      }\n    };\n  }, []);\n\n  return {\n    syncState,\n    optimisticUpdate,\n    rollbackOptimistic,\n    queueUpdate,\n    flushPendingUpdates,\n  };\n} ","usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app/task-beacon-app-cursor/task-beacon-app/src/hooks/useTaskValidation.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app/task-beacon-app-cursor/task-beacon-app/src/hooks/useTaskValidation.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app/task-beacon-app-cursor/task-beacon-app/src/hooks/validationUtils.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app/task-beacon-app-cursor/task-beacon-app/src/integrations/supabase/client.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app/task-beacon-app-cursor/task-beacon-app/src/integrations/supabase/types.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app/task-beacon-app-cursor/task-beacon-app/src/integrations/supabase/types/api.types.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app/task-beacon-app-cursor/task-beacon-app/src/lib/__tests__/logger.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app/task-beacon-app-cursor/task-beacon-app/src/lib/api/auth.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app/task-beacon-app-cursor/task-beacon-app/src/lib/api/base.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":239,"column":84,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":239,"endColumn":87,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6187,6190],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6187,6190],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":312,"column":25,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":312,"endColumn":28,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7879,7882],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7879,7882],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":317,"column":33,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":317,"endColumn":36,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8054,8057],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8054,8057],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":330,"column":37,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":330,"endColumn":40,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8270,8273],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8270,8273],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":344,"column":29,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":344,"endColumn":32,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8554,8557],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8554,8557],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":347,"column":56,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":347,"endColumn":59,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8704,8707],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8704,8707],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":359,"column":12,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":359,"endColumn":15,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8913,8916],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8913,8916],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":362,"column":56,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":362,"endColumn":59,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[9064,9067],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[9064,9067],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":378,"column":30,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":378,"endColumn":33,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[9360,9363],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[9360,9363],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":381,"column":38,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":381,"endColumn":41,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[9492,9495],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[9492,9495],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":10,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Base API Configuration and Shared Utilities\n * \n * Core API configuration, client setup, and shared utility functions.\n * Uses consolidated types from the organized type system.\n */\n\nimport { createClient } from '@supabase/supabase-js';\nimport type { Database } from '@/integrations/supabase/types';\nimport { PostgrestError, User, AuthError } from '@supabase/supabase-js';\nimport { logger } from '@/lib/logger';\nimport { getApiConfig } from '@/lib/config/app';\n\n// Import consolidated types from organized type system\nimport type { \n  ApiResponse, \n  ApiError, \n  AuthResponse,\n  SignUpOptions \n} from '@/types/shared';\n\n// Supabase client configuration using centralized config\nconst apiConfig = getApiConfig();\n\nif (!apiConfig.supabaseUrl || !apiConfig.supabaseAnonKey) {\n  throw new Error('Missing Supabase environment variables');\n}\n\nconst supabaseClient = createClient<Database>(apiConfig.supabaseUrl, apiConfig.supabaseAnonKey, {\n  auth: {\n    autoRefreshToken: true,\n    persistSession: true,\n    detectSessionInUrl: true\n  }\n});\n\nexport { supabaseClient as supabase };\n\n/**\n * Base API Layer - Provides consistent abstraction over Supabase\n * \n * This module creates a clean separation between the application logic\n * and the database implementation, making it easier to:\n * - Switch databases in the future\n * - Implement consistent error handling\n * - Add caching, retries, and other cross-cutting concerns\n * - Mock API calls for testing\n */\n\n/**\n * Enhanced error formatting that handles various error types\n */\nexport const formatApiError = (error: unknown): ApiError => {\n  // Handle Supabase PostgrestError\n  if (error && typeof error === 'object' && 'code' in error && 'message' in error) {\n    const pgError = error as PostgrestError;\n    return {\n      name: 'PostgrestError',\n      message: pgError.message,\n      code: pgError.code,\n      details: pgError.details,\n      statusCode: pgError.code === 'PGRST116' ? 404 : 400,\n      originalError: error,\n    };\n  }\n\n  // Handle Supabase AuthError\n  if (error instanceof AuthError) {\n    return {\n      name: 'AuthError',\n      message: error.message,\n      code: error.status?.toString(),\n      statusCode: error.status || 400,\n      originalError: error,\n    };\n  }\n\n  // Handle JavaScript Error objects\n  if (error instanceof Error) {\n    return {\n      name: error.name,\n      message: error.message,\n      originalError: error,\n    };\n  }\n\n  // Handle string errors\n  if (typeof error === 'string') {\n    return {\n      name: 'StringError',\n      message: error,\n    };\n  }\n\n  // Handle unknown errors\n  return {\n    name: 'UnknownError',\n    message: 'An unexpected error occurred',\n    details: error,\n  };\n};\n\n/**\n * Centralized API request wrapper with consistent error handling and logging\n */\nexport const apiRequest = async <T>(\n  operation: string,\n  requestFn: () => Promise<T>\n): Promise<ApiResponse<T>> => {\n  const startTime = Date.now();\n  \n  try {\n    logger.debug(`API Request started: ${operation}`);\n    \n    const data = await requestFn();\n    const duration = Date.now() - startTime;\n    \n    logger.debug(`API Request completed: ${operation} (${duration}ms)`);\n    \n    return {\n      data,\n      error: null,\n      success: true,\n    };\n  } catch (error) {\n    const duration = Date.now() - startTime;\n    const apiError = formatApiError(error);\n    \n    logger.error(`API Request failed: ${operation} (${duration}ms)`, error as Error, {\n      operation,\n      duration,\n      errorCode: apiError.code,\n    });\n    \n    return {\n      data: null,\n      error: apiError,\n      success: false,\n    };\n  }\n};\n\n/**\n * Authentication utilities abstracted from Supabase\n */\nexport class AuthService {\n  /**\n   * Sign in with email and password\n   */\n  static async signIn(email: string, password: string): Promise<ApiResponse<AuthResponse>> {\n    return apiRequest('auth.signIn', async () => {\n      const { data, error } = await supabaseClient.auth.signInWithPassword({\n        email,\n        password,\n      });\n\n      if (error) throw error;\n      if (!data.user) throw new Error('Sign in failed - no user returned');\n\n      return {\n        user: data.user,\n        session: data.session,\n        emailConfirmed: !!data.user.email_confirmed_at,\n      };\n    });\n  }\n\n  /**\n   * Sign up with email and password\n   */\n  static async signUp(\n    email: string, \n    password: string, \n    options?: SignUpOptions\n  ): Promise<ApiResponse<AuthResponse>> {\n    return apiRequest('auth.signUp', async () => {\n      const { data, error } = await supabaseClient.auth.signUp({\n        email,\n        password,\n        options,\n      });\n\n      if (error) throw error;\n      if (!data.user) throw new Error('Sign up failed - no user returned');\n\n      return {\n        user: data.user,\n        session: data.session,\n        emailConfirmed: !!data.user.email_confirmed_at,\n      };\n    });\n  }\n\n  /**\n   * Get current authenticated user\n   */\n  static async getCurrentUser(): Promise<ApiResponse<User>> {\n    return apiRequest('auth.getCurrentUser', async () => {\n      const { data: { user }, error } = await supabaseClient.auth.getUser();\n      if (error) throw error;\n      if (!user) throw new Error('No authenticated user');\n      return user;\n    });\n  }\n\n  /**\n   * Get current user ID\n   */\n  static async getCurrentUserId(): Promise<ApiResponse<string>> {\n    return apiRequest('auth.getCurrentUserId', async () => {\n      const { data: { user }, error } = await supabaseClient.auth.getUser();\n      if (error) throw error;\n      if (!user) throw new Error('No authenticated user');\n      return user.id;\n    });\n  }\n\n  /**\n   * Check if user is authenticated\n   */\n  static async isAuthenticated(): Promise<boolean> {\n    const { data: { user } } = await supabaseClient.auth.getUser();\n    return !!user;\n  }\n\n  /**\n   * Sign out current user\n   */\n  static async signOut(): Promise<ApiResponse<void>> {\n    return apiRequest('auth.signOut', async () => {\n      const { error } = await supabaseClient.auth.signOut();\n      if (error) throw error;\n    });\n  }\n\n  /**\n   * Refresh the current session\n   */\n  static async refreshSession(): Promise<ApiResponse<{ user: User | null; session: any }>> {\n    return apiRequest('auth.refreshSession', async () => {\n      const { data, error } = await supabaseClient.auth.refreshSession();\n      if (error) throw error;\n      return { user: data.user, session: data.session };\n    });\n  }\n}\n\n/**\n * Storage utilities abstracted from Supabase\n */\nexport class StorageService {\n  /**\n   * Upload a file to storage\n   */\n  static async uploadFile(\n    bucket: string,\n    path: string,\n    file: File\n  ): Promise<ApiResponse<string>> {\n    return apiRequest(`storage.upload.${bucket}`, async () => {\n      const { data, error } = await supabaseClient.storage\n        .from(bucket)\n        .upload(path, file, {\n          upsert: true,\n        });\n\n      if (error) throw error;\n      if (!data?.path) throw new Error('Upload failed - no path returned');\n\n      // Return the full URL\n      return StorageService.getPublicUrl(bucket, data.path);\n    });\n  }\n\n  /**\n   * Delete a file from storage\n   */\n  static async deleteFile(\n    bucket: string,\n    path: string\n  ): Promise<ApiResponse<void>> {\n    return apiRequest(`storage.delete.${bucket}`, async () => {\n      const { error } = await supabaseClient.storage\n        .from(bucket)\n        .remove([path]);\n\n      if (error) throw error;\n    });\n  }\n\n  /**\n   * Get public URL for a file\n   */\n  static getPublicUrl(bucket: string, path: string): string {\n    const { data } = supabaseClient.storage\n      .from(bucket)\n      .getPublicUrl(path);\n    \n    return data.publicUrl;\n  }\n}\n\n/**\n * Real-time utilities abstracted from Supabase\n */\nexport class RealtimeService {\n  /**\n   * Subscribe to real-time updates\n   */\n  static subscribe(\n    table: string,\n    callback: (payload: any) => void,\n    event: 'INSERT' | 'UPDATE' | 'DELETE' | '*' = '*'\n  ) {\n    const channel = supabaseClient\n      .channel(`public:${table}`)\n      .on('postgres_changes' as any, {\n        event,\n        schema: 'public',\n        table,\n      }, callback)\n      .subscribe();\n\n    return channel;\n  }\n\n  /**\n   * Unsubscribe from real-time updates\n   */\n  static async unsubscribe(channel: any) {\n    return supabaseClient.removeChannel(channel);\n  }\n}\n\n/**\n * Database utilities for common operations\n */\nexport class DatabaseService {\n  /**\n   * Execute a stored procedure/function\n   */\n  static async executeRpc<T>(\n    functionName: string,\n    params?: Record<string, any>\n  ): Promise<ApiResponse<T>> {\n    return apiRequest(`rpc.${functionName}`, async () => {\n      const { data, error } = await (supabaseClient as any).rpc(functionName, params);\n      if (error) throw error;\n      return data;\n    });\n  }\n\n  /**\n   * Check if a record exists\n   */\n  static async exists(\n    table: string,\n    column: string,\n    value: any\n  ): Promise<ApiResponse<boolean>> {\n    return apiRequest(`exists.${table}`, async () => {\n      const { data, error } = await (supabaseClient as any)\n        .from(table)\n        .select('id')\n        .eq(column, value)\n        .single();\n\n      if (error && error.code !== 'PGRST116') throw error;\n      return !!data;\n    });\n  }\n\n  /**\n   * Get count of records\n   */\n  static async count(\n    table: string,\n    filters?: Record<string, any>\n  ): Promise<ApiResponse<number>> {\n    return apiRequest(`count.${table}`, async () => {\n      let query = (supabaseClient as any).from(table).select('*', { count: 'exact', head: true });\n      \n      if (filters) {\n        Object.entries(filters).forEach(([key, value]) => {\n          query = query.eq(key, value);\n        });\n      }\n\n      const { count, error } = await query;\n      if (error) throw error;\n      return count || 0;\n    });\n  }\n} ","usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app/task-beacon-app-cursor/task-beacon-app/src/lib/api/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app/task-beacon-app-cursor/task-beacon-app/src/lib/api/tasks.service.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app/task-beacon-app-cursor/task-beacon-app/src/lib/api/users.service.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":122,"column":40,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":122,"endColumn":43,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3386,3389],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3386,3389],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Users Service - Provides clean abstraction for user operations\n * \n * This service layer abstracts all user-related database operations,\n * providing a consistent API that can be easily tested and modified.\n */\n\nimport { apiRequest, AuthService } from './base';\nimport { supabase } from '@/integrations/supabase/client';\nimport type { Database } from '@/integrations/supabase/types';\n\n// Clean imports from organized type system\nimport type { User, UserRole, ApiResponse } from '@/types';\n\nexport interface UserSearchOptions {\n  query?: string;\n  role?: UserRole;\n  limit?: number;\n  excludeCurrentUser?: boolean;\n}\n\nexport interface UserUpdateData {\n  name?: string;\n  email?: string;\n  avatarUrl?: string;\n  role?: UserRole;\n}\n\n/**\n * User Service provides all user-related operations with clean abstraction\n */\nexport class UserService {\n  /**\n   * Get a single user by ID\n   */\n  static async getById(userId: string): Promise<ApiResponse<User>> {\n    return apiRequest('users.getById', async () => {\n      const { data, error } = await supabase\n        .from('profiles')\n        .select('*')\n        .eq('id', userId)\n        .single();\n\n      if (error) throw error;\n      if (!data) throw new Error('User not found');\n\n      return data as User;\n    });\n  }\n\n  /**\n   * Get all users with optional filtering\n   */\n  static async getAll(options: UserSearchOptions = {}): Promise<ApiResponse<User[]>> {\n    return apiRequest('users.getAll', async () => {\n      const { query, role, limit = 50, excludeCurrentUser = false } = options;\n\n      let queryBuilder = supabase\n        .from('profiles')\n        .select('*')\n        .limit(limit);\n\n      // Apply filters\n      if (role) {\n        queryBuilder = queryBuilder.eq('role', role);\n      }\n\n      if (query) {\n        queryBuilder = queryBuilder.or(`name.ilike.%${query}%, email.ilike.%${query}%`);\n      }\n\n      if (excludeCurrentUser) {\n        const userResponse = await AuthService.getCurrentUserId();\n        if (userResponse.success && userResponse.data) {\n          queryBuilder = queryBuilder.neq('id', userResponse.data);\n        }\n      }\n\n      // Order by name\n      queryBuilder = queryBuilder.order('name', { ascending: true });\n\n      const { data, error } = await queryBuilder;\n\n      if (error) throw error;\n      return (data as User[]) || [];\n    });\n  }\n\n  /**\n   * Search users by name or email\n   */\n  static async search(searchQuery: string, options: Omit<UserSearchOptions, 'query'> = {}): Promise<ApiResponse<User[]>> {\n    return this.getAll({ ...options, query: searchQuery });\n  }\n\n  /**\n   * Get the current authenticated user\n   */\n  static async getCurrentUser(): Promise<ApiResponse<User>> {\n    return apiRequest('users.getCurrentUser', async () => {\n      const authResponse = await AuthService.getCurrentUser();\n      if (!authResponse.success || !authResponse.data) {\n        throw new Error('No authenticated user');\n      }\n\n      const { data, error } = await supabase\n        .from('profiles')\n        .select('*')\n        .eq('id', authResponse.data.id)\n        .single();\n\n      if (error) throw error;\n      return data as User;\n    });\n  }\n\n  /**\n   * Update user profile\n   */\n  static async updateProfile(userId: string, userData: UserUpdateData): Promise<ApiResponse<User>> {\n    return apiRequest('users.updateProfile', async () => {\n      const updateData: Record<string, any> = {};\n\n      if (userData.name !== undefined) updateData.name = userData.name;\n      if (userData.email !== undefined) updateData.email = userData.email;\n      if (userData.avatarUrl !== undefined) updateData.avatar_url = userData.avatarUrl;\n      if (userData.role !== undefined) updateData.role = userData.role;\n\n      const { data, error } = await supabase\n        .from('profiles')\n        .update(updateData)\n        .eq('id', userId)\n        .select()\n        .single();\n\n      if (error) throw error;\n      return data as User;\n    });\n  }\n\n  /**\n   * Update current user's profile\n   */\n  static async updateCurrentUserProfile(userData: UserUpdateData): Promise<ApiResponse<User>> {\n    const userResponse = await AuthService.getCurrentUserId();\n    if (!userResponse.success || !userResponse.data) {\n      return {\n        data: null,\n        error: { \n          name: 'AuthenticationError',\n          message: 'User not authenticated' \n        },\n        success: false,\n      };\n    }\n\n    return this.updateProfile(userResponse.data, userData);\n  }\n\n  /**\n   * Check if user exists by email\n   */\n  static async existsByEmail(email: string): Promise<ApiResponse<boolean>> {\n    return apiRequest('users.existsByEmail', async () => {\n      const { data, error } = await supabase\n        .from('profiles')\n        .select('id')\n        .eq('email', email)\n        .limit(1);\n\n      if (error) throw error;\n      return (data && data.length > 0) ?? false;\n    });\n  }\n\n  /**\n   * Get users by role\n   */\n  static async getByRole(role: UserRole): Promise<ApiResponse<User[]>> {\n    return this.getAll({ role });\n  }\n\n  /**\n   * Get user statistics\n   */\n  static async getStats(): Promise<ApiResponse<{\n    total: number;\n    admins: number;\n    managers: number;\n    users: number;\n  }>> {\n    return apiRequest('users.getStats', async () => {\n      const [totalResult, adminResult, managerResult, userResult] = await Promise.all([\n        supabase.from('profiles').select('*', { count: 'exact', head: true }),\n        supabase.from('profiles').select('*', { count: 'exact', head: true }).eq('role', 'admin'),\n        supabase.from('profiles').select('*', { count: 'exact', head: true }).eq('role', 'manager'),\n        supabase.from('profiles').select('*', { count: 'exact', head: true }).eq('role', 'user'),\n      ]);\n\n      return {\n        total: totalResult.count || 0,\n        admins: adminResult.count || 0,\n        managers: managerResult.count || 0,\n        users: userResult.count || 0,\n      };\n    });\n  }\n\n  /**\n   * Delete a user (admin only)\n   */\n  static async delete(userId: string): Promise<ApiResponse<void>> {\n    return apiRequest('users.delete', async () => {\n      // Note: This only deletes the profile, not the auth user\n      // Full user deletion requires admin API or manual cleanup\n      const { error } = await supabase\n        .from('profiles')\n        .delete()\n        .eq('id', userId);\n\n      if (error) throw error;\n    });\n  }\n\n  /**\n   * Create a new user profile (typically called after auth signup)\n   */\n  static async createProfile(userData: {\n    id: string;\n    email: string;\n    name?: string;\n    role?: UserRole;\n  }): Promise<ApiResponse<User>> {\n    return apiRequest('users.createProfile', async () => {\n      const { data, error } = await supabase\n        .from('profiles')\n        .insert({\n          id: userData.id,\n          email: userData.email,\n          name: userData.name || null,\n          role: userData.role || ('user' as const),\n        })\n        .select()\n        .single();\n\n      if (error) throw error;\n      return data as User;\n    });\n  }\n} ","usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app/task-beacon-app-cursor/task-beacon-app/src/lib/badge-variants.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app/task-beacon-app-cursor/task-beacon-app/src/lib/button-variants.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app/task-beacon-app-cursor/task-beacon-app/src/lib/config/app.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app/task-beacon-app-cursor/task-beacon-app/src/lib/dataUtils.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app/task-beacon-app-cursor/task-beacon-app/src/lib/dateUtils.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app/task-beacon-app-cursor/task-beacon-app/src/lib/formatUtils.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app/task-beacon-app-cursor/task-beacon-app/src/lib/logger.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app/task-beacon-app-cursor/task-beacon-app/src/lib/performance.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app/task-beacon-app-cursor/task-beacon-app/src/lib/style-optimization.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app/task-beacon-app-cursor/task-beacon-app/src/lib/testing/__tests__/context-helpers.test.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app/task-beacon-app-cursor/task-beacon-app/src/lib/testing/context-helpers.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":153,"column":31,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":153,"endColumn":34,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3754,3757],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3754,3757],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { ReactElement, ReactNode } from 'react';\nimport { render, RenderOptions } from '@testing-library/react';\nimport { QueryClient, QueryClientProvider } from '@tanstack/react-query';\nimport { BrowserRouter } from 'react-router-dom';\nimport { ThemeProvider } from '@/contexts/ThemeContext';\nimport { AuthProvider } from '@/contexts/AuthContext';\nimport { TaskProviders } from '@/features/tasks/providers/TaskProviders';\nimport { vi } from 'vitest';\n\n// Create test query client with disabled retries and caching\nconst createTestQueryClient = () => new QueryClient({\n  defaultOptions: {\n    queries: {\n      retry: false,\n      gcTime: 0,\n      staleTime: 0,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n\n/**\n * Provider wrapper options for test rendering\n */\ninterface TestProviderOptions {\n  includeAuth?: boolean;\n  includeTheme?: boolean;\n  includeRouter?: boolean;\n  includeTaskProviders?: boolean;\n  queryClient?: QueryClient;\n}\n\n/**\n * Creates a wrapper with essential providers for testing\n */\nfunction createTestWrapper(options: TestProviderOptions = {}) {\n  const {\n    includeAuth = false,\n    includeTheme = false,\n    includeRouter = false,\n    includeTaskProviders = false,\n    queryClient = createTestQueryClient(),\n  } = options;\n\n  return function TestWrapper({ children }: { children: ReactNode }) {\n    let content = (\n      <QueryClientProvider client={queryClient}>\n        {children}\n      </QueryClientProvider>\n    );\n\n    if (includeAuth) {\n      content = <AuthProvider>{content}</AuthProvider>;\n    }\n\n    if (includeTheme) {\n      content = <ThemeProvider>{content}</ThemeProvider>;\n    }\n\n    if (includeTaskProviders) {\n      content = (\n        <TaskProviders>\n          {content}\n        </TaskProviders>\n      );\n    }\n\n    if (includeRouter) {\n      content = <BrowserRouter>{content}</BrowserRouter>;\n    }\n\n    return content;\n  };\n}\n\n/**\n * Custom render function with common providers\n */\nexport function renderWithProviders(\n  ui: ReactElement,\n  options: TestProviderOptions & { renderOptions?: Omit<RenderOptions, 'wrapper'> } = {}\n) {\n  const { renderOptions, ...providerOptions } = options;\n  \n  return render(ui, {\n    wrapper: createTestWrapper(providerOptions),\n    ...renderOptions,\n  });\n}\n\n/**\n * Render with all providers (full app context)\n */\nexport function renderWithAllProviders(\n  ui: ReactElement,\n  options: { renderOptions?: Omit<RenderOptions, 'wrapper'> } = {}\n) {\n  return renderWithProviders(ui, {\n    includeAuth: true,\n    includeTheme: true,\n    includeRouter: true,\n    includeTaskProviders: true,\n    ...options,\n  });\n}\n\n/**\n * Render with just essential providers (minimal setup)\n */\nexport function renderWithEssentials(\n  ui: ReactElement,\n  options: { renderOptions?: Omit<RenderOptions, 'wrapper'> } = {}\n) {\n  return renderWithProviders(ui, {\n    includeTheme: true,\n    includeRouter: true,\n    ...options,\n  });\n}\n\n/**\n * Render with task-specific providers\n */\nexport function renderWithTaskProviders(\n  ui: ReactElement,\n  options: { renderOptions?: Omit<RenderOptions, 'wrapper'> } = {}\n) {\n  return renderWithProviders(ui, {\n    includeTaskProviders: true,\n    includeTheme: true,\n    ...options,\n  });\n}\n\n/**\n * Mock context value creator for testing specific context states\n */\nexport function createMockContextValue<T>(\n  defaultValue: T,\n  overrides: Partial<T> = {}\n): T {\n  return { ...defaultValue, ...overrides };\n}\n\n/**\n * Test helper for checking context provider requirements\n * Note: expect function should be available in test environment\n */\nexport function expectContextError(hookFunction: () => void, contextName: string) {\n  // This function is meant to be used in test files where expect is available\n  const expectFn = (global as any).expect;\n  if (expectFn) {\n    expectFn(hookFunction).toThrow(\n      `use${contextName} must be used within a ${contextName}Provider`\n    );\n  } else {\n    throw new Error('expectContextError can only be used in test environment');\n  }\n}\n\n/**\n * Wait for async context updates in tests\n */\nexport async function waitForContextUpdate() {\n  // Small delay to allow context updates to propagate\n  await new Promise(resolve => setTimeout(resolve, 0));\n}\n\n/**\n * Test wrapper that provides mock implementations for external dependencies\n */\nexport function createMockProviderWrapper<T>(\n  Context: React.Context<T>,\n  mockValue: T\n) {\n  return function MockWrapper({ children }: { children: ReactNode }) {\n    return (\n      <Context.Provider value={mockValue}>\n        {children}\n      </Context.Provider>\n    );\n  };\n}\n\n/**\n * Helper to test context value changes over time\n */\nexport function createContextValueTracker<T>() {\n  const values: T[] = [];\n  \n  return {\n    track: (value: T) => values.push(value),\n    getValues: () => [...values],\n    getLastValue: () => values[values.length - 1],\n    clear: () => values.length = 0,\n    count: () => values.length,\n  };\n}\n\n/**\n * Debug helper to log context value changes\n */\nexport function debugContextValue<T>(\n  contextValue: T,\n  contextName: string = 'Context'\n) {\n  if (process.env.NODE_ENV === 'test') {\n    console.log(`${contextName} Value:`, JSON.stringify(contextValue, null, 2));\n  }\n}\n\n/**\n * Test helper for the new convenience hooks\n * Provides mock implementations for TaskProviders convenience hooks\n */\nexport function createMockTaskContexts() {\n  return {\n    data: {\n      tasks: [],\n      isLoading: false,\n      isFetching: false,\n      error: null,\n      totalCount: 0,\n      currentPage: 1,\n      pageSize: 10,\n      hasNextPage: false,\n      hasPreviousPage: false,\n      goToNextPage: vi.fn(),\n      goToPreviousPage: vi.fn(),\n    },\n    ui: {\n      filter: 'all' as const,\n      setFilter: vi.fn(),\n      expandedTaskId: null,\n      setExpandedTaskId: vi.fn(),\n      isMobile: false,\n    },\n  };\n}\n\n/**\n * Test helper for useTaskFiltering hook\n */\nexport function createMockTaskFiltering() {\n  return {\n    tasks: [],\n    filter: 'all' as const,\n    setFilter: vi.fn(),\n    totalCount: 0,\n    filteredCount: 0,\n  };\n}\n\n/**\n * Test helper for useTaskProviderStatus hook\n */\nexport function createMockTaskProviderStatus() {\n  return {\n    hasDataContext: true,\n    hasUIContext: true,\n    isReady: true,\n    isLoading: false,\n  };\n} ","usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app/task-beacon-app-cursor/task-beacon-app/src/lib/toast.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app/task-beacon-app-cursor/task-beacon-app/src/lib/toggle-variants.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app/task-beacon-app-cursor/task-beacon-app/src/lib/uiUtils.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app/task-beacon-app-cursor/task-beacon-app/src/lib/utils/animation.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app/task-beacon-app-cursor/task-beacon-app/src/lib/utils/componentOptimization.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":57,"column":52,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":57,"endColumn":55,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1741,1744],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1741,1744],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":58,"column":30,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":58,"endColumn":33,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1783,1786],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1783,1786],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":58,"column":58,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":58,"endColumn":61,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1811,1814],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1811,1814],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":64,"column":48,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":64,"endColumn":51,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2022,2025],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2022,2025],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":65,"column":68,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":65,"endColumn":71,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2102,2105],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2102,2105],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":80,"column":34,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":80,"endColumn":37,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2355,2358],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2355,2358],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":80,"column":50,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":80,"endColumn":53,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2371,2374],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2371,2374],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":92,"column":35,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":92,"endColumn":38,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2679,2682],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2679,2682],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":92,"column":51,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":92,"endColumn":54,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2695,2698],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2695,2698],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":125,"column":23,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":125,"endColumn":26,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3600,3603],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3600,3603],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":125,"column":31,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":125,"endColumn":34,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3608,3611],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3608,3611],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":149,"column":63,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":149,"endColumn":66,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4212,4215],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4212,4215],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":165,"column":27,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":165,"endColumn":30,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4586,4589],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4586,4589],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":186,"column":58,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":186,"endColumn":61,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5064,5067],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5064,5067],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"The ref value 'renderCountRef.current' will likely have changed by the time this effect cleanup function runs. If this ref points to a node rendered by React, copy 'renderCountRef.current' to a variable inside the effect, and use that variable in the cleanup function.","line":201,"column":78,"nodeType":"Identifier","endLine":201,"endColumn":85},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useMemo was passed a dependency list that is not an array literal. This means we can't statically verify whether you've passed the correct dependencies.","line":408,"column":6,"nodeType":"Identifier","endLine":408,"endColumn":10},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useMemo has missing dependencies: 'deps', 'factory', 'maxCacheSize', 'name', and 'ttl'. Either include them or remove the dependency array. If 'factory' changes too often, find the parent component that defines it and wrap that definition in useCallback.","line":408,"column":6,"nodeType":"Identifier","endLine":408,"endColumn":10,"suggestions":[{"desc":"Update the dependencies array to be: [deps, factory, maxCacheSize, name, ttl]","fix":{"range":[11906,11910],"text":"[deps, factory, maxCacheSize, name, ttl]"}}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":421,"column":68,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":421,"endColumn":71,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[12153,12156],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[12153,12156],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":15,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Component Optimization Utilities\n * \n * Advanced performance optimization patterns and utilities for React components.\n * Provides sophisticated memoization, optimization analysis, and performance patterns.\n */\n\nimport React, { memo, ComponentType, useMemo, useRef, useEffect } from 'react';\nimport { performanceMonitor } from './performance';\n\n// === ADVANCED MEMOIZATION PATTERNS ===\n\n/**\n * Enhanced memo with performance tracking and optimization insights\n */\nexport function optimizedMemo<P>(\n  Component: ComponentType<P>,\n  options?: {\n    name?: string;\n    compareFunction?: (prevProps: P, nextProps: P) => boolean;\n    trackPerformance?: boolean;\n    optimizationLevel?: 'basic' | 'advanced' | 'aggressive';\n  }\n): React.MemoExoticComponent<ComponentType<P>> {\n  const {\n    name = Component.displayName || Component.name || 'Unknown',\n    compareFunction,\n    trackPerformance = true,\n    optimizationLevel = 'basic'\n  } = options || {};\n\n  // Enhanced comparison function based on optimization level\n  const enhancedCompare = (prevProps: P, nextProps: P): boolean => {\n    if (compareFunction) {\n      return compareFunction(prevProps, nextProps);\n    }\n\n    switch (optimizationLevel) {\n      case 'basic':\n        return shallowEqual(prevProps, nextProps);\n      \n      case 'advanced':\n        return advancedEqual(prevProps, nextProps);\n      \n      case 'aggressive':\n        return deepEqual(prevProps, nextProps);\n      \n      default:\n        return shallowEqual(prevProps, nextProps);\n    }\n  };\n\n  const OptimizedComponent = memo(Component, (prevProps, nextProps) => {\n    const isEqual = enhancedCompare(prevProps, nextProps);\n    \n    if (trackPerformance) {\n      const changeCount = Object.keys(nextProps as any).filter(\n        key => (prevProps as any)[key] !== (nextProps as any)[key]\n      ).length;\n      \n      if (!isEqual && changeCount > 0) {\n        console.debug(`🔄 ${name} props changed:`, {\n          changedProps: changeCount,\n          totalProps: Object.keys(nextProps as any).length,\n          changeRatio: `${((changeCount / Object.keys(nextProps as any).length) * 100).toFixed(1)}%`\n        });\n      }\n    }\n    \n    return isEqual;\n  });\n\n  OptimizedComponent.displayName = `Optimized(${name})`;\n  return OptimizedComponent;\n}\n\n/**\n * Shallow equality comparison\n */\nfunction shallowEqual(prevProps: any, nextProps: any): boolean {\n  const keys1 = Object.keys(prevProps);\n  const keys2 = Object.keys(nextProps);\n  \n  if (keys1.length !== keys2.length) return false;\n  \n  return keys1.every(key => prevProps[key] === nextProps[key]);\n}\n\n/**\n * Advanced equality with smart type checking\n */\nfunction advancedEqual(prevProps: any, nextProps: any): boolean {\n  const keys1 = Object.keys(prevProps);\n  const keys2 = Object.keys(nextProps);\n  \n  if (keys1.length !== keys2.length) return false;\n  \n  return keys1.every(key => {\n    const prev = prevProps[key];\n    const next = nextProps[key];\n    \n    // Handle functions\n    if (typeof prev === 'function' && typeof next === 'function') {\n      return prev.toString() === next.toString();\n    }\n    \n    // Handle arrays (shallow comparison)\n    if (Array.isArray(prev) && Array.isArray(next)) {\n      return prev.length === next.length && \n             prev.every((item, index) => item === next[index]);\n    }\n    \n    // Handle objects (shallow comparison)\n    if (prev && next && typeof prev === 'object' && typeof next === 'object') {\n      return shallowEqual(prev, next);\n    }\n    \n    return prev === next;\n  });\n}\n\n/**\n * Deep equality comparison (use sparingly)\n */\nfunction deepEqual(a: any, b: any): boolean {\n  if (a === b) return true;\n  if (a == null || b == null) return false;\n  if (typeof a !== typeof b) return false;\n  \n  if (typeof a === 'object') {\n    if (Array.isArray(a) !== Array.isArray(b)) return false;\n    \n    const keysA = Object.keys(a);\n    const keysB = Object.keys(b);\n    \n    if (keysA.length !== keysB.length) return false;\n    \n    return keysA.every(key => deepEqual(a[key], b[key]));\n  }\n  \n  return false;\n}\n\n// === PERFORMANCE OPTIMIZATION HOCs ===\n\n/**\n * HOC for automatic performance optimization\n */\nexport function withAutoOptimization<P extends Record<string, any>>(\n  Component: ComponentType<P>,\n  options?: {\n    memoization?: boolean;\n    performanceTracking?: boolean;\n    renderOptimization?: boolean;\n    errorBoundary?: boolean;\n  }\n): ComponentType<P> {\n  const {\n    memoization = true,\n    performanceTracking = true,\n    renderOptimization = true,\n    errorBoundary = false\n  } = options || {};\n\n  let OptimizedComponent: any = Component;\n\n  // Apply memoization\n  if (memoization) {\n    OptimizedComponent = optimizedMemo(OptimizedComponent, {\n      optimizationLevel: 'advanced',\n      trackPerformance: performanceTracking\n    });\n  }\n\n  // Apply render optimization\n  if (renderOptimization) {\n    OptimizedComponent = withRenderOptimization(OptimizedComponent);\n  }\n\n  return OptimizedComponent;\n}\n\n/**\n * HOC for render optimization\n */\nfunction withRenderOptimization<P extends Record<string, any>>(\n  Component: ComponentType<P>\n): ComponentType<P> {\n  const RenderOptimizedComponent = (props: P) => {\n    const renderStartRef = useRef<number>(0);\n    const renderCountRef = useRef<number>(0);\n\n    // Track render start\n    renderStartRef.current = performance.now();\n    renderCountRef.current++;\n\n    // Cleanup on unmount\n    useEffect(() => {\n      return () => {\n        const componentName = Component.displayName || Component.name || 'Unknown';\n        console.debug(`🧹 Unmounting ${componentName} after ${renderCountRef.current} renders`);\n      };\n    }, []);\n\n    // Track render completion\n    useEffect(() => {\n      const renderDuration = performance.now() - renderStartRef.current;\n      const componentName = Component.displayName || Component.name || 'Unknown';\n      \n      if (renderDuration > 16) {\n        console.warn(`🐌 Slow render in ${componentName}: ${renderDuration.toFixed(2)}ms`);\n      }\n      \n      performanceMonitor.trackComponentRender(componentName, renderDuration);\n    });\n\n    return React.createElement(Component, props);\n  };\n\n  RenderOptimizedComponent.displayName = `RenderOptimized(${Component.displayName || Component.name})`;\n  return RenderOptimizedComponent;\n}\n\n// === COMPONENT ANALYSIS UTILITIES ===\n\n/**\n * Analyze component performance and provide optimization suggestions\n */\nexport class ComponentAnalyzer {\n  private static instance: ComponentAnalyzer;\n  private componentMetrics = new Map<string, ComponentMetrics>();\n\n  static getInstance(): ComponentAnalyzer {\n    if (!ComponentAnalyzer.instance) {\n      ComponentAnalyzer.instance = new ComponentAnalyzer();\n    }\n    return ComponentAnalyzer.instance;\n  }\n\n  trackComponent(name: string, renderTime: number, propsChanged: boolean): void {\n    const existing = this.componentMetrics.get(name) || {\n      name,\n      totalRenders: 0,\n      totalRenderTime: 0,\n      averageRenderTime: 0,\n      propsChangeCount: 0,\n      slowRenders: 0,\n      lastOptimizationSuggestion: 0\n    };\n\n    existing.totalRenders++;\n    existing.totalRenderTime += renderTime;\n    existing.averageRenderTime = existing.totalRenderTime / existing.totalRenders;\n    \n    if (propsChanged) {\n      existing.propsChangeCount++;\n    }\n    \n    if (renderTime > 16) {\n      existing.slowRenders++;\n    }\n\n    this.componentMetrics.set(name, existing);\n\n    // Provide optimization suggestions (throttled)\n    const now = Date.now();\n    if (now - existing.lastOptimizationSuggestion > 30000) { // 30 seconds\n      this.suggestOptimizations(name, existing);\n      existing.lastOptimizationSuggestion = now;\n    }\n  }\n\n  private suggestOptimizations(name: string, metrics: ComponentMetrics): void {\n    const suggestions: string[] = [];\n\n    // High average render time\n    if (metrics.averageRenderTime > 10) {\n      suggestions.push('Consider using React.memo() or optimizing render logic');\n    }\n\n    // Frequent re-renders with few prop changes\n    const propsChangeRatio = metrics.propsChangeCount / metrics.totalRenders;\n    if (metrics.totalRenders > 10 && propsChangeRatio < 0.3) {\n      suggestions.push('Many re-renders without prop changes - check parent component optimization');\n    }\n\n    // Many slow renders\n    const slowRenderRatio = metrics.slowRenders / metrics.totalRenders;\n    if (slowRenderRatio > 0.2) {\n      suggestions.push('Frequent slow renders detected - consider code splitting or virtualization');\n    }\n\n    if (suggestions.length > 0) {\n      console.group(`💡 Optimization suggestions for ${name}`);\n      console.log('Performance metrics:', {\n        totalRenders: metrics.totalRenders,\n        averageRenderTime: `${metrics.averageRenderTime.toFixed(2)}ms`,\n        propsChangeRatio: `${(propsChangeRatio * 100).toFixed(1)}%`,\n        slowRenderRatio: `${(slowRenderRatio * 100).toFixed(1)}%`\n      });\n      suggestions.forEach(suggestion => console.log(`• ${suggestion}`));\n      console.groupEnd();\n    }\n  }\n\n  getReport(): ComponentOptimizationReport {\n    const components = Array.from(this.componentMetrics.values())\n      .sort((a, b) => b.averageRenderTime - a.averageRenderTime);\n\n    return {\n      totalComponents: components.length,\n      slowestComponents: components.slice(0, 5),\n      mostActiveComponents: components\n        .sort((a, b) => b.totalRenders - a.totalRenders)\n        .slice(0, 5),\n      optimizationCandidates: components.filter(c => \n        c.averageRenderTime > 10 || c.slowRenders / c.totalRenders > 0.2\n      )\n    };\n  }\n\n  clear(): void {\n    this.componentMetrics.clear();\n  }\n}\n\n// === INTERFACES ===\n\ninterface ComponentMetrics {\n  name: string;\n  totalRenders: number;\n  totalRenderTime: number;\n  averageRenderTime: number;\n  propsChangeCount: number;\n  slowRenders: number;\n  lastOptimizationSuggestion: number;\n}\n\ninterface ComponentOptimizationReport {\n  totalComponents: number;\n  slowestComponents: ComponentMetrics[];\n  mostActiveComponents: ComponentMetrics[];\n  optimizationCandidates: ComponentMetrics[];\n}\n\n// === ADVANCED HOOKS ===\n\n/**\n * Enhanced useMemo with automatic optimization detection\n */\nexport function useSmartMemo<T>(\n  factory: () => T,\n  deps: React.DependencyList,\n  options?: {\n    name?: string;\n    maxCacheSize?: number;\n    ttl?: number;\n  }\n): T {\n  const { name = 'smart-memo', maxCacheSize = 10, ttl } = options || {};\n  const cacheRef = useRef<Map<string, CacheEntry<T>>>(new Map());\n  const computationTimeRef = useRef<number[]>([]);\n\n  return useMemo(() => {\n    const key = JSON.stringify(deps);\n    const cache = cacheRef.current;\n    const now = Date.now();\n\n    // Check cache first\n    const cached = cache.get(key);\n    if (cached && (!ttl || (now - cached.timestamp) < ttl)) {\n      return cached.value;\n    }\n\n    // Compute new value with timing\n    const startTime = performance.now();\n    const value = factory();\n    const duration = performance.now() - startTime;\n\n    // Track computation time for optimization insights\n    computationTimeRef.current.push(duration);\n    if (computationTimeRef.current.length > 10) {\n      computationTimeRef.current.shift();\n    }\n\n    // Cache the result\n    cache.set(key, { value, timestamp: now });\n\n    // Cleanup cache if needed\n    if (cache.size > maxCacheSize) {\n      const entries = Array.from(cache.entries())\n        .sort((a, b) => a[1].timestamp - b[1].timestamp);\n      const toDelete = entries.slice(0, cache.size - maxCacheSize);\n      toDelete.forEach(([k]) => cache.delete(k));\n    }\n\n    // Provide optimization insights\n    if (computationTimeRef.current.length >= 5) {\n      const avgTime = computationTimeRef.current.reduce((a, b) => a + b, 0) / \n                     computationTimeRef.current.length;\n      \n      if (avgTime > 5) {\n        console.debug(`🔍 ${name} average computation time: ${avgTime.toFixed(2)}ms`);\n      }\n    }\n\n    return value;\n  }, deps);\n}\n\ninterface CacheEntry<T> {\n  value: T;\n  timestamp: number;\n}\n\n// === PERFORMANCE UTILITIES ===\n\n/**\n * Utility to wrap components with automatic performance tracking\n */\nexport function trackComponentPerformance<P extends Record<string, any>>(\n  Component: ComponentType<P>\n): ComponentType<P> {\n  const TrackedComponent = (props: P) => {\n    const componentName = Component.displayName || Component.name || 'Unknown';\n    const renderStartRef = useRef<number>(0);\n    const lastPropsRef = useRef<P | null>(null);\n\n    renderStartRef.current = performance.now();\n\n    useEffect(() => {\n      const renderTime = performance.now() - renderStartRef.current;\n      const propsChanged = lastPropsRef.current && \n        JSON.stringify(props) !== JSON.stringify(lastPropsRef.current);\n      \n      ComponentAnalyzer.getInstance().trackComponent(\n        componentName, \n        renderTime, \n        !!propsChanged\n      );\n      \n      lastPropsRef.current = props;\n    });\n\n    return React.createElement(Component, props);\n  };\n\n  TrackedComponent.displayName = `Tracked(${Component.displayName || Component.name})`;\n  return TrackedComponent;\n}\n\n// Export singleton analyzer instance\nexport const componentAnalyzer = ComponentAnalyzer.getInstance(); ","usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app/task-beacon-app-cursor/task-beacon-app/src/lib/utils/core.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app/task-beacon-app-cursor/task-beacon-app/src/lib/utils/createContext.tsx","messages":[{"ruleId":"@typescript-eslint/no-empty-object-type","severity":2,"message":"The `{}` (\"empty object\") type allows any non-nullish value, including literals like `0` and `\"\"`.\n- If that's what you want, disable this lint rule with an inline comment or configure the 'allowObjectTypes' rule option.\n- If you want a type meaning \"any object\", you probably want `object` instead.\n- If you want a type meaning \"any value\", you probably want `unknown` instead.","line":165,"column":44,"nodeType":"TSTypeLiteral","messageId":"noEmptyObject","endLine":165,"endColumn":46,"suggestions":[{"messageId":"replaceEmptyObjectType","data":{"replacement":"object"},"fix":{"range":[3752,3754],"text":"object"},"desc":"Replace `{}` with `object`."},{"messageId":"replaceEmptyObjectType","data":{"replacement":"unknown"},"fix":{"range":[3752,3754],"text":"unknown"},"desc":"Replace `{}` with `unknown`."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { createContext, useContext, ReactNode } from 'react';\n\ninterface CreateContextOptions<T> {\n  /**\n   * The display name for the context (used in DevTools and error messages)\n   */\n  name: string;\n  \n  /**\n   * Whether to throw an error when the hook is used outside the provider\n   * @default true\n   */\n  strict?: boolean;\n  \n  /**\n   * Default value for non-strict mode\n   */\n  defaultValue?: T;\n  \n  /**\n   * Custom error message when used outside provider\n   */\n  errorMessage?: string;\n}\n\ninterface ContextReturn<T> {\n  /**\n   * The React context\n   */\n  Context: React.Context<T | undefined>;\n  \n  /**\n   * Provider component\n   */\n  Provider: React.ComponentType<{\n    children: ReactNode;\n    value: T;\n  }>;\n  \n  /**\n   * Hook to access context value\n   */\n  useContext: () => T;\n}\n\n/**\n * Standardized context creation utility\n * \n * Provides consistent patterns for:\n * - Context creation with proper error handling\n * - Provider components with proper display names\n * - Hooks with validation and error messages\n * - Optional strict/non-strict modes\n * \n * @example\n * ```tsx\n * interface AuthContextValue {\n *   user: User | null;\n *   login: (email: string, password: string) => Promise<void>;\n * }\n * \n * const { Provider: AuthProvider, useContext: useAuth } = createStandardContext<AuthContextValue>({\n *   name: 'Auth',\n *   errorMessage: 'useAuth must be used within AuthProvider'\n * });\n * \n * // Usage\n * function MyAuthProvider({ children }: { children: ReactNode }) {\n *   const [user, setUser] = useState(null);\n *   const login = async (email, password) => { ... };\n *   \n *   return (\n *     <AuthProvider value={{ user, login }}>\n *       {children}\n *     </AuthProvider>\n *   );\n * }\n * \n * function SomeComponent() {\n *   const { user, login } = useAuth();\n *   // ...\n * }\n * ```\n */\nexport function createStandardContext<T>(\n  options: CreateContextOptions<T>\n): ContextReturn<T> {\n  const {\n    name,\n    strict = true,\n    defaultValue,\n    errorMessage,\n  } = options;\n\n  // Create the context with undefined as initial value\n  const Context = createContext<T | undefined>(undefined);\n\n  // Set display name for DevTools\n  Context.displayName = `${name}Context`;\n\n  // Provider component\n  const Provider: React.ComponentType<{\n    children: ReactNode;\n    value: T;\n  }> = ({ children, value }) => (\n    <Context.Provider value={value}>\n      {children}\n    </Context.Provider>\n  );\n\n  // Set display name for Provider\n  Provider.displayName = `${name}Provider`;\n\n  // Hook to access context\n  const useContextHook = (): T => {\n    const context = useContext(Context);\n\n    // Handle strict mode (default)\n    if (strict && context === undefined) {\n      const message = errorMessage || \n        `use${name} must be used within a ${name}Provider`;\n      throw new Error(message);\n    }\n\n    // Handle non-strict mode with default value\n    if (!strict && context === undefined) {\n      if (defaultValue !== undefined) {\n        return defaultValue;\n      }\n      throw new Error(\n        `use${name} called outside provider and no defaultValue provided`\n      );\n    }\n\n    return context as T;\n  };\n\n  return {\n    Context,\n    Provider,\n    useContext: useContextHook,\n  };\n}\n\n/**\n * Higher-order component for easier context provider creation\n * \n * @example\n * ```tsx\n * const { Provider: AuthProvider, useContext: useAuth } = createStandardContext<AuthValue>({\n *   name: 'Auth'\n * });\n * \n * const AuthProviderWithLogic = withContextProvider(\n *   AuthProvider,\n *   ({ children }) => {\n *     const [user, setUser] = useState(null);\n *     const login = async (email, password) => { ... };\n *     \n *     return { user, login };\n *   }\n * );\n * ```\n */\nexport function withContextProvider<T, P = {}>(\n  Provider: React.ComponentType<{ children: ReactNode; value: T }>,\n  useValue: (props: P) => T\n): React.ComponentType<P & { children: ReactNode }> {\n  const ProviderWithLogic = (props: P & { children: ReactNode }) => {\n    const { children, ...restProps } = props;\n    const value = useValue(restProps as P);\n    \n    return (\n      <Provider value={value}>\n        {children}\n      </Provider>\n    );\n  };\n\n  // Copy display name if available\n  const originalName = Provider.displayName || Provider.name || 'Unknown';\n  ProviderWithLogic.displayName = `${originalName}WithLogic`;\n\n  return ProviderWithLogic;\n}\n\n/**\n * Utility for optional context usage (doesn't throw when outside provider)\n * \n * @example\n * ```tsx\n * const { useOptionalContext } = createOptionalContext(useAuth);\n * \n * function SomeComponent() {\n *   const auth = useOptionalContext(); // Returns null if outside provider\n *   \n *   if (auth) {\n *     // Use auth safely\n *   }\n * }\n * ```\n */\nexport function createOptionalContext<T>(\n  useContextHook: () => T\n): {\n  useOptionalContext: () => T | null;\n} {\n  const useOptionalContext = (): T | null => {\n    try {\n      return useContextHook();\n    } catch {\n      return null;\n    }\n  };\n\n  return { useOptionalContext };\n} ","usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app/task-beacon-app-cursor/task-beacon-app/src/lib/utils/data.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app/task-beacon-app-cursor/task-beacon-app/src/lib/utils/date.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app/task-beacon-app-cursor/task-beacon-app/src/lib/utils/error.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app/task-beacon-app-cursor/task-beacon-app/src/lib/utils/format.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app/task-beacon-app-cursor/task-beacon-app/src/lib/utils/image.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app/task-beacon-app-cursor/task-beacon-app/src/lib/utils/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app/task-beacon-app-cursor/task-beacon-app/src/lib/utils/logging.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app/task-beacon-app-cursor/task-beacon-app/src/lib/utils/mobile.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":96,"column":26,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":96,"endColumn":29,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2515,2518],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2515,2518],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":132,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":132,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3297,3300],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3297,3300],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Mobile utilities\n * \n * Provides mobile-specific detection and utility functions.\n * Migrated from src/lib/mobile-utils.tsx - use this path going forward.\n */\n\n/**\n * Detect if the current device is likely a mobile device\n */\nexport function isMobile(): boolean {\n  if (typeof window === 'undefined') return false;\n  \n  // Check user agent first\n  const userAgent = navigator.userAgent.toLowerCase();\n  const mobileKeywords = [\n    'android', 'iphone', 'ipad', 'ipod', 'blackberry', \n    'windows phone', 'mobile', 'opera mini'\n  ];\n  \n  const isMobileUA = mobileKeywords.some(keyword => \n    userAgent.includes(keyword)\n  );\n  \n  // Check screen size as backup\n  const isMobileScreen = window.innerWidth <= 768;\n  \n  // Check touch capability\n  const isTouchDevice = 'ontouchstart' in window || \n                       navigator.maxTouchPoints > 0;\n  \n  return isMobileUA || (isMobileScreen && isTouchDevice);\n}\n\n/**\n * Detect if the current device is a tablet\n */\nexport function isTablet(): boolean {\n  if (typeof window === 'undefined') return false;\n  \n  const userAgent = navigator.userAgent.toLowerCase();\n  const isIPad = userAgent.includes('ipad');\n  const isAndroidTablet = userAgent.includes('android') && !userAgent.includes('mobile');\n  \n  // Screen size check for tablets\n  const screenWidth = window.innerWidth;\n  const isTabletScreen = screenWidth >= 768 && screenWidth <= 1024;\n  \n  return isIPad || isAndroidTablet || (isTabletScreen && 'ontouchstart' in window);\n}\n\n/**\n * Detect if the current device is a desktop\n */\nexport function isDesktop(): boolean {\n  return !isMobile() && !isTablet();\n}\n\n/**\n * Get device type as string\n */\nexport function getDeviceType(): 'mobile' | 'tablet' | 'desktop' {\n  if (isMobile()) return 'mobile';\n  if (isTablet()) return 'tablet';\n  return 'desktop';\n}\n\n/**\n * Detect iOS device\n */\nexport function isIOS(): boolean {\n  if (typeof window === 'undefined') return false;\n  \n  const userAgent = navigator.userAgent.toLowerCase();\n  return /iphone|ipad|ipod/.test(userAgent);\n}\n\n/**\n * Detect Android device\n */\nexport function isAndroid(): boolean {\n  if (typeof window === 'undefined') return false;\n  \n  const userAgent = navigator.userAgent.toLowerCase();\n  return userAgent.includes('android');\n}\n\n/**\n * Detect if running in standalone mode (PWA)\n */\nexport function isStandalone(): boolean {\n  if (typeof window === 'undefined') return false;\n  \n  return (\n    window.matchMedia('(display-mode: standalone)').matches ||\n    (window.navigator as any).standalone === true\n  );\n}\n\n/**\n * Get viewport dimensions\n */\nexport function getViewportDimensions(): { width: number; height: number } {\n  if (typeof window === 'undefined') {\n    return { width: 0, height: 0 };\n  }\n  \n  return {\n    width: window.innerWidth,\n    height: window.innerHeight\n  };\n}\n\n/**\n * Get screen orientation\n */\nexport function getScreenOrientation(): 'portrait' | 'landscape' {\n  if (typeof window === 'undefined') return 'portrait';\n  \n  return window.innerHeight > window.innerWidth ? 'portrait' : 'landscape';\n}\n\n/**\n * Check if device supports touch\n */\nexport function isTouchDevice(): boolean {\n  if (typeof window === 'undefined') return false;\n  \n  return (\n    'ontouchstart' in window ||\n    navigator.maxTouchPoints > 0 ||\n    (navigator as any).msMaxTouchPoints > 0\n  );\n}\n\n/**\n * Check if device has hover capability\n */\nexport function hasHoverSupport(): boolean {\n  if (typeof window === 'undefined') return false;\n  \n  return window.matchMedia('(hover: hover)').matches;\n}\n\n/**\n * Get device pixel ratio\n */\nexport function getPixelRatio(): number {\n  if (typeof window === 'undefined') return 1;\n  \n  return window.devicePixelRatio || 1;\n}\n\n/**\n * Check if device is in dark mode\n */\nexport function prefersDarkMode(): boolean {\n  if (typeof window === 'undefined') return false;\n  \n  return window.matchMedia('(prefers-color-scheme: dark)').matches;\n}\n\n/**\n * Get device information object\n */\nexport function getDeviceInfo(): {\n  type: 'mobile' | 'tablet' | 'desktop';\n  os: 'ios' | 'android' | 'other';\n  isTouch: boolean;\n  hasHover: boolean;\n  pixelRatio: number;\n  viewport: { width: number; height: number };\n  orientation: 'portrait' | 'landscape';\n  isStandalone: boolean;\n  prefersDark: boolean;\n} {\n  const deviceType = getDeviceType();\n  let os: 'ios' | 'android' | 'other' = 'other';\n  \n  if (isIOS()) os = 'ios';\n  else if (isAndroid()) os = 'android';\n  \n  return {\n    type: deviceType,\n    os,\n    isTouch: isTouchDevice(),\n    hasHover: hasHoverSupport(),\n    pixelRatio: getPixelRatio(),\n    viewport: getViewportDimensions(),\n    orientation: getScreenOrientation(),\n    isStandalone: isStandalone(),\n    prefersDark: prefersDarkMode(),\n  };\n}\n\n// Legacy export for backward compatibility\nexport const mobileUtils = {\n  isMobile,\n  isTablet,\n  isDesktop,\n  getDeviceType,\n  isIOS,\n  isAndroid,\n  isStandalone,\n  getViewportDimensions,\n  getScreenOrientation,\n  isTouchDevice,\n  hasHoverSupport,\n  getPixelRatio,\n  prefersDarkMode,\n  getDeviceInfo,\n}; ","usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app/task-beacon-app-cursor/task-beacon-app/src/lib/utils/navbarColors.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app/task-beacon-app-cursor/task-beacon-app/src/lib/utils/navbarGeometry.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app/task-beacon-app-cursor/task-beacon-app/src/lib/utils/navigation.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app/task-beacon-app-cursor/task-beacon-app/src/lib/utils/notification.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app/task-beacon-app-cursor/task-beacon-app/src/lib/utils/performance.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":47,"column":29,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":47,"endColumn":32,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1129,1132],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1129,1132],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":154,"column":60,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":154,"endColumn":63,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4447,4450],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4447,4450],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":267,"column":67,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":267,"endColumn":70,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7627,7630],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7627,7630],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":319,"column":45,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":319,"endColumn":48,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[9114,9117],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[9114,9117],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":321,"column":36,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":321,"endColumn":39,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[9176,9179],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[9176,9179],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":506,"column":64,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":506,"endColumn":67,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[13966,13969],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[13966,13969],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":506,"column":74,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":506,"endColumn":77,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[13976,13979],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[13976,13979],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":510,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":510,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[14034,14037],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[14034,14037],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":595,"column":46,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":595,"endColumn":49,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[16737,16740],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[16737,16740],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":595,"column":56,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":595,"endColumn":59,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[16747,16750],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[16747,16750],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":617,"column":46,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":617,"endColumn":49,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[17192,17195],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[17192,17195],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":617,"column":56,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":617,"endColumn":59,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[17202,17205],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[17202,17205],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":639,"column":51,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":639,"endColumn":54,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[17683,17686],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[17683,17686],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":648,"column":43,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":648,"endColumn":46,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[17932,17935],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[17932,17935],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":660,"column":18,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":660,"endColumn":21,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[18312,18315],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[18312,18315],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":660,"column":26,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":660,"endColumn":29,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[18320,18323],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[18320,18323],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":693,"column":67,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":693,"endColumn":70,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[19287,19290],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[19287,19290],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":783,"column":38,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":783,"endColumn":41,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[21482,21485],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[21482,21485],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":798,"column":18,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":798,"endColumn":21,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[21957,21960],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[21957,21960],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":19,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Performance Monitoring and Optimization Utilities\n * \n * Provides comprehensive performance tracking, memory monitoring, and optimization tools\n * for React components and application performance analysis.\n */\n\nimport { performanceLogger } from '../logger';\nimport { startTransition } from 'react';\n\n/**\n * Performance measurement utilities\n */\nexport interface PerformanceMeasurement {\n  name: string;\n  duration: number;\n  startTime: number;\n  endTime: number;\n  metadata?: Record<string, unknown>;\n}\n\ninterface PerformanceThresholds {\n  slow: number;\n  warning: number;\n  critical: number;\n  slowRender: number;\n  slowOperation: number;\n  highMemoryUsage: number;\n  frequentRerenders: number;\n}\n\nexport const PERFORMANCE_THRESHOLDS: PerformanceThresholds = {\n  slow: 100, // 100ms\n  warning: 500, // 500ms\n  critical: 1000, // 1s\n  slowRender: 16, // One frame at 60fps\n  slowOperation: 100,\n  highMemoryUsage: 80, // Percentage\n  frequentRerenders: 10, // Count in short period\n};\n\ninterface PerformanceMetric {\n  name: string;\n  startTime: number;\n  endTime?: number;\n  duration?: number;\n  metadata?: Record<string, any>;\n}\n\ninterface ComponentRenderMetrics {\n  componentName: string;\n  renderCount: number;\n  totalRenderTime: number;\n  averageRenderTime: number;\n  lastRenderTime: number;\n  propsChanges: number;\n}\n\ninterface MemoryMetrics {\n  usedJSHeapSize: number;\n  totalJSHeapSize: number;\n  jsHeapSizeLimit: number;\n  usagePercentage: number;\n}\n\ninterface PerformanceMetrics {\n  componentRenders: Map<string, number>;\n  slowOperations: Array<{ name: string; duration: number; timestamp: number }>;\n  bundleChunks: Map<string, { loaded: boolean; size?: number }>;\n}\n\nclass PerformanceMonitor {\n  private measurements = new Map<string, number>();\n  private metrics: PerformanceMetrics = {\n    componentRenders: new Map(),\n    slowOperations: [],\n    bundleChunks: new Map(),\n  };\n  private componentMetrics: Map<string, ComponentRenderMetrics> = new Map();\n  private isEnabled: boolean = process.env.NODE_ENV === 'development';\n  private observers: PerformanceObserver[] = [];\n\n  constructor() {\n    if (this.isEnabled && typeof window !== 'undefined') {\n      this.initializeObservers();\n    }\n  }\n\n  /**\n   * Initialize performance observers for automatic monitoring\n   */\n  private initializeObservers() {\n    if (typeof window === 'undefined' || !window.PerformanceObserver) return;\n\n    // Monitor long tasks\n    try {\n      const longTaskObserver = new PerformanceObserver((list) => {\n        list.getEntries().forEach((entry) => {\n          if (entry.duration > 50) {\n            console.warn(`🐌 Long task detected: ${entry.duration.toFixed(2)}ms`, entry);\n            this.metrics.slowOperations.push({\n              name: 'long-task',\n              duration: entry.duration,\n              timestamp: Date.now(),\n            });\n          }\n        });\n      });\n      \n      longTaskObserver.observe({ entryTypes: ['longtask'] });\n      this.observers.push(longTaskObserver);\n    } catch (error) {\n      console.debug('Long task observer not supported');\n    }\n\n    // Monitor navigation timing\n    try {\n      const navigationObserver = new PerformanceObserver((list) => {\n        list.getEntries().forEach((entry) => {\n          const navEntry = entry as PerformanceNavigationTiming;\n          console.debug('📊 Navigation timing:', {\n            domContentLoaded: navEntry.domContentLoadedEventEnd - navEntry.domContentLoadedEventStart,\n            loadComplete: navEntry.loadEventEnd - navEntry.loadEventStart,\n          });\n        });\n      });\n      \n      navigationObserver.observe({ entryTypes: ['navigation'] });\n      this.observers.push(navigationObserver);\n    } catch (error) {\n      console.debug('Navigation observer not supported');\n    }\n\n    // Monitor resource loading\n    try {\n      const resourceObserver = new PerformanceObserver((list) => {\n        list.getEntries().forEach((entry) => {\n          if (entry.duration > 1000) {\n            console.warn(`🐌 Slow resource: ${entry.name} - ${entry.duration.toFixed(2)}ms`);\n          }\n        });\n      });\n      \n      resourceObserver.observe({ entryTypes: ['resource'] });\n      this.observers.push(resourceObserver);\n    } catch (error) {\n      console.debug('Resource observer not supported');\n    }\n  }\n\n  /**\n   * Start measuring a performance metric (new enhanced method)\n   */\n  startMeasurement(name: string, metadata?: Record<string, any>): void {\n    if (!this.isEnabled) return;\n\n    this.metrics.componentRenders.set(name, (this.metrics.componentRenders.get(name) || 0) + 1);\n  }\n\n  /**\n   * End measuring a performance metric (new enhanced method)\n   */\n  endMeasurement(name: string): number | null {\n    if (!this.isEnabled) return null;\n\n    const currentCount = this.metrics.componentRenders.get(name) || 0;\n    const endTime = performance.now();\n    const duration = endTime - (this.measurements.get(name) || 0);\n\n    if (duration > PERFORMANCE_THRESHOLDS.slowRender) {\n      this.metrics.slowOperations.push({\n        name: `render-${name}`,\n        duration,\n        timestamp: Date.now(),\n      });\n    }\n\n    return duration;\n  }\n\n  /**\n   * Legacy start method for backward compatibility\n   */\n  start(name: string, metadata?: Record<string, unknown>): void {\n    const startTime = performance.now();\n    this.measurements.set(name, startTime);\n    \n    performanceLogger.debug(`Performance measurement started: ${name}`, {\n      startTime,\n      ...metadata\n    });\n  }\n\n  /**\n   * Legacy end method for backward compatibility\n   */\n  end(name: string, metadata?: Record<string, unknown>): PerformanceMeasurement | null {\n    const endTime = performance.now();\n    const startTime = this.measurements.get(name);\n\n    if (!startTime) {\n      performanceLogger.warn(`No start time found for measurement: ${name}`);\n      return null;\n    }\n\n    const duration = endTime - startTime;\n    const measurement: PerformanceMeasurement = {\n      name,\n      duration,\n      startTime,\n      endTime,\n      metadata,\n    };\n\n    // Log based on performance thresholds\n    const logLevel = this.getLogLevel(duration);\n    const message = `Performance measurement completed: ${name}`;\n    const context = {\n      duration: `${duration.toFixed(2)}ms`,\n      threshold: this.getThresholdLabel(duration),\n      ...metadata\n    };\n\n    switch (logLevel) {\n      case 'debug':\n        performanceLogger.debug(message, context);\n        break;\n      case 'info':\n        performanceLogger.info(message, context);\n        break;\n      case 'warn':\n        performanceLogger.warn(message, context);\n        break;\n      case 'error':\n        performanceLogger.error(message, undefined, context);\n        break;\n    }\n\n    // Clean up\n    this.measurements.delete(name);\n    return measurement;\n  }\n\n  /**\n   * Get appropriate log level based on duration\n   */\n  private getLogLevel(duration: number): 'debug' | 'info' | 'warn' | 'error' {\n    if (duration >= PERFORMANCE_THRESHOLDS.critical) return 'error';\n    if (duration >= PERFORMANCE_THRESHOLDS.warning) return 'warn';\n    if (duration >= PERFORMANCE_THRESHOLDS.slow) return 'info';\n    return 'debug';\n  }\n\n  /**\n   * Get threshold label for duration\n   */\n  private getThresholdLabel(duration: number): string {\n    if (duration >= PERFORMANCE_THRESHOLDS.critical) return 'critical';\n    if (duration >= PERFORMANCE_THRESHOLDS.warning) return 'warning';\n    if (duration >= PERFORMANCE_THRESHOLDS.slow) return 'slow';\n    return 'fast';\n  }\n\n  /**\n   * Measure a function's execution time\n   */\n  measure<T>(name: string, fn: () => T, metadata?: Record<string, any>): T {\n    this.startMeasurement(name, metadata);\n    try {\n      const result = fn();\n      this.endMeasurement(name);\n      return result;\n    } catch (error) {\n      this.endMeasurement(name);\n      throw error;\n    }\n  }\n\n  /**\n   * Track component render performance\n   */\n  trackComponentRender(componentName: string, renderTime: number, propsChanged: boolean = false): void {\n    if (!this.isEnabled) return;\n\n    const existing = this.componentMetrics.get(componentName) || {\n      componentName,\n      renderCount: 0,\n      totalRenderTime: 0,\n      averageRenderTime: 0,\n      lastRenderTime: 0,\n      propsChanges: 0,\n    };\n\n    existing.renderCount++;\n    existing.totalRenderTime += renderTime;\n    existing.averageRenderTime = existing.totalRenderTime / existing.renderCount;\n    existing.lastRenderTime = renderTime;\n    \n    if (propsChanged) {\n      existing.propsChanges++;\n    }\n\n    this.componentMetrics.set(componentName, existing);\n\n    // Warn about frequent re-renders\n    if (existing.renderCount > PERFORMANCE_THRESHOLDS.frequentRerenders && existing.averageRenderTime > 5) {\n      console.warn(`🔄 Frequent re-renders detected in ${componentName}:`, {\n        renderCount: existing.renderCount,\n        averageTime: existing.averageRenderTime.toFixed(2),\n        propsChanges: existing.propsChanges,\n      });\n    }\n  }\n\n  /**\n   * Get memory usage information\n   */\n  getMemoryUsage(): MemoryMetrics | null {\n    if (!this.isEnabled || !(performance as any).memory) return null;\n\n    const memory = (performance as any).memory;\n    const usagePercentage = (memory.usedJSHeapSize / memory.totalJSHeapSize) * 100;\n\n    const metrics: MemoryMetrics = {\n      usedJSHeapSize: memory.usedJSHeapSize,\n      totalJSHeapSize: memory.totalJSHeapSize,\n      jsHeapSizeLimit: memory.jsHeapSizeLimit,\n      usagePercentage,\n    };\n\n    // Warn about high memory usage\n    if (usagePercentage > PERFORMANCE_THRESHOLDS.highMemoryUsage) {\n      console.warn(`🧠 High memory usage: ${usagePercentage.toFixed(1)}%`, metrics);\n    }\n\n    return metrics;\n  }\n\n  /**\n   * Get component performance report\n   */\n  getComponentReport(): ComponentRenderMetrics[] {\n    return Array.from(this.componentMetrics.values())\n      .sort((a, b) => b.averageRenderTime - a.averageRenderTime);\n  }\n\n  /**\n   * Clear all metrics\n   */\n  clear(): void {\n    this.measurements.clear();\n    this.componentMetrics.clear();\n    this.metrics.componentRenders.clear();\n    this.metrics.slowOperations = [];\n    this.metrics.bundleChunks.clear();\n  }\n\n  /**\n   * Cleanup observers\n   */\n  destroy(): void {\n    this.observers.forEach(observer => observer.disconnect());\n    this.observers = [];\n    this.clear();\n  }\n\n  /**\n   * Generate performance report\n   */\n  generateReport(): void {\n    if (!this.isEnabled) return;\n\n    console.group('📊 Performance Report');\n    \n    // Memory usage\n    const memoryUsage = this.getMemoryUsage();\n    if (memoryUsage) {\n      console.log('Memory Usage:', {\n        used: `${(memoryUsage.usedJSHeapSize / 1024 / 1024).toFixed(2)} MB`,\n        total: `${(memoryUsage.totalJSHeapSize / 1024 / 1024).toFixed(2)} MB`,\n        percentage: `${memoryUsage.usagePercentage.toFixed(1)}%`,\n      });\n    }\n\n    // Component renders\n    const componentReport = this.getComponentReport();\n    if (componentReport.length > 0) {\n      console.log('Component Render Performance:', componentReport.slice(0, 10));\n    }\n\n    // Recent metrics\n    const recentMetrics = this.metrics.slowOperations.slice(-10); // Last 10\n    \n    if (recentMetrics.length > 0) {\n      console.log('Slowest Operations:', recentMetrics);\n    }\n\n    console.groupEnd();\n  }\n\n  /**\n   * Enable/disable monitoring\n   */\n  setEnabled(enabled: boolean): void {\n    this.isEnabled = enabled;\n    if (!enabled) {\n      this.destroy();\n    } else if (typeof window !== 'undefined') {\n      this.initializeObservers();\n    }\n  }\n\n  /**\n   * Track bundle chunk loading\n   */\n  trackChunkLoad(chunkName: string, size?: number) {\n    this.metrics.bundleChunks.set(chunkName, { loaded: true, size });\n    console.debug(`📦 Chunk loaded: ${chunkName}${size ? ` (${size} bytes)` : ''}`);\n  }\n\n  /**\n   * Get performance report\n   */\n  getReport() {\n    return {\n      componentRenders: Object.fromEntries(this.metrics.componentRenders),\n      slowOperations: this.metrics.slowOperations.slice(-10), // Last 10\n      bundleChunks: Object.fromEntries(this.metrics.bundleChunks),\n      webVitals: this.getWebVitals(),\n    };\n  }\n\n  /**\n   * Get Web Vitals metrics\n   */\n  private getWebVitals() {\n    if (typeof window === 'undefined') return {};\n\n    const navigation = performance.getEntriesByType('navigation')[0] as PerformanceNavigationTiming;\n    if (!navigation) return {};\n\n    return {\n      FCP: navigation.responseStart - navigation.fetchStart,\n      LCP: navigation.loadEventEnd - navigation.fetchStart,\n      TTFB: navigation.responseStart - navigation.requestStart,\n      DOMLoad: navigation.domContentLoadedEventEnd - navigation.domContentLoadedEventStart,\n    };\n  }\n}\n\n/**\n * FPS Monitor for tracking frame rate performance\n */\nclass FPSMonitor {\n  private frames = 0;\n  private lastTime = performance.now();\n  private currentFPS = 0;\n  private isMonitoring = false;\n\n  start(): void {\n    if (this.isMonitoring) return;\n    this.isMonitoring = true;\n    this.frames = 0;\n    this.lastTime = performance.now();\n    requestAnimationFrame(this.tick);\n  }\n\n  stop(): void {\n    this.isMonitoring = false;\n  }\n\n  private tick = (): void => {\n    if (!this.isMonitoring) return;\n\n    this.frames++;\n    const now = performance.now();\n\n    if (now >= this.lastTime + 1000) {\n      this.currentFPS = Math.round((this.frames * 1000) / (now - this.lastTime));\n      this.frames = 0;\n      this.lastTime = now;\n\n      // Warn about low FPS\n      if (this.currentFPS < 30) {\n        console.warn(`🎯 Low FPS detected: ${this.currentFPS} fps`);\n      }\n    }\n\n    if (this.isMonitoring) {\n      requestAnimationFrame(this.tick);\n    }\n  };\n\n  getCurrentFPS(): number {\n    return this.currentFPS;\n  }\n}\n\n// Global instances\nexport const performanceMonitor = new PerformanceMonitor();\nexport const fpsMonitor = new FPSMonitor();\n\n/**\n * Decorator function to measure function performance\n */\nexport function measureFunctionPerformance<T extends (...args: any[]) => any>(\n  fn: T,\n  name?: string\n): T {\n  return ((...args: any[]) => {\n    const functionName = name || fn.name || 'anonymous';\n    performanceMonitor.startMeasurement(functionName);\n    try {\n      const result = fn(...args);\n      performanceMonitor.endMeasurement(functionName);\n      return result;\n    } catch (error) {\n      performanceMonitor.endMeasurement(functionName);\n      throw error;\n    }\n  }) as T;\n}\n\n/**\n * Create a performance observer for specific entry types\n */\nexport function createPerformanceObserver(\n  entryTypes: string[],\n  callback?: (entries: PerformanceEntry[]) => void\n): PerformanceObserver | null {\n  if (typeof window === 'undefined' || !('PerformanceObserver' in window)) {\n    performanceLogger.warn('PerformanceObserver not available');\n    return null;\n  }\n\n  try {\n    const observer = new PerformanceObserver((list) => {\n      const entries = list.getEntries();\n      \n      if (callback) {\n        callback(entries);\n      } else {\n        entries.forEach((entry) => {\n          performanceLogger.debug(`Performance entry: ${entry.name}`, {\n            type: entry.entryType,\n            duration: entry.duration,\n            startTime: entry.startTime,\n          });\n        });\n      }\n    });\n\n    observer.observe({ entryTypes });\n    return observer;\n  } catch (error) {\n    performanceLogger.error('Failed to create PerformanceObserver', error);\n    return null;\n  }\n}\n\n/**\n * Log current performance metrics\n */\nexport function logPerformanceMetrics(): void {\n  const navigation = performance.getEntriesByType('navigation')[0] as PerformanceNavigationTiming;\n  \n  if (navigation) {\n    const metrics = {\n      DNS: navigation.domainLookupEnd - navigation.domainLookupStart,\n      TCP: navigation.connectEnd - navigation.connectStart,\n      SSL: navigation.secureConnectionStart ? navigation.connectEnd - navigation.secureConnectionStart : 0,\n      TTFB: navigation.responseStart - navigation.requestStart,\n      Download: navigation.responseEnd - navigation.responseStart,\n      DOM: navigation.domContentLoadedEventEnd - navigation.domContentLoadedEventStart,\n      Load: navigation.loadEventEnd - navigation.loadEventStart,\n    };\n\n    performanceLogger.info('Navigation timing metrics', metrics);\n  }\n\n  // Get memory usage if available\n  const memoryUsage = performanceMonitor.getMemoryUsage();\n  if (memoryUsage) {\n    performanceLogger.info('Memory usage', {\n      used: `${(memoryUsage.usedJSHeapSize / 1024 / 1024).toFixed(2)}MB`,\n      total: `${(memoryUsage.totalJSHeapSize / 1024 / 1024).toFixed(2)}MB`,\n      limit: `${(memoryUsage.jsHeapSizeLimit / 1024 / 1024).toFixed(2)}MB`\n    });\n  }\n}\n\n/**\n * Utility function to debounce expensive operations\n */\nexport function debounce<T extends (...args: any[]) => any>(\n  func: T,\n  wait: number\n): (...args: Parameters<T>) => void {\n  let timeout: NodeJS.Timeout | null = null;\n  \n  return (...args: Parameters<T>) => {\n    const later = () => {\n      timeout = null;\n      func(...args);\n    };\n    \n    if (timeout) {\n      clearTimeout(timeout);\n    }\n    timeout = setTimeout(later, wait);\n  };\n}\n\n/**\n * Utility function to throttle expensive operations\n */\nexport function throttle<T extends (...args: any[]) => any>(\n  func: T,\n  limit: number\n): (...args: Parameters<T>) => void {\n  let inThrottle = false;\n  \n  return (...args: Parameters<T>) => {\n    if (!inThrottle) {\n      func(...args);\n      inThrottle = true;\n      setTimeout(() => {\n        inThrottle = false;\n      }, limit);\n    }\n  };\n}\n\n// Performance optimization helpers\nexport const optimizeComponent = {\n  /**\n   * Create a memoized equality function for React.memo\n   */\n  createMemoComparison: <T extends Record<string, any>>(\n    keys: (keyof T)[]\n  ) => (prevProps: T, nextProps: T): boolean => {\n    return keys.every(key => prevProps[key] === nextProps[key]);\n  },\n\n  /**\n   * Shallow compare function for React.memo\n   */\n  shallowEqual: <T extends Record<string, any>>(prevProps: T, nextProps: T): boolean => {\n    const keys1 = Object.keys(prevProps) as (keyof T)[];\n    const keys2 = Object.keys(nextProps) as (keyof T)[];\n    \n    if (keys1.length !== keys2.length) return false;\n    \n    return keys1.every(key => prevProps[key] === nextProps[key]);\n  },\n\n  /**\n   * Deep compare for complex objects (use sparingly)\n   */\n  deepEqual: (a: any, b: any): boolean => {\n    if (a === b) return true;\n    if (a == null || b == null) return false;\n    if (typeof a !== typeof b) return false;\n    \n    if (typeof a === 'object') {\n      const keysA = Object.keys(a);\n      const keysB = Object.keys(b);\n      \n      if (keysA.length !== keysB.length) return false;\n      \n      return keysA.every(key => optimizeComponent.deepEqual(a[key], b[key]));\n    }\n    \n    return false;\n  },\n};\n\n// React hooks for performance monitoring\nexport const usePerformanceTracking = (componentName: string) => {\n  if (typeof window === 'undefined') return { measureRender: () => {} };\n\n  const measureRender = (propsChanged = false) => {\n    const renderTime = performance.now();\n    performanceMonitor.trackComponentRender(componentName, renderTime, propsChanged);\n  };\n\n  return { measureRender };\n};\n\n/**\n * High-performance lazy loading utility with preloading\n */\nexport function createLazyComponent<T extends React.ComponentType<any>>(\n  importFunction: () => Promise<{ default: T }>,\n  options?: {\n    chunkName?: string;\n    preload?: boolean;\n    fallback?: React.ComponentType;\n  }\n) {\n  const { chunkName, preload = false, fallback } = options || {};\n  \n  // Preload if requested\n  if (preload && typeof window !== 'undefined') {\n    importFunction().then(() => {\n      if (chunkName) {\n        performanceMonitor.trackChunkLoad(chunkName);\n      }\n    });\n  }\n\n  const LazyComponent = React.lazy(async () => {\n    const startTime = performance.now();\n    const module = await importFunction();\n    const duration = performance.now() - startTime;\n    \n    if (chunkName) {\n      performanceMonitor.trackChunkLoad(chunkName);\n      console.debug(`📦 Loaded ${chunkName} in ${duration.toFixed(2)}ms`);\n    }\n    \n    return module;\n  });\n\n  return LazyComponent;\n}\n\n/**\n * Optimized state transition utility\n */\nexport function useOptimizedTransition() {\n  return {\n    /**\n     * Start a non-urgent state update\n     */\n    startTransition: (callback: () => void) => {\n      startTransition(() => {\n        callback();\n      });\n    },\n    \n    /**\n     * Defer an operation to the next idle period\n     */\n    scheduleIdleWork: (callback: () => void, timeout = 5000) => {\n      if (typeof window !== 'undefined' && 'requestIdleCallback' in window) {\n        window.requestIdleCallback(callback, { timeout });\n      } else {\n        // Fallback for browsers without requestIdleCallback\n        setTimeout(callback, 0);\n      }\n    },\n    \n    /**\n     * Batch multiple state updates\n     */\n    batchUpdates: (updates: Array<() => void>) => {\n      startTransition(() => {\n        updates.forEach(update => update());\n      });\n    },\n  };\n}\n\n/**\n * Memory optimization utilities\n */\nexport const memoryOptimizer = {\n  /**\n   * Cleanup component references\n   */\n  cleanupComponent: (componentName: string) => {\n    // Clear performance marks\n    performance.clearMarks(`${componentName}-*`);\n    performance.clearMeasures(`${componentName}-*`);\n  },\n\n  /**\n   * Monitor memory usage\n   */\n  getMemoryInfo: () => {\n    if (typeof window !== 'undefined' && 'memory' in performance) {\n      const memory = (performance as any).memory;\n      return {\n        used: Math.round(memory.usedJSHeapSize / 1048576 * 100) / 100,\n        total: Math.round(memory.totalJSHeapSize / 1048576 * 100) / 100,\n        limit: Math.round(memory.jsHeapSizeLimit / 1048576 * 100) / 100,\n      };\n    }\n    return null;\n  },\n\n  /**\n   * Trigger garbage collection (dev only)\n   */\n  forceGC: () => {\n    if (process.env.NODE_ENV === 'development' && typeof window !== 'undefined' && 'gc' in window) {\n      (window as any).gc();\n      console.debug('🗑️ Forced garbage collection');\n    }\n  },\n};\n\n/**\n * Bundle optimization utilities\n */\nexport const bundleOptimizer = {\n  /**\n   * Preload critical chunks\n   */\n  preloadCriticalChunks: (chunkNames: string[]) => {\n    chunkNames.forEach(chunkName => {\n      const link = document.createElement('link');\n      link.rel = 'preload';\n      link.href = `/chunks/${chunkName}.js`;\n      link.as = 'script';\n      document.head.appendChild(link);\n    });\n  },\n\n  /**\n   * Report bundle size\n   */\n  reportBundleSize: () => {\n    const scripts = Array.from(document.querySelectorAll('script[src]'));\n    let totalSize = 0;\n    \n    scripts.forEach(async (script) => {\n      try {\n        const response = await fetch((script as HTMLScriptElement).src, { method: 'HEAD' });\n        const size = parseInt(response.headers.get('content-length') || '0');\n        totalSize += size;\n        performanceMonitor.trackChunkLoad((script as HTMLScriptElement).src.split('/').pop() || 'unknown', size);\n      } catch (error) {\n        console.debug('Could not get bundle size for:', script);\n      }\n    });\n    \n    console.debug(`📦 Total bundle size: ${Math.round(totalSize / 1024)} KB`);\n  },\n};\n\n// Export React import for the lazy component function\nimport React from 'react'; ","usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app/task-beacon-app-cursor/task-beacon-app/src/lib/utils/sidebar.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app/task-beacon-app-cursor/task-beacon-app/src/lib/utils/ui.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app/task-beacon-app-cursor/task-beacon-app/src/lib/utils/validation.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app/task-beacon-app-cursor/task-beacon-app/src/lib/validation/databaseValidation.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app/task-beacon-app-cursor/task-beacon-app/src/main.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app/task-beacon-app-cursor/task-beacon-app/src/pages/AuthPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app/task-beacon-app-cursor/task-beacon-app/src/pages/CreateTaskPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app/task-beacon-app-cursor/task-beacon-app/src/pages/FollowUpTaskPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app/task-beacon-app-cursor/task-beacon-app/src/pages/Index.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app/task-beacon-app-cursor/task-beacon-app/src/pages/NotFound.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app/task-beacon-app-cursor/task-beacon-app/src/pages/TaskDetailsPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app/task-beacon-app-cursor/task-beacon-app/src/schemas/commonValidation.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app/task-beacon-app-cursor/task-beacon-app/src/test/config/testConfig.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":239,"column":35,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":239,"endColumn":38,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5079,5082],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5079,5082],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"no-prototype-builtins","severity":2,"message":"Do not access Object.prototype method 'hasOwnProperty' from target object.","line":241,"column":30,"nodeType":"CallExpression","messageId":"prototypeBuildIn","endLine":241,"endColumn":44,"suggestions":[{"messageId":"callObjectPrototype","data":{"prop":"hasOwnProperty"},"fix":{"range":[5171,5195],"text":"Object.prototype.hasOwnProperty.call(response, "},"desc":"Call Object.prototype.hasOwnProperty explicitly."}]},{"ruleId":"no-prototype-builtins","severity":2,"message":"Do not access Object.prototype method 'hasOwnProperty' from target object.","line":242,"column":31,"nodeType":"CallExpression","messageId":"prototypeBuildIn","endLine":242,"endColumn":45,"suggestions":[{"messageId":"callObjectPrototype","data":{"prop":"hasOwnProperty"},"fix":{"range":[5225,5249],"text":"Object.prototype.hasOwnProperty.call(response, "},"desc":"Call Object.prototype.hasOwnProperty explicitly."}]}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Centralized test configuration for Task Beacon App\n * Manages test settings, mock configurations, and testing standards\n */\n\nexport const testConfig = {\n  // Test timeouts\n  timeouts: {\n    unit: 5000,\n    integration: 10000,\n    e2e: 30000,\n    async: 8000,\n  },\n\n  // Coverage thresholds by category\n  coverage: {\n    global: {\n      statements: 80,\n      branches: 75,\n      functions: 80,\n      lines: 80,\n    },\n    critical: {\n      statements: 90,\n      branches: 85,\n      functions: 90,\n      lines: 90,\n    },\n    components: {\n      statements: 85,\n      branches: 80,\n      functions: 85,\n      lines: 85,\n    },\n  },\n\n  // Mock data configurations\n  mocks: {\n    defaultUser: {\n      id: 'mock-user-id',\n      email: 'test@example.com',\n      name: 'Test User',\n      role: 'user',\n    },\n    defaultTask: {\n      id: 'mock-task-id',\n      title: 'Test Task',\n      description: 'Test description',\n      status: 'pending' as const,\n      priority: 'medium' as const,\n    },\n    apiDelay: 100, // ms\n    networkTimeout: 5000, // ms\n  },\n\n  // Test environment settings\n  environment: {\n    jsdom: {\n      url: 'http://localhost:3000',\n      resources: 'usable',\n    },\n    features: {\n      localStorage: true,\n      sessionStorage: true,\n      fetch: true,\n      webSocket: false, // Mock WebSocket for real-time tests\n    },\n  },\n\n  // Testing categories and patterns\n  patterns: {\n    unit: [\n      'src/**/*.test.{ts,tsx}',\n      '!src/**/integration/**',\n      '!src/**/e2e/**',\n    ],\n    integration: [\n      'src/**/integration/**/*.test.{ts,tsx}',\n    ],\n    components: [\n      'src/**/components/**/*.test.{ts,tsx}',\n    ],\n    hooks: [\n      'src/**/hooks/**/*.test.{ts,tsx}',\n    ],\n    api: [\n      'src/**/api/**/*.test.{ts,tsx}',\n      'src/lib/api/**/*.test.{ts,tsx}',\n    ],\n    critical: [\n      'src/features/auth/**/*.test.{ts,tsx}',\n      'src/features/tasks/integration/**/*.test.{ts,tsx}',\n      'src/lib/api/**/*.test.{ts,tsx}',\n    ],\n  },\n\n  // Mock configurations for different services\n  mockConfigs: {\n    supabase: {\n      auth: {\n        autoConfirm: true,\n        persistSession: false,\n      },\n      realtime: {\n        enabled: false,\n        heartbeatIntervalMs: 30000,\n      },\n    },\n    api: {\n      baseURL: 'http://localhost:3000/api',\n      timeout: 5000,\n      retries: 0,\n    },\n    storage: {\n      bucket: 'test-bucket',\n      maxFileSize: 5242880, // 5MB\n    },\n  },\n\n  // Accessibility testing standards\n  accessibility: {\n    rules: {\n      'color-contrast': 'error',\n      'keyboard-navigation': 'error',\n      'aria-labels': 'warning',\n      'semantic-markup': 'warning',\n    },\n    standards: 'WCAG2AA',\n  },\n\n  // Performance testing thresholds\n  performance: {\n    renderTime: 100, // ms\n    queryTime: 200, // ms\n    componentMount: 50, // ms\n    bundleSize: 500, // KB for lazy chunks\n  },\n\n  // Test data generation settings\n  dataGeneration: {\n    taskBatchSize: 10,\n    userBatchSize: 5,\n    seedValue: 12345, // For consistent random data\n  },\n};\n\n/**\n * Test categories for organizing test runs\n */\nexport const testCategories = {\n  UNIT: 'unit',\n  INTEGRATION: 'integration',\n  COMPONENT: 'component',\n  E2E: 'e2e',\n  CRITICAL: 'critical',\n  PERFORMANCE: 'performance',\n  ACCESSIBILITY: 'accessibility',\n} as const;\n\n/**\n * Mock response factories\n */\nexport const mockResponseFactories = {\n  success: <T>(data: T) => ({\n    success: true,\n    data,\n    error: null,\n  }),\n  \n  error: (message: string, code?: string) => ({\n    success: false,\n    data: null,\n    error: {\n      message,\n      code: code || 'GENERIC_ERROR',\n      name: 'TestError',\n    },\n  }),\n  \n  loading: () => ({\n    success: false,\n    data: null,\n    error: null,\n    loading: true,\n  }),\n  \n  paginated: <T>(data: T[], page = 1, pageSize = 10) => ({\n    success: true,\n    data: {\n      data: data.slice((page - 1) * pageSize, page * pageSize),\n      pagination: {\n        currentPage: page,\n        pageSize,\n        totalCount: data.length,\n        totalPages: Math.ceil(data.length / pageSize),\n        hasNextPage: page * pageSize < data.length,\n        hasPreviousPage: page > 1,\n      },\n    },\n    error: null,\n  }),\n};\n\n/**\n * Common test assertions\n */\nexport const commonAssertions = {\n  /**\n   * Assert that an element has proper accessibility attributes\n   */\n  hasAccessibilityAttributes: (element: HTMLElement) => {\n    const hasRole = element.hasAttribute('role');\n    const hasAriaLabel = element.hasAttribute('aria-label') || element.hasAttribute('aria-labelledby');\n    const isFocusable = element.tabIndex >= 0;\n    \n    return {\n      hasRole,\n      hasAriaLabel,\n      isFocusable,\n      isAccessible: hasRole || hasAriaLabel || isFocusable,\n    };\n  },\n\n  /**\n   * Assert that a component renders without errors\n   */\n  rendersWithoutErrors: (renderFn: () => void) => {\n    try {\n      renderFn();\n      return { success: true, error: null };\n    } catch (error) {\n      return { success: false, error };\n    }\n  },\n\n  /**\n   * Assert API response structure\n   */\n  hasValidApiResponse: (response: any) => {\n    const hasSuccess = typeof response.success === 'boolean';\n    const hasData = response.hasOwnProperty('data');\n    const hasError = response.hasOwnProperty('error');\n    \n    return {\n      isValid: hasSuccess && hasData && hasError,\n      details: { hasSuccess, hasData, hasError },\n    };\n  },\n};\n\n/**\n * Test utilities for specific features\n */\nexport const featureTestUtils = {\n  tasks: {\n    statuses: ['pending', 'complete', 'overdue'] as const,\n    priorities: ['low', 'medium', 'high', 'urgent'] as const,\n    sampleData: {\n      title: 'Sample Task',\n      description: 'Sample task description',\n      dueDate: '2024-12-31T23:59:59Z',\n    },\n  },\n  \n  auth: {\n    validCredentials: {\n      email: 'test@example.com',\n      password: 'password123',\n    },\n    invalidCredentials: {\n      email: 'invalid@example.com',\n      password: 'wrongpassword',\n    },\n  },\n  \n  users: {\n    roles: ['user', 'admin', 'moderator'] as const,\n    sampleData: {\n      name: 'Test User',\n      email: 'test@example.com',\n    },\n  },\n};\n\nexport default testConfig; ","usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app/task-beacon-app-cursor/task-beacon-app/src/test/integration/setup.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":76,"column":52,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":76,"endColumn":55,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2192,2195],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2192,2195],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":107,"column":10,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":107,"endColumn":13,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2962,2965],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2962,2965],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":111,"column":62,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":111,"endColumn":65,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3038,3041],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3038,3041],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":125,"column":57,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":125,"endColumn":60,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3526,3529],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3526,3529],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import '@testing-library/jest-dom';\nimport { vi } from 'vitest';\nimport { supabase } from '@/integrations/supabase/client';\nimport type { User } from '@supabase/supabase-js';\n\n/**\n * Integration test setup\n * Configures mocks and utilities for testing complete workflows\n */\n\n// Mock Supabase client for integration tests\nvi.mock('@/integrations/supabase/client', () => ({\n  supabase: {\n    auth: {\n      getUser: vi.fn(),\n      signInWithPassword: vi.fn(),\n      signUp: vi.fn(),\n      signOut: vi.fn(),\n      resetPasswordForEmail: vi.fn(),\n      onAuthStateChange: vi.fn(() => ({ data: { subscription: { unsubscribe: vi.fn() } } })),\n    },\n    from: vi.fn(() => ({\n      select: vi.fn().mockReturnThis(),\n      insert: vi.fn().mockReturnThis(),\n      update: vi.fn().mockReturnThis(),\n      delete: vi.fn().mockReturnThis(),\n      eq: vi.fn().mockReturnThis(),\n      neq: vi.fn().mockReturnThis(),\n      gt: vi.fn().mockReturnThis(),\n      lt: vi.fn().mockReturnThis(),\n      gte: vi.fn().mockReturnThis(),\n      lte: vi.fn().mockReturnThis(),\n      like: vi.fn().mockReturnThis(),\n      ilike: vi.fn().mockReturnThis(),\n      in: vi.fn().mockReturnThis(),\n      order: vi.fn().mockReturnThis(),\n      limit: vi.fn().mockReturnThis(),\n      range: vi.fn().mockReturnThis(),\n      single: vi.fn(),\n      maybeSingle: vi.fn(),\n    })),\n    channel: vi.fn(() => ({\n      on: vi.fn().mockReturnThis(),\n      subscribe: vi.fn(() => 'subscribed'),\n      unsubscribe: vi.fn(),\n    })),\n    removeChannel: vi.fn(),\n  },\n}));\n\n// Mock toast notifications for integration tests\nvi.mock('@/hooks/use-toast', () => ({\n  toast: {\n    success: vi.fn(),\n    error: vi.fn(),\n    info: vi.fn(),\n    warning: vi.fn(),\n  },\n  useToast: () => ({\n    toast: vi.fn(),\n  }),\n}));\n\n// Mock navigation for integration tests\nvi.mock('react-router-dom', async () => {\n  const actual = await vi.importActual('react-router-dom');\n  return {\n    ...actual,\n    useNavigate: () => vi.fn(),\n    useParams: () => ({ id: 'test-id' }),\n    useLocation: () => ({ pathname: '/', search: '', hash: '', state: null }),\n  };\n});\n\n// Global test utilities for integration tests\nexport const mockApiResponse = <T>(data: T, error: any = null) => ({\n  data,\n  error,\n  status: error ? 400 : 200,\n  statusText: error ? 'Bad Request' : 'OK',\n});\n\nexport const mockSuccessfulAuth = (userOverrides: Partial<User> = {}) => {\n  const mockUser: User = {\n    id: 'test-user',\n    email: 'test@example.com',\n    app_metadata: {},\n    user_metadata: {},\n    aud: 'authenticated',\n    created_at: '2024-01-01T00:00:00Z',\n    ...userOverrides,\n  };\n\n  vi.mocked(supabase.auth.getUser).mockResolvedValue({\n    data: { user: mockUser },\n    error: null,\n  });\n};\n\nexport const mockFailedAuth = (errorMessage = 'Authentication failed') => {\n  vi.mocked(supabase.auth.getUser).mockResolvedValue({\n    data: { user: null },\n    error: {\n      message: errorMessage,\n      name: 'AuthError',\n      status: 401,\n    } as any,\n  });\n};\n\nexport const mockDatabaseQuery = (tableName: string, result: any) => {\n  const mockChain = {\n    select: vi.fn().mockReturnThis(),\n    insert: vi.fn().mockReturnThis(),\n    update: vi.fn().mockReturnThis(),\n    delete: vi.fn().mockReturnThis(),\n    eq: vi.fn().mockReturnThis(),\n    neq: vi.fn().mockReturnThis(),\n    order: vi.fn().mockReturnThis(),\n    limit: vi.fn().mockReturnThis(),\n    single: vi.fn().mockResolvedValue(result),\n    maybeSingle: vi.fn().mockResolvedValue(result),\n  };\n\n  vi.mocked(supabase.from).mockReturnValue(mockChain as any);\n  return mockChain;\n};\n\n// Test data factories for integration tests\nexport const createTestUser = (overrides = {}) => ({\n  id: 'test-user-id',\n  email: 'test@example.com',\n  name: 'Test User',\n  avatar_url: null,\n  role: 'user',\n  is_active: true,\n  created_at: '2024-01-01T00:00:00Z',\n  updated_at: '2024-01-01T00:00:00Z',\n  ...overrides,\n});\n\nexport const createTestTask = (overrides = {}) => ({\n  id: 'test-task-id',\n  title: 'Test Task',\n  description: 'Test task description',\n  status: 'pending' as const,\n  priority: 'medium' as const,\n  due_date: '2024-12-31T23:59:59Z',\n  owner_id: 'test-user-id',\n  assignee_id: null,\n  parent_task_id: null,\n  parent_task: null,\n  pinned: false,\n  url_link: null,\n  photo_url: null,\n  created_at: '2024-01-01T00:00:00Z',\n  updated_at: '2024-01-01T00:00:00Z',\n  ...overrides,\n});\n\nexport const setupIntegrationTest = () => {\n  // Reset all mocks before each integration test\n  vi.clearAllMocks();\n  \n  // Setup default successful auth\n  mockSuccessfulAuth();\n  \n  // Return cleanup function\n  return () => {\n    vi.clearAllMocks();\n  };\n}; ","usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app/task-beacon-app-cursor/task-beacon-app/src/test/setup.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app/task-beacon-app-cursor/task-beacon-app/src/test/testUtils.ts","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: Unterminated regular expression literal.","line":86,"column":37}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { ReactElement, ReactNode } from 'react';\nimport { render, RenderOptions } from '@testing-library/react';\nimport { QueryClient, QueryClientProvider } from '@tanstack/react-query';\nimport { BrowserRouter } from 'react-router-dom';\nimport { ThemeProvider } from '@/contexts/ThemeContext';\nimport { vi, expect } from 'vitest';\nimport { Task, User, TaskStatus, TaskPriority } from '@/types';\n\n/**\n * Configuration options for test utilities\n */\ninterface TestUtilsOptions {\n  /** Initial route for router tests */\n  initialRoute?: string;\n  /** Custom QueryClient for React Query tests */\n  queryClient?: QueryClient;\n  /** Whether to include auth context */\n  withAuth?: boolean;\n  /** Mock user for auth context */\n  mockUser?: User | null;\n}\n\n/**\n * Creates a QueryClient optimized for testing\n * Disables retries and caching for faster, more predictable tests\n */\nexport function createTestQueryClient(): QueryClient {\n  return new QueryClient({\n    defaultOptions: {\n      queries: {\n        retry: false,\n        gcTime: 0,\n        staleTime: 0,\n      },\n      mutations: {\n        retry: false,\n      },\n    },\n    logger: {\n      // Disable console logs during tests\n      log: vi.fn(),\n      warn: vi.fn(),\n      error: vi.fn(),\n    },\n  });\n}\n\n/**\n * Mock implementation of the AuthContext\n */\nexport const mockAuthContext = {\n  user: null,\n  loading: false,\n  signIn: vi.fn(),\n  signUp: vi.fn(),\n  signOut: vi.fn(),\n  resetPassword: vi.fn(),\n};\n\n/**\n * Wrapper component that provides all necessary contexts for testing\n */\ninterface AllProvidersProps {\n  children: ReactNode;\n  options?: TestUtilsOptions;\n}\n\nfunction AllProviders({ children, options = {} }: AllProvidersProps) {\n  const {\n    initialRoute = '/',\n    queryClient = createTestQueryClient(),\n    withAuth = false,\n    mockUser = null,\n  } = options;\n\n  // Mock AuthContext if needed\n  const authContextValue = withAuth\n    ? { ...mockAuthContext, user: mockUser }\n    : mockAuthContext;\n\n  const RouterWrapper = ({ children }: { children: ReactNode }) => {\n    // Set initial route if specified\n    if (initialRoute !== '/') {\n      window.history.pushState({}, 'Test page', initialRoute);\n    }\n    return <BrowserRouter>{children}</BrowserRouter>;\n  };\n\n  return (\n    <QueryClientProvider client={queryClient}>\n      <ThemeProvider>\n        <RouterWrapper>\n          {withAuth ? (\n            // Mock AuthProvider would go here\n            <div data-testid=\"mock-auth-provider\">\n              {children}\n            </div>\n          ) : (\n            children\n          )}\n        </RouterWrapper>\n      </ThemeProvider>\n    </QueryClientProvider>\n  );\n}\n\n/**\n * Custom render function that includes all necessary providers\n * \n * @param ui - The component to render\n * @param options - Render options and test utilities configuration\n * @returns Render result with additional utilities\n * \n * @example\n * ```typescript\n * const { getByText, queryClient } = renderWithProviders(\n *   <MyComponent />,\n *   { withAuth: true, mockUser: createMockUser() }\n * );\n * ```\n */\nexport function renderWithProviders(\n  ui: ReactElement,\n  {\n    testUtilsOptions = {},\n    ...renderOptions\n  }: RenderOptions & { testUtilsOptions?: TestUtilsOptions } = {}\n) {\n  const queryClient = testUtilsOptions.queryClient || createTestQueryClient();\n\n  const Wrapper = ({ children }: { children: ReactNode }) => (\n    <AllProviders options={{ ...testUtilsOptions, queryClient }}>\n      {children}\n    </AllProviders>\n  );\n\n  const result = render(ui, { wrapper: Wrapper, ...renderOptions });\n\n  return {\n    ...result,\n    queryClient,\n    // Helper to rerender with new props\n    rerender: (ui: ReactElement) =>\n      result.rerender(<AllProviders options={testUtilsOptions}>{ui}</AllProviders>),\n  };\n}\n\n/**\n * Factory function to create mock User objects\n */\nexport function createMockUser(overrides: Partial<User> = {}): User {\n  return {\n    id: 'mock-user-id',\n    email: 'test@example.com',\n    name: 'Test User',\n    avatar_url: 'https://example.com/avatar.jpg',\n    role: 'user',\n    created_at: '2024-01-01T00:00:00Z',\n    updated_at: '2024-01-01T00:00:00Z',\n    ...overrides,\n  };\n}\n\n/**\n * Factory function to create mock Task objects\n */\nexport function createMockTask(overrides: Partial<Task> = {}): Task {\n  return {\n    id: 'mock-task-id',\n    title: 'Test Task',\n    description: 'Test task description',\n    status: 'pending' as TaskStatus,\n    priority: 'medium' as TaskPriority,\n    due_date: '2024-12-31T23:59:59Z',\n    owner_id: 'mock-user-id',\n    assigned_to: null,\n    parent_task_id: null,\n    pinned: false,\n    url_link: null,\n    photo_url: null,\n    created_at: '2024-01-01T00:00:00Z',\n    updated_at: '2024-01-01T00:00:00Z',\n    ...overrides,\n  };\n}\n\n/**\n * Factory function to create multiple mock tasks\n */\nexport function createMockTasks(count: number, baseOverrides: Partial<Task> = {}): Task[] {\n  return Array.from({ length: count }, (_, index) =>\n    createMockTask({\n      ...baseOverrides,\n      id: `mock-task-${index + 1}`,\n      title: `Test Task ${index + 1}`,\n    })\n  );\n}\n\n/**\n * Mock API responses for common operations\n */\nexport const mockApiResponses = {\n  success: <T>(data: T) => ({ data, error: null }),\n  error: (message: string) => ({ data: null, error: new Error(message) }),\n  \n  // Common success responses\n  taskCreated: (task: Task) => mockApiResponses.success(task),\n  taskUpdated: (task: Task) => mockApiResponses.success(task),\n  taskDeleted: () => mockApiResponses.success(null),\n  \n  userFetched: (user: User) => mockApiResponses.success(user),\n  userUpdated: (user: User) => mockApiResponses.success(user),\n  \n  // Common error responses\n  unauthorized: () => mockApiResponses.error('Unauthorized'),\n  notFound: () => mockApiResponses.error('Not found'),\n  serverError: () => mockApiResponses.error('Internal server error'),\n};\n\n/**\n * Mock localStorage for tests that need browser storage\n */\nexport function mockLocalStorage() {\n  const store: Record<string, string> = {};\n\n  return {\n    getItem: vi.fn((key: string) => store[key] || null),\n    setItem: vi.fn((key: string, value: string) => {\n      store[key] = value;\n    }),\n    removeItem: vi.fn((key: string) => {\n      delete store[key];\n    }),\n    clear: vi.fn(() => {\n      Object.keys(store).forEach(key => delete store[key]);\n    }),\n    length: Object.keys(store).length,\n    key: vi.fn((index: number) => Object.keys(store)[index] || null),\n  };\n}\n\n/**\n * Mock setTimeout and setInterval for timer-based tests\n */\nexport function mockTimers() {\n  vi.useFakeTimers();\n  \n  return {\n    advanceTimersByTime: (ms: number) => vi.advanceTimersByTime(ms),\n    runAllTimers: () => vi.runAllTimers(),\n    runOnlyPendingTimers: () => vi.runOnlyPendingTimers(),\n    restore: () => vi.useRealTimers(),\n  };\n}\n\n/**\n * Utility to wait for async operations in tests\n */\nexport function waitFor<T>(\n  callback: () => T | Promise<T>,\n  options: { timeout?: number; interval?: number } = {}\n): Promise<T> {\n  const { timeout = 1000, interval = 50 } = options;\n  \n  return new Promise((resolve, reject) => {\n    const startTime = Date.now();\n    \n    const check = async () => {\n      try {\n        const result = await callback();\n        resolve(result);\n      } catch (error) {\n        if (Date.now() - startTime >= timeout) {\n          reject(new Error(`Timeout after ${timeout}ms: ${error}`));\n        } else {\n          setTimeout(check, interval);\n        }\n      }\n    };\n    \n    check();\n  });\n}\n\n/**\n * Helper to create mock form events\n */\nexport function createMockEvent(\n  type: string,\n  target: Partial<HTMLInputElement> = {}\n): React.ChangeEvent<HTMLInputElement> {\n  return {\n    type,\n    target: {\n      value: '',\n      name: '',\n      ...target,\n    } as HTMLInputElement,\n    currentTarget: target as HTMLInputElement,\n    preventDefault: vi.fn(),\n    stopPropagation: vi.fn(),\n  } as React.ChangeEvent<HTMLInputElement>;\n}\n\n/**\n * Helper to create mock keyboard events\n */\nexport function createMockKeyboardEvent(\n  key: string,\n  options: Partial<KeyboardEvent> = {}\n): KeyboardEvent {\n  return {\n    key,\n    code: key,\n    which: key.charCodeAt(0),\n    keyCode: key.charCodeAt(0),\n    shiftKey: false,\n    ctrlKey: false,\n    altKey: false,\n    metaKey: false,\n    preventDefault: vi.fn(),\n    stopPropagation: vi.fn(),\n    ...options,\n  } as KeyboardEvent;\n}\n\n/**\n * Assert that a function is called with specific arguments\n */\nexport function expectToHaveBeenCalledWith<T extends (...args: any[]) => any>(\n  mockFn: T,\n  ...expectedArgs: Parameters<T>\n) {\n  expect(mockFn).toHaveBeenCalledWith(...expectedArgs);\n}\n\n/**\n * Assert that an element has specific accessibility attributes\n */\nexport function expectAccessibilityAttributes(\n  element: HTMLElement,\n  attributes: Record<string, string | null>\n) {\n  Object.entries(attributes).forEach(([attr, expectedValue]) => {\n    if (expectedValue === null) {\n      expect(element).not.toHaveAttribute(attr);\n    } else {\n      expect(element).toHaveAttribute(attr, expectedValue);\n    }\n  });\n}\n\n// Re-export commonly used testing utilities\nexport * from '@testing-library/react';\nexport { vi } from 'vitest'; ","usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app/task-beacon-app-cursor/task-beacon-app/src/test/utils/testingHelpers.ts","messages":[{"ruleId":"@typescript-eslint/no-unsafe-function-type","severity":2,"message":"The `Function` type accepts any function-like value.\nPrefer explicitly defining any function parameters and return type.","line":46,"column":19,"nodeType":"Identifier","messageId":"bannedFunctionType","endLine":46,"endColumn":27},{"ruleId":"@typescript-eslint/no-unsafe-function-type","severity":2,"message":"The `Function` type accepts any function-like value.\nPrefer explicitly defining any function parameters and return type.","line":50,"column":19,"nodeType":"Identifier","messageId":"bannedFunctionType","endLine":50,"endColumn":27},{"ruleId":"@typescript-eslint/no-unsafe-function-type","severity":2,"message":"The `Function` type accepts any function-like value.\nPrefer explicitly defining any function parameters and return type.","line":61,"column":19,"nodeType":"Identifier","messageId":"bannedFunctionType","endLine":61,"endColumn":27},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":210,"column":38,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":210,"endColumn":41,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5757,5760],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5757,5760],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":213,"column":51,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":213,"endColumn":54,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5841,5844],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5841,5844],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":221,"column":32,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":221,"endColumn":35,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6083,6086],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6083,6086],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":312,"column":10,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":312,"endColumn":13,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8289,8292],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8289,8292],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":7,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { vi } from 'vitest';\nimport { QueryClient } from '@tanstack/react-query';\nimport { Task, User, TaskStatus, TaskPriority } from '@/types';\n\n/**\n * Advanced testing utilities for complex scenarios\n */\n\n/**\n * Creates a mock QueryClient with custom configuration for specific test scenarios\n */\nexport function createMockQueryClient(config: {\n  enableRetries?: boolean;\n  networkDelay?: number;\n  cacheTime?: number;\n} = {}) {\n  const { enableRetries = false, networkDelay = 0, cacheTime = 0 } = config;\n\n  return new QueryClient({\n    defaultOptions: {\n      queries: {\n        retry: enableRetries ? 3 : false,\n        gcTime: cacheTime,\n        staleTime: cacheTime,\n        networkMode: 'always',\n      },\n      mutations: {\n        retry: enableRetries ? 3 : false,\n        networkMode: 'always',\n      },\n    },\n    logger: {\n      log: vi.fn(),\n      warn: vi.fn(),\n      error: vi.fn(),\n    },\n  });\n}\n\n/**\n * Simulates network conditions for testing\n */\nexport function simulateNetworkConditions(condition: 'slow' | 'unstable' | 'offline') {\n  switch (condition) {\n    case 'slow':\n      return (fn: Function) => new Promise(resolve => \n        setTimeout(() => resolve(fn()), 2000)\n      );\n    case 'unstable':\n      return (fn: Function) => {\n        if (Math.random() < 0.3) {\n          throw new Error('Network timeout');\n        }\n        return fn();\n      };\n    case 'offline':\n      return () => {\n        throw new Error('Network unavailable');\n      };\n    default:\n      return (fn: Function) => fn();\n  }\n}\n\n/**\n * Creates mock tasks with realistic data patterns\n */\nexport function createMockTaskBatch(count: number, options: {\n  status?: TaskStatus;\n  priority?: TaskPriority;\n  ownerId?: string;\n  assigneeId?: string;\n  withDueDates?: boolean;\n  overdue?: boolean;\n} = {}): Task[] {\n  const {\n    status = 'pending',\n    priority = 'medium',\n    ownerId = 'mock-owner',\n    assigneeId = null,\n    withDueDates = true,\n    overdue = false,\n  } = options;\n\n  return Array.from({ length: count }, (_, index) => {\n    const dueDate = withDueDates \n      ? overdue \n        ? '2023-12-31T23:59:59Z' // Past date for overdue\n        : '2025-12-31T23:59:59Z' // Future date\n      : null;\n\n    return {\n      id: `mock-task-${index + 1}`,\n      title: `Mock Task ${index + 1}`,\n      description: `Description for mock task ${index + 1}`,\n      status,\n      priority,\n      due_date: dueDate,\n      owner_id: ownerId,\n      assignee_id: assigneeId,\n      parent_task_id: null,\n      pinned: index % 3 === 0, // Every third task is pinned\n      url_link: index % 4 === 0 ? 'https://example.com' : null,\n      photo_url: index % 5 === 0 ? 'https://example.com/photo.jpg' : null,\n      created_at: '2024-01-01T00:00:00Z',\n      updated_at: '2024-01-01T00:00:00Z',\n      parent_task: null,\n    };\n  });\n}\n\n/**\n * Creates realistic user test data\n */\nexport function createMockUserBatch(count: number, options: {\n  role?: string;\n  verified?: boolean;\n} = {}): User[] {\n  const { role = 'user', verified = true } = options;\n\n  return Array.from({ length: count }, (_, index) => ({\n    id: `mock-user-${index + 1}`,\n    email: `user${index + 1}@example.com`,\n    name: `Test User ${index + 1}`,\n    avatar_url: index % 2 === 0 ? `https://example.com/avatar${index + 1}.jpg` : null,\n    role,\n    created_at: '2024-01-01T00:00:00Z',\n    updated_at: '2024-01-01T00:00:00Z',\n  }));\n}\n\n/**\n * Mock error scenarios for testing error handling\n */\nexport const mockErrorScenarios = {\n  networkError: () => new Error('Network request failed'),\n  authError: () => ({ message: 'Authentication failed', code: 'AUTH_ERROR' }),\n  validationError: () => ({ message: 'Validation failed', code: 'VALIDATION_ERROR' }),\n  serverError: () => ({ message: 'Internal server error', code: 'SERVER_ERROR' }),\n  notFoundError: () => ({ message: 'Resource not found', code: 'NOT_FOUND' }),\n  permissionError: () => ({ message: 'Permission denied', code: 'PERMISSION_DENIED' }),\n};\n\n/**\n * Performance testing utilities\n */\nexport function measurePerformance<T>(fn: () => T | Promise<T>): Promise<{\n  result: T;\n  duration: number;\n}> {\n  const start = performance.now();\n  const result = fn();\n  \n  if (result instanceof Promise) {\n    return result.then(res => ({\n      result: res,\n      duration: performance.now() - start,\n    }));\n  }\n  \n  return Promise.resolve({\n    result,\n    duration: performance.now() - start,\n  });\n}\n\n/**\n * Utility to test component accessibility\n */\nexport function checkAccessibility(element: HTMLElement) {\n  const checks = {\n    hasProperRole: !!element.getAttribute('role'),\n    hasAriaLabel: !!element.getAttribute('aria-label') || !!element.getAttribute('aria-labelledby'),\n    isFocusable: element.tabIndex >= 0 || ['button', 'input', 'select', 'textarea', 'a'].includes(element.tagName.toLowerCase()),\n    hasKeyboardSupport: element.hasAttribute('onKeyDown') || element.hasAttribute('onKeyPress'),\n  };\n\n  return {\n    isAccessible: Object.values(checks).every(Boolean),\n    details: checks,\n  };\n}\n\n/**\n * Mock localStorage for testing\n */\nexport function mockLocalStorageImplementation() {\n  const store: Record<string, string> = {};\n  \n  return {\n    getItem: vi.fn((key: string) => store[key] || null),\n    setItem: vi.fn((key: string, value: string) => {\n      store[key] = value.toString();\n    }),\n    removeItem: vi.fn((key: string) => {\n      delete store[key];\n    }),\n    clear: vi.fn(() => {\n      Object.keys(store).forEach(key => delete store[key]);\n    }),\n    length: Object.keys(store).length,\n    key: vi.fn((index: number) => Object.keys(store)[index] || null),\n  };\n}\n\n/**\n * Utility for testing real-time features\n */\nexport function createMockRealtimeChannel() {\n  const subscribers: Array<(payload: any) => void> = [];\n  \n  return {\n    on: vi.fn((event: string, callback: (payload: any) => void) => {\n      subscribers.push(callback);\n    }),\n    off: vi.fn(),\n    subscribe: vi.fn(() => 'subscribed'),\n    unsubscribe: vi.fn(),\n    send: vi.fn(),\n    // Utility to simulate incoming messages\n    simulateMessage: (payload: any) => {\n      subscribers.forEach(callback => callback(payload));\n    },\n  };\n}\n\n/**\n * Utility for testing form interactions\n */\nexport function simulateFormInteraction(form: HTMLFormElement, data: Record<string, string>) {\n  Object.entries(data).forEach(([name, value]) => {\n    const field = form.querySelector(`[name=\"${name}\"]`) as HTMLInputElement;\n    if (field) {\n      field.value = value;\n      field.dispatchEvent(new Event('change', { bubbles: true }));\n    }\n  });\n  \n  form.dispatchEvent(new Event('submit', { bubbles: true }));\n}\n\n/**\n * Utility for testing async operations with timeout\n */\nexport function withTimeout<T>(\n  promise: Promise<T>, \n  timeoutMs: number = 5000,\n  timeoutMessage = 'Operation timed out'\n): Promise<T> {\n  const timeoutPromise = new Promise<never>((_, reject) => {\n    setTimeout(() => reject(new Error(timeoutMessage)), timeoutMs);\n  });\n  \n  return Promise.race([promise, timeoutPromise]);\n}\n\n/**\n * Utility for testing pagination\n */\nexport function createMockPaginatedResponse<T>(\n  data: T[],\n  page: number,\n  pageSize: number\n) {\n  const startIndex = (page - 1) * pageSize;\n  const endIndex = startIndex + pageSize;\n  const paginatedData = data.slice(startIndex, endIndex);\n  \n  return {\n    data: paginatedData,\n    pagination: {\n      currentPage: page,\n      pageSize,\n      totalCount: data.length,\n      totalPages: Math.ceil(data.length / pageSize),\n      hasNextPage: endIndex < data.length,\n      hasPreviousPage: page > 1,\n    },\n  };\n}\n\n/**\n * Utility for testing optimistic updates\n */\nexport function createOptimisticUpdateTester<T>() {\n  let currentData: T[] = [];\n  let rollbackData: T[] = [];\n  \n  return {\n    setInitialData: (data: T[]) => {\n      currentData = [...data];\n      rollbackData = [...data];\n    },\n    applyOptimisticUpdate: (updater: (data: T[]) => T[]) => {\n      currentData = updater([...currentData]);\n    },\n    confirmUpdate: () => {\n      rollbackData = [...currentData];\n    },\n    rollback: () => {\n      currentData = [...rollbackData];\n    },\n    getCurrentData: () => [...currentData],\n  };\n}\n\n/**\n * Database query result mock factory\n */\nexport function createMockQueryResult<T>(\n  data: T | null,\n  error: any = null,\n  loading = false\n) {\n  return {\n    data,\n    error,\n    loading,\n    refetch: vi.fn(),\n    isFetching: loading,\n    isLoading: loading,\n    isError: !!error,\n    isSuccess: !error && !loading,\n  };\n}","usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app/task-beacon-app-cursor/task-beacon-app/src/types/api.types.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app/task-beacon-app-cursor/task-beacon-app/src/types/feature-types/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app/task-beacon-app-cursor/task-beacon-app/src/types/feature-types/task.types.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app/task-beacon-app-cursor/task-beacon-app/src/types/feature-types/user.types.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app/task-beacon-app-cursor/task-beacon-app/src/types/form.types.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app/task-beacon-app-cursor/task-beacon-app/src/types/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app/task-beacon-app-cursor/task-beacon-app/src/types/shared.types.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app/task-beacon-app-cursor/task-beacon-app/src/types/shared/api.types.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app/task-beacon-app-cursor/task-beacon-app/src/types/shared/auth.types.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app/task-beacon-app-cursor/task-beacon-app/src/types/shared/common.types.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app/task-beacon-app-cursor/task-beacon-app/src/types/shared/database.types.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app/task-beacon-app-cursor/task-beacon-app/src/types/shared/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app/task-beacon-app-cursor/task-beacon-app/src/types/shared/ui.types.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app/task-beacon-app-cursor/task-beacon-app/src/types/utility/form.types.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":9,"column":47,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":9,"endColumn":50,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[241,244],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[241,244],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":19,"column":57,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":19,"endColumn":60,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[496,499],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[496,499],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":29,"column":10,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":29,"endColumn":13,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[757,760],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[757,760],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":35,"column":33,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":35,"endColumn":36,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[853,856],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[853,856],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":47,"column":37,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":47,"endColumn":40,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1083,1086],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1083,1086],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":60,"column":49,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":60,"endColumn":52,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1389,1392],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1389,1392],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":71,"column":48,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":71,"endColumn":51,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1668,1671],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1668,1671],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":83,"column":49,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":83,"endColumn":52,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2070,2073],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2070,2073],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":87,"column":42,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":87,"endColumn":45,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2292,2295],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2292,2295],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":103,"column":43,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":103,"endColumn":46,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2734,2737],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2734,2737],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":111,"column":40,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":111,"endColumn":43,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2891,2894],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2891,2894],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":121,"column":38,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":121,"endColumn":41,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3205,3208],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3205,3208],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":133,"column":34,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":133,"endColumn":37,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3438,3441],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3438,3441],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":142,"column":28,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":142,"endColumn":31,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3647,3650],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3647,3650],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":152,"column":52,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":152,"endColumn":55,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3898,3901],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3898,3901],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":159,"column":38,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":159,"endColumn":41,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4098,4101],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4098,4101],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":184,"column":35,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":184,"endColumn":38,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4710,4713],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4710,4713],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":240,"column":54,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":240,"endColumn":57,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5999,6002],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5999,6002],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":18,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Form Utility Types\n * \n * Comprehensive types for form management, validation, and state handling.\n * Used across all form components and form-related hooks.\n */\n\n// Form state management\nexport interface FormState<T = Record<string, any>> {\n  values: T;\n  errors: Partial<Record<keyof T, string>>;\n  touched: Partial<Record<keyof T, boolean>>;\n  isSubmitting: boolean;\n  isValid: boolean;\n  isDirty: boolean;\n  initialValues: T;\n}\n\nexport interface UseFormStateOptions<T = Record<string, any>> {\n  initialValues: T;\n  validate?: (values: T) => Partial<Record<keyof T, string>>;\n  validateOnChange?: boolean;\n  validateOnBlur?: boolean;\n  onSubmit?: (values: T) => Promise<void> | void;\n}\n\n// Field-level types\nexport interface FieldState {\n  value: any;\n  error?: string;\n  touched: boolean;\n  dirty: boolean;\n}\n\nexport interface FieldProps<T = any> {\n  name: string;\n  value: T;\n  onChange: (value: T) => void;\n  onBlur: () => void;\n  error?: string;\n  touched: boolean;\n  disabled?: boolean;\n  required?: boolean;\n}\n\n// Validation types\nexport interface ValidationRule<T = any> {\n  required?: boolean;\n  minLength?: number;\n  maxLength?: number;\n  min?: number;\n  max?: number;\n  pattern?: RegExp;\n  email?: boolean;\n  url?: boolean;\n  custom?: (value: T) => string | null;\n  asyncCustom?: (value: T) => Promise<string | null>;\n}\n\nexport type ValidationSchema<T = Record<string, any>> = {\n  [K in keyof T]?: ValidationRule<T[K]> | ValidationRule<T[K]>[];\n};\n\nexport interface ValidationResult {\n  isValid: boolean;\n  errors: Record<string, string>;\n  warnings?: Record<string, string>;\n}\n\n// Form configuration\nexport interface FormConfig<T = Record<string, any>> {\n  initialValues: T;\n  validationSchema?: ValidationSchema<T>;\n  validateOnChange?: boolean;\n  validateOnBlur?: boolean;\n  validateOnMount?: boolean;\n  enableReinitialize?: boolean;\n  onSubmit: (values: T, helpers: FormHelpers<T>) => Promise<void> | void;\n  onReset?: (values: T) => void;\n  onValuesChange?: (values: T, prevValues: T) => void;\n}\n\nexport interface FormHelpers<T = Record<string, any>> {\n  setSubmitting: (isSubmitting: boolean) => void;\n  setErrors: (errors: Partial<Record<keyof T, string>>) => void;\n  setFieldError: (field: keyof T, error: string) => void;\n  setFieldValue: (field: keyof T, value: any) => void;\n  setValues: (values: T) => void;\n  resetForm: (nextInitialValues?: T) => void;\n  validateForm: () => Promise<ValidationResult>;\n  validateField: (field: keyof T) => Promise<string | null>;\n}\n\n// Form submission types\nexport interface FormSubmissionState {\n  isSubmitting: boolean;\n  isSubmitted: boolean;\n  submitCount: number;\n  errors: Record<string, string>;\n  success: boolean;\n}\n\nexport interface FormSubmissionResult<T = any> {\n  success: boolean;\n  data?: T;\n  errors?: Record<string, string>;\n  message?: string;\n}\n\n// Field array types\nexport interface FieldArrayHelpers<T = any> {\n  push: (value: T) => void;\n  pop: () => void;\n  insert: (index: number, value: T) => void;\n  remove: (index: number) => void;\n  move: (from: number, to: number) => void;\n  swap: (indexA: number, indexB: number) => void;\n  replace: (index: number, value: T) => void;\n}\n\nexport interface FieldArrayProps<T = any> {\n  name: string;\n  values: T[];\n  helpers: FieldArrayHelpers<T>;\n  error?: string;\n}\n\n// Multi-step form types\nexport interface FormStep {\n  id: string;\n  title: string;\n  description?: string;\n  component: React.ComponentType<any>;\n  validationSchema?: ValidationSchema;\n  isOptional?: boolean;\n  canSkip?: boolean;\n}\n\nexport interface MultiStepFormState {\n  currentStep: number;\n  completedSteps: number[];\n  formData: Record<string, any>;\n  isValid: boolean;\n  isLastStep: boolean;\n  isFirstStep: boolean;\n}\n\nexport interface MultiStepFormHelpers {\n  nextStep: () => void;\n  prevStep: () => void;\n  goToStep: (step: number) => void;\n  setStepData: (step: number, data: Record<string, any>) => void;\n  validateCurrentStep: () => Promise<boolean>;\n  submitForm: () => Promise<void>;\n}\n\n// Conditional field types\nexport interface ConditionalField {\n  condition: (values: Record<string, any>) => boolean;\n  fields: string[];\n  action: 'show' | 'hide' | 'enable' | 'disable' | 'require';\n}\n\nexport interface DynamicFormConfig {\n  baseFields: string[];\n  conditionalFields: ConditionalField[];\n  dependencies: Record<string, string[]>;\n}\n\n// Form persistence types\nexport interface FormPersistenceConfig {\n  key: string;\n  storage: 'localStorage' | 'sessionStorage';\n  include?: string[];\n  exclude?: string[];\n  debounceMs?: number;\n  encrypt?: boolean;\n}\n\n// Auto-save types\nexport interface AutoSaveConfig {\n  enabled: boolean;\n  interval: number; // milliseconds\n  onSave: (values: Record<string, any>) => Promise<void>;\n  onError?: (error: Error) => void;\n  skipValidation?: boolean;\n}\n\nexport interface AutoSaveState {\n  isSaving: boolean;\n  lastSaved?: Date;\n  error?: string;\n  saveCount: number;\n}\n\n// Form accessibility types\nexport interface FormAccessibilityConfig {\n  announceErrors: boolean;\n  announceSuccess: boolean;\n  focusOnError: boolean;\n  keyboardNavigation: boolean;\n  ariaLabels: Record<string, string>;\n}\n\n// Form optimization types\nexport interface FormOptimizationConfig {\n  debounceValidation: number;\n  throttleSubmission: number;\n  memoizeValidation: boolean;\n  lazyValidation: boolean;\n  asyncValidationTimeout: number;\n}\n\n// Form analytics types\nexport interface FormAnalytics {\n  startTime: Date;\n  endTime?: Date;\n  fieldInteractions: Record<string, number>;\n  validationErrors: Record<string, number>;\n  abandonmentPoint?: string;\n  completionTime?: number;\n  submitAttempts: number;\n}\n\n// Error types specific to forms\nexport interface FormError {\n  field?: string;\n  message: string;\n  type: 'validation' | 'submission' | 'network' | 'server';\n  code?: string;\n}\n\nexport interface FormErrorBoundaryState {\n  hasError: boolean;\n  error?: Error;\n  errorInfo?: React.ErrorInfo;\n}\n\n// Form context types\nexport interface FormContextValue<T = Record<string, any>> {\n  formState: FormState<T>;\n  formHelpers: FormHelpers<T>;\n  formConfig: FormConfig<T>;\n  submitForm: () => Promise<void>;\n  resetForm: () => void;\n  validateForm: () => Promise<ValidationResult>;\n} ","usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app/task-beacon-app-cursor/task-beacon-app/src/types/utility/helpers.types.ts","messages":[{"ruleId":"@typescript-eslint/no-unsafe-function-type","severity":2,"message":"The `Function` type accepts any function-like value.\nPrefer explicitly defining any function parameters and return type.","line":189,"column":20,"nodeType":"Identifier","messageId":"bannedFunctionType","endLine":189,"endColumn":28}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * TypeScript Helper Types\n * \n * Advanced TypeScript utility types and type helpers for better type safety\n * and developer experience across the application.\n */\n\n// Utility type helpers\nexport type DeepPartial<T> = {\n  [P in keyof T]?: T[P] extends object ? DeepPartial<T[P]> : T[P];\n};\n\nexport type DeepRequired<T> = {\n  [P in keyof T]-?: T[P] extends object ? DeepRequired<T[P]> : T[P];\n};\n\nexport type DeepReadonly<T> = {\n  readonly [P in keyof T]: T[P] extends object ? DeepReadonly<T[P]> : T[P];\n};\n\nexport type Mutable<T> = {\n  -readonly [P in keyof T]: T[P];\n};\n\n// Key manipulation types\nexport type StringKeys<T> = Extract<keyof T, string>;\nexport type NumberKeys<T> = Extract<keyof T, number>;\nexport type SymbolKeys<T> = Extract<keyof T, symbol>;\n\nexport type KeysOfType<T, U> = {\n  [K in keyof T]: T[K] extends U ? K : never;\n}[keyof T];\n\nexport type OptionalKeys<T> = {\n  [K in keyof T]-?: Record<string, never> extends Pick<T, K> ? K : never;\n}[keyof T];\n\nexport type RequiredKeys<T> = {\n  [K in keyof T]-?: Record<string, never> extends Pick<T, K> ? never : K;\n}[keyof T];\n\n// Object manipulation types\nexport type Merge<T, U> = Omit<T, keyof U> & U;\n\nexport type Override<T, U> = Omit<T, keyof U> & U;\n\nexport type PartialExcept<T, K extends keyof T> = Partial<T> & Pick<T, K>;\n\nexport type RequiredExcept<T, K extends keyof T> = Required<T> & Partial<Pick<T, K>>;\n\nexport type OmitByType<T, U> = {\n  [K in keyof T as T[K] extends U ? never : K]: T[K];\n};\n\nexport type PickByType<T, U> = {\n  [K in keyof T as T[K] extends U ? K : never]: T[K];\n};\n\n// Function type helpers\nexport type ArgumentTypes<F> = F extends (...args: infer A) => unknown ? A : never;\n\nexport type ReturnTypeAsync<F> = F extends (...args: unknown[]) => Promise<infer R> ? R : never;\n\nexport type FirstArgument<F> = F extends (arg: infer A, ...rest: unknown[]) => unknown ? A : never;\n\nexport type LastArgument<F> = F extends (...args: [...unknown[], infer L]) => unknown ? L : never;\n\n// Array and tuple helpers\nexport type Head<T extends readonly unknown[]> = T extends readonly [infer H, ...unknown[]] ? H : never;\n\nexport type Tail<T extends readonly unknown[]> = T extends readonly [unknown, ...infer R] ? R : never;\n\nexport type Last<T extends readonly unknown[]> = T extends readonly [...unknown[], infer L] ? L : never;\n\nexport type Length<T extends readonly unknown[]> = T['length'];\n\nexport type Reverse<T extends readonly unknown[]> = T extends readonly [...infer Rest, infer Last]\n  ? [Last, ...Reverse<Rest>]\n  : [];\n\nexport type Flatten<T extends readonly unknown[]> = T extends readonly [infer First, ...infer Rest]\n  ? First extends readonly unknown[]\n    ? [...Flatten<First>, ...Flatten<Rest>]\n    : [First, ...Flatten<Rest>]\n  : [];\n\n// String manipulation types\nexport type Split<S extends string, D extends string> = S extends `${infer T}${D}${infer U}`\n  ? [T, ...Split<U, D>]\n  : [S];\n\nexport type Join<T extends readonly string[], D extends string> = T extends readonly [\n  infer F,\n  ...infer R\n]\n  ? F extends string\n    ? R extends readonly string[]\n      ? R['length'] extends 0\n        ? F\n        : `${F}${D}${Join<R, D>}`\n      : never\n    : never\n  : '';\n\nexport type Capitalize<S extends string> = S extends `${infer F}${infer R}` \n  ? `${Uppercase<F>}${R}` \n  : S;\n\nexport type Uncapitalize<S extends string> = S extends `${infer F}${infer R}` \n  ? `${Lowercase<F>}${R}` \n  : S;\n\nexport type CamelCase<S extends string> = S extends `${infer F}_${infer R}`\n  ? `${F}${Capitalize<CamelCase<R>>}`\n  : S;\n\nexport type SnakeCase<S extends string> = S extends `${infer F}${infer R}`\n  ? F extends Uppercase<F>\n    ? `_${Lowercase<F>}${SnakeCase<R>}`\n    : `${F}${SnakeCase<R>}`\n  : S;\n\n// Conditional types\nexport type If<C extends boolean, T, F> = C extends true ? T : F;\n\nexport type IsAny<T> = 0 extends 1 & T ? true : false;\n\nexport type IsNever<T> = [T] extends [never] ? true : false;\n\nexport type IsUnknown<T> = IsAny<T> extends true ? false : unknown extends T ? true : false;\n\nexport type IsEqual<T, U> = [T] extends [U] ? ([U] extends [T] ? true : false) : false;\n\nexport type IsArray<T> = T extends readonly unknown[] ? true : false;\n\nexport type IsFunction<T> = T extends (...args: unknown[]) => unknown ? true : false;\n\nexport type IsObject<T> = T extends object \n  ? T extends unknown[] \n    ? false \n    : T extends (...args: unknown[]) => unknown\n    ? false \n    : true \n  : false;\n\n// Branded types for type safety\nexport type Brand<T, B> = T & { __brand: B };\n\nexport type Branded<T, B extends string> = T & { readonly __brand: unique symbol; readonly __type: B };\n\nexport type Unbrand<T> = T extends Brand<infer U, unknown> ? U : T;\n\n// Event handler types\nexport type EventMap = {\n  [K: string]: unknown[];\n};\n\nexport type EventHandler<T extends EventMap, K extends keyof T> = (...args: T[K]) => void;\n\nexport type EventHandlers<T extends EventMap> = {\n  [K in keyof T]: EventHandler<T, K>;\n};\n\n// Promise and async helpers\nexport type Awaited<T> = T extends Promise<infer U> ? Awaited<U> : T;\n\nexport type PromiseType<T> = T extends Promise<infer U> ? U : never;\n\nexport type MaybePromise<T> = T | Promise<T>;\n\nexport type PromiseValue<T> = T extends Promise<infer U> ? U : T;\n\n// JSON types\nexport type JsonPrimitive = string | number | boolean | null;\n\nexport type JsonValue = JsonPrimitive | JsonObject | JsonArray;\n\nexport type JsonObject = { [key: string]: JsonValue };\n\nexport type JsonArray = JsonValue[];\n\nexport type Jsonifiable<T> = {\n  [K in keyof T]: T[K] extends JsonValue\n    ? T[K]\n    : T[K] extends Date\n    ? string\n    : T[K] extends RegExp\n    ? string\n    : T[K] extends Function\n    ? never\n    : T[K] extends object\n    ? Jsonifiable<T[K]>\n    : never;\n};\n\n// Path and nested object types\nexport type Path<T> = T extends object\n  ? {\n      [K in keyof T]: K extends string\n        ? T[K] extends object\n          ? `${K}` | `${K}.${Path<T[K]>}`\n          : `${K}`\n        : never;\n    }[keyof T]\n  : never;\n\nexport type PathValue<T, P extends Path<T>> = P extends `${infer K}.${infer Rest}`\n  ? K extends keyof T\n    ? Rest extends Path<T[K]>\n      ? PathValue<T[K], Rest>\n      : never\n    : never\n  : P extends keyof T\n  ? T[P]\n  : never;\n\n// Simplified SetPath type to avoid constraint issues\nexport type SetPath<T, P extends string, V> = P extends `${infer K}.${infer Rest}`\n  ? K extends keyof T\n    ? { [Key in keyof T]: Key extends K ? SetPath<T[Key], Rest, V> : T[Key] }\n    : T\n  : P extends keyof T\n  ? { [Key in keyof T]: Key extends P ? V : T[Key] }\n  : T;\n\n// Database and API helpers\nexport type TableInsert<T> = Omit<T, 'id' | 'created_at' | 'updated_at'>;\n\nexport type TableUpdate<T> = Partial<Omit<T, 'id' | 'created_at'>> & { updated_at?: string };\n\nexport type ApiResponse<T> = {\n  data: T;\n  success: true;\n  error: null;\n} | {\n  data: null;\n  success: false;\n  error: string;\n};\n\nexport type QueryParams<T> = Partial<{\n  [K in keyof T]: T[K] extends string | number | boolean | null | undefined\n    ? T[K] | T[K][]\n    : never;\n}>;\n\n// Validation helpers\nexport type ValidationErrors<T> = Partial<Record<keyof T, string>>;\n\nexport type FormErrors<T> = {\n  [K in keyof T]?: T[K] extends object ? FormErrors<T[K]> : string;\n};\n\n// Component prop helpers\nexport type PropsWithClassName<T = Record<string, never>> = T & { className?: string };\n\nexport type PropsWithChildren<T = Record<string, never>> = T & { children?: React.ReactNode };\n\nexport type ComponentProps<T> = T extends React.ComponentType<infer P> ? P : never;\n\nexport type ElementProps<T extends keyof JSX.IntrinsicElements> = JSX.IntrinsicElements[T];\n\n// State management helpers\nexport type StateSelector<T, R> = (state: T) => R;\n\nexport type StateAction<T> = (state: T) => T;\n\nexport type StateReducer<T, A> = (state: T, action: A) => T;\n\n// Generic constraint helpers\nexport type NonNullable<T> = T extends null | undefined ? never : T;\n\nexport type NonEmptyArray<T> = [T, ...T[]];\n\nexport type AtLeastOne<T> = [T, ...T[]] | T[];\n\nexport type OneOf<T extends readonly unknown[]> = T[number];\n\nexport type AllOf<T> = T extends readonly (infer U)[] ? U : never; ","usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app/task-beacon-app-cursor/task-beacon-app/src/types/utility/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app/task-beacon-app-cursor/task-beacon-app/src/types/utility/validation.types.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":21,"column":11,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":21,"endColumn":14,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[490,493],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[490,493],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":27,"column":28,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":27,"endColumn":31,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[621,624],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[621,624],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":33,"column":37,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":33,"endColumn":40,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[753,756],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[753,756],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":37,"column":34,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":37,"endColumn":37,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[863,866],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[863,866],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":39,"column":25,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":39,"endColumn":28,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[965,968],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[965,968],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":42,"column":42,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":42,"endColumn":45,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1026,1029],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1026,1029],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":43,"column":34,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":43,"endColumn":37,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1092,1095],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1092,1095],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":48,"column":48,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":48,"endColumn":51,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1218,1221],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1218,1221],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":49,"column":24,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":49,"endColumn":27,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1274,1277],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1274,1277],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":105,"column":33,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":105,"endColumn":36,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2230,2233],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2230,2233],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":107,"column":35,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":107,"endColumn":38,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2289,2292],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2289,2292],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":122,"column":49,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":122,"endColumn":52,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2594,2597],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2594,2597],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":134,"column":26,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":134,"endColumn":29,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2926,2929],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2926,2929],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":139,"column":29,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":139,"endColumn":32,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3107,3110],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3107,3110],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":166,"column":38,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":166,"endColumn":41,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3725,3728],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3725,3728],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":173,"column":32,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":173,"endColumn":35,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3904,3907],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3904,3907],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":178,"column":33,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":178,"endColumn":36,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4029,4032],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4029,4032],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":236,"column":44,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":236,"endColumn":47,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5405,5408],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5405,5408],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":236,"column":53,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":236,"endColumn":56,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5414,5417],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5414,5417],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":241,"column":41,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":241,"endColumn":44,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5545,5548],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5545,5548],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":244,"column":28,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":244,"endColumn":31,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5655,5658],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5655,5658],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":250,"column":11,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":250,"endColumn":14,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5764,5767],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5764,5767],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":22,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Validation Utility Types\n * \n * Comprehensive types for data validation, rules, and validation results.\n * Used across form validation, API validation, and data integrity checks.\n */\n\n// Core validation types\nexport interface ValidationResult {\n  isValid: boolean;\n  errors: string[];\n  warnings?: string[];\n  details?: ValidationDetail[];\n}\n\nexport interface ValidationDetail {\n  field: string;\n  rule: string;\n  message: string;\n  severity: 'error' | 'warning' | 'info';\n  value?: any;\n}\n\nexport interface ValidationOptions {\n  stopOnFirstError?: boolean;\n  includeWarnings?: boolean;\n  context?: Record<string, any>;\n  locale?: string;\n  customMessages?: Record<string, string>;\n}\n\n// Validation rule types\nexport interface ValidationRule<T = any> {\n  name: string;\n  message?: string;\n  severity?: 'error' | 'warning';\n  validate: (value: T, context?: any) => boolean | string | Promise<boolean | string>;\n  dependsOn?: string[];\n  condition?: (context: any) => boolean;\n}\n\nexport interface AsyncValidationRule<T = any> extends ValidationRule<T> {\n  validate: (value: T, context?: any) => Promise<boolean | string>;\n  timeout?: number;\n  debounce?: number;\n}\n\nexport interface ConditionalValidationRule<T = any> extends ValidationRule<T> {\n  condition: (context: any) => boolean;\n  rules: ValidationRule<T>[];\n}\n\n// Built-in validation rule types\nexport interface RequiredRule {\n  type: 'required';\n  message?: string;\n}\n\nexport interface LengthRule {\n  type: 'length';\n  min?: number;\n  max?: number;\n  exact?: number;\n  message?: string;\n}\n\nexport interface PatternRule {\n  type: 'pattern';\n  pattern: RegExp | string;\n  flags?: string;\n  message?: string;\n}\n\nexport interface RangeRule {\n  type: 'range';\n  min?: number;\n  max?: number;\n  inclusive?: boolean;\n  message?: string;\n}\n\nexport interface EmailRule {\n  type: 'email';\n  allowDisplayName?: boolean;\n  requireTld?: boolean;\n  message?: string;\n}\n\nexport interface UrlRule {\n  type: 'url';\n  protocols?: string[];\n  requireProtocol?: boolean;\n  allowLocalhost?: boolean;\n  message?: string;\n}\n\nexport interface DateRule {\n  type: 'date';\n  format?: string;\n  min?: Date | string;\n  max?: Date | string;\n  message?: string;\n}\n\nexport interface CustomRule<T = any> {\n  type: 'custom';\n  validator: (value: T, context?: any) => boolean | string | Promise<boolean | string>;\n  message?: string;\n}\n\n// Validation schema types\nexport type FieldValidationRule = \n  | RequiredRule\n  | LengthRule\n  | PatternRule\n  | RangeRule\n  | EmailRule\n  | UrlRule\n  | DateRule\n  | CustomRule;\n\nexport type ValidationSchema<T = Record<string, any>> = {\n  [K in keyof T]?: FieldValidationRule | FieldValidationRule[];\n};\n\nexport interface SchemaValidationOptions extends ValidationOptions {\n  allowUnknownFields?: boolean;\n  stripUnknownFields?: boolean;\n  abortEarly?: boolean;\n}\n\n// Validation context and state\nexport interface ValidationContext {\n  values: Record<string, any>;\n  touched: Record<string, boolean>;\n  errors: Record<string, string>;\n  warnings: Record<string, string>;\n  isValidating: Record<string, boolean>;\n  metadata?: Record<string, any>;\n}\n\nexport interface FieldValidationState {\n  isValidating: boolean;\n  hasError: boolean;\n  hasWarning: boolean;\n  error?: string;\n  warning?: string;\n  lastValidated?: Date;\n}\n\n// Validation strategies\nexport type ValidationStrategy = 'onChange' | 'onBlur' | 'onSubmit' | 'manual';\n\nexport interface ValidationConfig {\n  strategy: ValidationStrategy;\n  debounceMs?: number;\n  validateOnMount?: boolean;\n  revalidateOnChange?: boolean;\n  showWarnings?: boolean;\n  locale?: string;\n}\n\n// Advanced validation features\nexport interface CrossFieldValidation {\n  fields: string[];\n  validator: (values: Record<string, any>) => boolean | string;\n  message?: string;\n  trigger?: 'any' | 'all';\n}\n\nexport interface DependentValidation {\n  dependsOn: string | string[];\n  condition: (dependentValues: any) => boolean;\n  rules: FieldValidationRule[];\n}\n\nexport interface ConditionalValidation {\n  when: (values: Record<string, any>) => boolean;\n  then: ValidationSchema;\n  otherwise?: ValidationSchema;\n}\n\n// Validation result aggregation\nexport interface AggregatedValidationResult {\n  isValid: boolean;\n  hasWarnings: boolean;\n  fieldResults: Record<string, ValidationResult>;\n  crossFieldResults: ValidationResult[];\n  summary: {\n    totalErrors: number;\n    totalWarnings: number;\n    fieldsWithErrors: string[];\n    fieldsWithWarnings: string[];\n  };\n}\n\n// Validation performance metrics\nexport interface ValidationMetrics {\n  totalTime: number;\n  fieldValidationTimes: Record<string, number>;\n  asyncValidationCount: number;\n  cacheHitRate: number;\n  validationCount: number;\n}\n\n// Validation cache\nexport interface ValidationCache {\n  get: (key: string) => ValidationResult | undefined;\n  set: (key: string, result: ValidationResult, ttl?: number) => void;\n  clear: (pattern?: string) => void;\n  size: number;\n}\n\n// Validation internationalization\nexport interface ValidationMessages {\n  required: string;\n  email: string;\n  url: string;\n  minLength: string;\n  maxLength: string;\n  min: string;\n  max: string;\n  pattern: string;\n  custom: string;\n  [key: string]: string;\n}\n\nexport interface ValidationLocale {\n  code: string;\n  messages: ValidationMessages;\n  dateFormat: string;\n  numberFormat: Intl.NumberFormatOptions;\n}\n\n// Validation transformers\nexport interface ValidationTransformer<T = any, U = any> {\n  transform: (value: T) => U;\n  validate?: (transformed: U) => boolean | string;\n}\n\nexport interface ValidationPipeline<T = any> {\n  transformers: ValidationTransformer[];\n  validators: ValidationRule<T>[];\n  finalTransform?: (value: any) => T;\n}\n\n// Error handling\nexport interface ValidationError extends Error {\n  field?: string;\n  value?: any;\n  rule?: string;\n  code?: string;\n  details?: ValidationDetail[];\n}\n\nexport interface ValidationErrorHandler {\n  onError: (error: ValidationError) => void;\n  onWarning?: (warning: ValidationDetail) => void;\n  onSuccess?: (result: ValidationResult) => void;\n}\n\n// Validation utilities\nexport interface ValidationUtilities {\n  email: (value: string) => boolean;\n  url: (value: string) => boolean;\n  phone: (value: string, country?: string) => boolean;\n  creditCard: (value: string) => boolean;\n  ssn: (value: string) => boolean;\n  zipCode: (value: string, country?: string) => boolean;\n  ipAddress: (value: string, version?: 4 | 6) => boolean;\n  strongPassword: (value: string) => boolean;\n}\n\n// Validation middleware\nexport interface ValidationMiddleware {\n  before?: (context: ValidationContext) => ValidationContext | Promise<ValidationContext>;\n  after?: (result: ValidationResult, context: ValidationContext) => ValidationResult | Promise<ValidationResult>;\n  onError?: (error: ValidationError, context: ValidationContext) => void;\n} ","usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app/task-beacon-app-cursor/task-beacon-app/src/vite-env.d.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app/task-beacon-app-cursor/task-beacon-app/src/workers/imageProcessorWorker.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app/task-beacon-app-cursor/task-beacon-app/tailwind.config.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/lukemckenzie/task-beacon-app/task-beacon-app-cursor/task-beacon-app/vite.config.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]}]
